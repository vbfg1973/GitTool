commit 33afd4b76393627477e878b3b195d606e585d816
Merge: 7fa8a8ee9400 d88f2f72ca89
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 19:57:00 2023 -0700

    Merge tag 'mm-nonmm-stable-2023-04-27-16-01' of git://git.kernel.org/pub/scm/linux/kernel/git/akpm/mm
    
    Pull non-MM updates from Andrew Morton:
     "Mainly singleton patches all over the place.
    
      Series of note are:
    
       - updates to scripts/gdb from Glenn Washburn
    
       - kexec cleanups from Bjorn Helgaas"
    
    * tag 'mm-nonmm-stable-2023-04-27-16-01' of git://git.kernel.org/pub/scm/linux/kernel/git/akpm/mm: (50 commits)
      mailmap: add entries for Paul Mackerras
      libgcc: add forward declarations for generic library routines
      mailmap: add entry for Oleksandr
      ocfs2: reduce ioctl stack usage
      fs/proc: add Kthread flag to /proc/$pid/status
      ia64: fix an addr to taddr in huge_pte_offset()
      checkpatch: introduce proper bindings license check
      epoll: rename global epmutex
      scripts/gdb: add GDB convenience functions $lx_dentry_name() and $lx_i_dentry()
      scripts/gdb: create linux/vfs.py for VFS related GDB helpers
      uapi/linux/const.h: prefer ISO-friendly __typeof__
      delayacct: track delays from IRQ/SOFTIRQ
      scripts/gdb: timerlist: convert int chunks to str
      scripts/gdb: print interrupts
      scripts/gdb: raise error with reduced debugging information
      scripts/gdb: add a Radix Tree Parser
      lib/rbtree: use '+' instead of '|' for setting color.
      proc/stat: remove arch_idle_time()
      checkpatch: check for misuse of the link tags
      checkpatch: allow Closes tags with links
      ...

commit 7fa8a8ee9400fe8ec188426e40e481717bc5e924
Merge: 91ec4b0d11fe 4d4b6d66db63
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 19:42:02 2023 -0700

    Merge tag 'mm-stable-2023-04-27-15-30' of git://git.kernel.org/pub/scm/linux/kernel/git/akpm/mm
    
    Pull MM updates from Andrew Morton:
    
     - Nick Piggin's "shoot lazy tlbs" series, to improve the peformance of
       switching from a user process to a kernel thread.
    
     - More folio conversions from Kefeng Wang, Zhang Peng and Pankaj
       Raghav.
    
     - zsmalloc performance improvements from Sergey Senozhatsky.
    
     - Yue Zhao has found and fixed some data race issues around the
       alteration of memcg userspace tunables.
    
     - VFS rationalizations from Christoph Hellwig:
         - removal of most of the callers of write_one_page()
         - make __filemap_get_folio()'s return value more useful
    
     - Luis Chamberlain has changed tmpfs so it no longer requires swap
       backing. Use `mount -o noswap'.
    
     - Qi Zheng has made the slab shrinkers operate locklessly, providing
       some scalability benefits.
    
     - Keith Busch has improved dmapool's performance, making part of its
       operations O(1) rather than O(n).
    
     - Peter Xu adds the UFFD_FEATURE_WP_UNPOPULATED feature to userfaultd,
       permitting userspace to wr-protect anon memory unpopulated ptes.
    
     - Kirill Shutemov has changed MAX_ORDER's meaning to be inclusive
       rather than exclusive, and has fixed a bunch of errors which were
       caused by its unintuitive meaning.
    
     - Axel Rasmussen give userfaultfd the UFFDIO_CONTINUE_MODE_WP feature,
       which causes minor faults to install a write-protected pte.
    
     - Vlastimil Babka has done some maintenance work on vma_merge():
       cleanups to the kernel code and improvements to our userspace test
       harness.
    
     - Cleanups to do_fault_around() by Lorenzo Stoakes.
    
     - Mike Rapoport has moved a lot of initialization code out of various
       mm/ files and into mm/mm_init.c.
    
     - Lorenzo Stoakes removd vmf_insert_mixed_prot(), which was added for
       DRM, but DRM doesn't use it any more.
    
     - Lorenzo has also coverted read_kcore() and vread() to use iterators
       and has thereby removed the use of bounce buffers in some cases.
    
     - Lorenzo has also contributed further cleanups of vma_merge().
    
     - Chaitanya Prakash provides some fixes to the mmap selftesting code.
    
     - Matthew Wilcox changes xfs and afs so they no longer take sleeping
       locks in ->map_page(), a step towards RCUification of pagefaults.
    
     - Suren Baghdasaryan has improved mmap_lock scalability by switching to
       per-VMA locking.
    
     - Frederic Weisbecker has reworked the percpu cache draining so that it
       no longer causes latency glitches on cpu isolated workloads.
    
     - Mike Rapoport cleans up and corrects the ARCH_FORCE_MAX_ORDER Kconfig
       logic.
    
     - Liu Shixin has changed zswap's initialization so we no longer waste a
       chunk of memory if zswap is not being used.
    
     - Yosry Ahmed has improved the performance of memcg statistics
       flushing.
    
     - David Stevens has fixed several issues involving khugepaged,
       userfaultfd and shmem.
    
     - Christoph Hellwig has provided some cleanup work to zram's IO-related
       code paths.
    
     - David Hildenbrand has fixed up some issues in the selftest code's
       testing of our pte state changing.
    
     - Pankaj Raghav has made page_endio() unneeded and has removed it.
    
     - Peter Xu contributed some rationalizations of the userfaultfd
       selftests.
    
     - Yosry Ahmed has fixed an issue around memcg's page recalim
       accounting.
    
     - Chaitanya Prakash has fixed some arm-related issues in the
       selftests/mm code.
    
     - Longlong Xia has improved the way in which KSM handles hwpoisoned
       pages.
    
     - Peter Xu fixes a few issues with uffd-wp at fork() time.
    
     - Stefan Roesch has changed KSM so that it may now be used on a
       per-process and per-cgroup basis.
    
    * tag 'mm-stable-2023-04-27-15-30' of git://git.kernel.org/pub/scm/linux/kernel/git/akpm/mm: (369 commits)
      mm,unmap: avoid flushing TLB in batch if PTE is inaccessible
      shmem: restrict noswap option to initial user namespace
      mm/khugepaged: fix conflicting mods to collapse_file()
      sparse: remove unnecessary 0 values from rc
      mm: move 'mmap_min_addr' logic from callers into vm_unmapped_area()
      hugetlb: pte_alloc_huge() to replace huge pte_alloc_map()
      maple_tree: fix allocation in mas_sparse_area()
      mm: do not increment pgfault stats when page fault handler retries
      zsmalloc: allow only one active pool compaction context
      selftests/mm: add new selftests for KSM
      mm: add new KSM process and sysfs knobs
      mm: add new api to enable ksm per process
      mm: shrinkers: fix debugfs file permissions
      mm: don't check VMA write permissions if the PTE/PMD indicates write permissions
      migrate_pages_batch: fix statistics for longterm pin retry
      userfaultfd: use helper function range_in_vma()
      lib/show_mem.c: use for_each_populated_zone() simplify code
      mm: correct arg in reclaim_pages()/reclaim_clean_pages_from_list()
      fs/buffer: convert create_page_buffers to folio_create_buffers
      fs/buffer: add folio_create_empty_buffers helper
      ...

commit 91ec4b0d11fe115581ce2835300558802ce55e6c
Merge: 513f17f8d6b6 46e614cc91f7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 17:46:52 2023 -0700

    Merge tag 'mips_6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux
    
    Pull MIPS updates from Thomas Bogendoerfer:
    
     - added support for Huawei B593u-12
    
     - added support for virt board aligned to QEMU MIPS virt board
    
     - added support for doing DMA coherence on a per device base
    
     - reworked handling of RALINK SoCs
    
     - cleanup for Loongon64 barriers
    
     - removed deprecated support for MIPS_CMP SMP handling method
    
     - removed support Sibyte CARMEL and CHRINE boards
    
     - cleanups and fixes
    
    * tag 'mips_6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/mips/linux: (59 commits)
      MIPS: uprobes: Restore thread.trap_nr
      MIPS: Don't clear _PAGE_SPECIAL in _PAGE_CHG_MASK
      MIPS: Sink body of check_bugs_early() into its only call site
      MIPS: Mark check_bugs() as __init
      Revert "MIPS: generic: Enable all CPUs supported by virt board in Kconfig"
      MIPS: octeon_switch: Remove duplicated labels
      MIPS: loongson2ef: Add missing break in cs5536_isa
      MIPS: Remove set_swbp() in uprobes.c
      MIPS: Use def_bool y for ARCH_SUPPORTS_UPROBES
      MIPS: fw: Allow firmware to pass a empty env
      MIPS: Remove deprecated CONFIG_MIPS_CMP
      MIPS: lantiq: remove unused function declaration
      MIPS: Drop unused positional parameter in local_irq_{dis,en}able
      MIPS: mm: Remove local_cache_flush_page
      MIPS: Remove no longer used ide.h
      MIPS: mm: Remove unused *cache_page_indexed flush functions
      MIPS: generic: Enable all CPUs supported by virt board in Kconfig
      MIPS: Add board config for virt board
      MIPS: Octeon: Disable CVMSEG by default on other platforms
      MIPS: Loongson: Don't select platform features with CPU
      ...

commit 513f17f8d6b67563d977c730d50bc0db6ea6e1b0
Merge: 35fab9271b7e e5c23bec0f12
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 17:41:23 2023 -0700

    Merge tag 'sh-for-v6.4-tag1' of git://git.kernel.org/pub/scm/linux/kernel/git/glaubitz/sh-linux
    
    Pull sh updates from John Paul Adrian Glaubitz:
     "This is a bit larger than my previous one and mainly consists of
      clean-up work in the arch/sh directory by Geert Uytterhoeven and Randy
      Dunlap.
    
      Additionally, this fixes a bug in the Storage Queue code that was
      discovered while I was reviewing a patch to switch the code to the
      bitmap API by Christophe Jaillet.
    
      So this contains both a fix for the original bug in the Storage Queue
      code that can be backported later as well as the Christophe's patch to
      swich the code to the bitmap API.
    
      Summary:
    
       - Use generic GCC library routines
    
       - sq: Use the bitmap API when applicable
    
       - sq: Fix incorrect element size for allocating bitmap buffer
    
       - pci: Remove unused variable in SH-7786 PCI Express code
    
       - mcount.S: fix build error when PRINTK is not enabled
    
       - remove sh5/sh64 last fragments
    
       - math-emu: fix macro redefined warning
    
       - init: use OF_EARLY_FLATTREE for early init
    
       - nmi_debug: fix return value of __setup handler
    
       - SH2007: drop the bad URL info"
    
    * tag 'sh-for-v6.4-tag1' of git://git.kernel.org/pub/scm/linux/kernel/git/glaubitz/sh-linux:
      sh: Replace <uapi/asm/types.h> by <asm-generic/int-ll64.h>
      sh: Use generic GCC library routines
      sh: sq: Use the bitmap API when applicable
      sh: sq: Fix incorrect element size for allocating bitmap buffer
      sh: pci: Remove unused variable in SH-7786 PCI Express code
      sh: mcount.S: fix build error when PRINTK is not enabled
      sh: remove sh5/sh64 last fragments
      sh: math-emu: fix macro redefined warning
      sh: init: use OF_EARLY_FLATTREE for early init
      sh: nmi_debug: fix return value of __setup handler
      sh: SH2007: drop the bad URL info

commit 35fab9271b7e6d193b47005c4d07369714db4fd1
Merge: da46b58ff884 cbfac7707ba1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 17:27:06 2023 -0700

    Merge tag 'for-linus-6.4-rc1-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/xen/tip
    
    Pull xen updates from Juergen Gross:
    
     - some cleanups in the Xen blkback driver
    
     - fix potential sleeps under lock in various Xen drivers
    
    * tag 'for-linus-6.4-rc1-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/xen/tip:
      xen/blkback: move blkif_get_x86_*_req() into blkback.c
      xen/blkback: simplify free_persistent_gnts() interface
      xen/blkback: remove stale prototype
      xen/blkback: fix white space code style issues
      xen/pvcalls: don't call bind_evtchn_to_irqhandler() under lock
      xen/scsiback: don't call scsiback_free_translation_entry() under lock
      xen/pciback: don't call pcistub_device_put() under lock

commit da46b58ff884146f6153064f18d276806f3c114c
Merge: 8ccd54fe4571 a494aef23dfc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 17:17:12 2023 -0700

    Merge tag 'hyperv-next-signed-20230424' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux
    
    Pull hyperv updates from Wei Liu:
    
     - PCI passthrough for Hyper-V confidential VMs (Michael Kelley)
    
     - Hyper-V VTL mode support (Saurabh Sengar)
    
     - Move panic report initialization code earlier (Long Li)
    
     - Various improvements and bug fixes (Dexuan Cui and Michael Kelley)
    
    * tag 'hyperv-next-signed-20230424' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux: (22 commits)
      PCI: hv: Replace retarget_msi_interrupt_params with hyperv_pcpu_input_arg
      Drivers: hv: move panic report code from vmbus to hv early init code
      x86/hyperv: VTL support for Hyper-V
      Drivers: hv: Kconfig: Add HYPERV_VTL_MODE
      x86/hyperv: Make hv_get_nmi_reason public
      x86/hyperv: Add VTL specific structs and hypercalls
      x86/init: Make get/set_rtc_noop() public
      x86/hyperv: Exclude lazy TLB mode CPUs from enlightened TLB flushes
      x86/hyperv: Add callback filter to cpumask_to_vpset()
      Drivers: hv: vmbus: Remove the per-CPU post_msg_page
      clocksource: hyper-v: make sure Invariant-TSC is used if it is available
      PCI: hv: Enable PCI pass-thru devices in Confidential VMs
      Drivers: hv: Don't remap addresses that are above shared_gpa_boundary
      hv_netvsc: Remove second mapping of send and recv buffers
      Drivers: hv: vmbus: Remove second way of mapping ring buffers
      Drivers: hv: vmbus: Remove second mapping of VMBus monitor pages
      swiotlb: Remove bounce buffer remapping for Hyper-V
      Driver: VMBus: Add Devicetree support
      dt-bindings: bus: Add Hyper-V VMBus
      Drivers: hv: vmbus: Convert acpi_device to more generic platform_device
      ...

commit 8ccd54fe45713cd458015b5b08d6098545e70543
Merge: 0835b5ee8704 c82729e06644
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 17:05:34 2023 -0700

    Merge tag 'for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mst/vhost
    
    Pull virtio updates from Michael Tsirkin:
     "virtio,vhost,vdpa: features, fixes, and cleanups:
    
       - reduction in interrupt rate in virtio
    
       - perf improvement for VDUSE
    
       - scalability for vhost-scsi
    
       - non power of 2 ring support for packed rings
    
       - better management for mlx5 vdpa
    
       - suspend for snet
    
       - VIRTIO_F_NOTIFICATION_DATA
    
       - shared backend with vdpa-sim-blk
    
       - user VA support in vdpa-sim
    
       - better struct packing for virtio
    
      and fixes, cleanups all over the place"
    
    * tag 'for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mst/vhost: (52 commits)
      vhost_vdpa: fix unmap process in no-batch mode
      MAINTAINERS: make me a reviewer of VIRTIO CORE AND NET DRIVERS
      tools/virtio: fix build caused by virtio_ring changes
      virtio_ring: add a struct device forward declaration
      vdpa_sim_blk: support shared backend
      vdpa_sim: move buffer allocation in the devices
      vdpa/snet: use likely/unlikely macros in hot functions
      vdpa/snet: implement kick_vq_with_data callback
      virtio-vdpa: add VIRTIO_F_NOTIFICATION_DATA feature support
      virtio: add VIRTIO_F_NOTIFICATION_DATA feature support
      vdpa/snet: support the suspend vDPA callback
      vdpa/snet: support getting and setting VQ state
      MAINTAINERS: add vringh.h to Virtio Core and Net Drivers
      vringh: address kdoc warnings
      vdpa: address kdoc warnings
      virtio_ring: don't update event idx on get_buf
      vdpa_sim: add support for user VA
      vdpa_sim: replace the spinlock with a mutex to protect the state
      vdpa_sim: use kthread worker
      vdpa_sim: make devices agnostic for work management
      ...

commit 0835b5ee8704aef4e19b369237a762c52c7b6fb1
Merge: 900941bea3f6 5239a89b06d6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 17:03:40 2023 -0700

    Merge tag 'pstore-v6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux
    
    Pull pstore update from Kees Cook:
    
     - Revert pmsg_lock back to a normal mutex (John Stultz)
    
    * tag 'pstore-v6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:
      pstore: Revert pmsg_lock back to a normal mutex

commit 900941bea3f69859c8e4cb17e4fd89c3ff6ade99
Merge: 888d3c9f7f3a b69edab47f1d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 17:01:04 2023 -0700

    Merge tag 'hardening-v6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux
    
    Pull hardening update from Kees Cook:
    
     - Fix kheaders array declaration to avoid tripping FORTIFY_SOURCE
    
    * tag 'hardening-v6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:
      kheaders: Use array declaration instead of char

commit 888d3c9f7f3ae44101a3fd76528d3dd6f96e9fd0
Merge: b6a7828502dc e3184de9d46c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 16:52:33 2023 -0700

    Merge tag 'sysctl-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/mcgrof/linux
    
    Pull sysctl updates from Luis Chamberlain:
     "This only does a few sysctl moves from the kernel/sysctl.c file, the
      rest of the work has been put towards deprecating two API calls which
      incur recursion and prevent us from simplifying the registration
      process / saving memory per move. Most of the changes have been
      soaking on linux-next since v6.3-rc3.
    
      I've slowed down the kernel/sysctl.c moves due to Matthew Wilcox's
      feedback that we should see if we could *save* memory with these moves
      instead of incurring more memory. We currently incur more memory since
      when we move a syctl from kernel/sysclt.c out to its own file we end
      up having to add a new empty sysctl used to register it. To achieve
      saving memory we want to allow syctls to be passed without requiring
      the end element being empty, and just have our registration process
      rely on ARRAY_SIZE(). Without this, supporting both styles of sysctls
      would make the sysctl registration pretty brittle, hard to read and
      maintain as can be seen from Meng Tang's efforts to do just this [0].
      Fortunately, in order to use ARRAY_SIZE() for all sysctl registrations
      also implies doing the work to deprecate two API calls which use
      recursion in order to support sysctl declarations with subdirectories.
    
      And so during this development cycle quite a bit of effort went into
      this deprecation effort. I've annotated the following two APIs are
      deprecated and in few kernel releases we should be good to remove
      them:
    
       - register_sysctl_table()
       - register_sysctl_paths()
    
      During this merge window we should be able to deprecate and unexport
      register_sysctl_paths(), we can probably do that towards the end of
      this merge window.
    
      Deprecating register_sysctl_table() will take a bit more time but this
      pull request goes with a few example of how to do this.
    
      As it turns out each of the conversions to move away from either of
      these two API calls *also* saves memory. And so long term, all these
      changes *will* prove to have saved a bit of memory on boot.
    
      The way I see it then is if remove a user of one deprecated call, it
      gives us enough savings to move one kernel/sysctl.c out from the
      generic arrays as we end up with about the same amount of bytes.
    
      Since deprecating register_sysctl_table() and register_sysctl_paths()
      does not require maintainer coordination except the final unexport
      you'll see quite a bit of these changes from other pull requests, I've
      just kept the stragglers after rc3"
    
    Link: https://lkml.kernel.org/r/ZAD+cpbrqlc5vmry@bombadil.infradead.org [0]
    
    * tag 'sysctl-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/mcgrof/linux: (29 commits)
      fs: fix sysctls.c built
      mm: compaction: remove incorrect #ifdef checks
      mm: compaction: move compaction sysctl to its own file
      mm: memory-failure: Move memory failure sysctls to its own file
      arm: simplify two-level sysctl registration for ctl_isa_vars
      ia64: simplify one-level sysctl registration for kdump_ctl_table
      utsname: simplify one-level sysctl registration for uts_kern_table
      ntfs: simplfy one-level sysctl registration for ntfs_sysctls
      coda: simplify one-level sysctl registration for coda_table
      fs/cachefiles: simplify one-level sysctl registration for cachefiles_sysctls
      xfs: simplify two-level sysctl registration for xfs_table
      nfs: simplify two-level sysctl registration for nfs_cb_sysctls
      nfs: simplify two-level sysctl registration for nfs4_cb_sysctls
      lockd: simplify two-level sysctl registration for nlm_sysctls
      proc_sysctl: enhance documentation
      xen: simplify sysctl registration for balloon
      md: simplify sysctl registration
      hv: simplify sysctl registration
      scsi: simplify sysctl registration with register_sysctl()
      csky: simplify alignment sysctl registration
      ...

commit b6a7828502dc769e1a5329027bc5048222fa210a
Merge: d06f5a3f7140 8660484ed1cf
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 16:36:55 2023 -0700

    Merge tag 'modules-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/mcgrof/linux
    
    Pull module updates from Luis Chamberlain:
     "The summary of the changes for this pull requests is:
    
       - Song Liu's new struct module_memory replacement
    
       - Nick Alcock's MODULE_LICENSE() removal for non-modules
    
       - My cleanups and enhancements to reduce the areas where we vmalloc
         module memory for duplicates, and the respective debug code which
         proves the remaining vmalloc pressure comes from userspace.
    
      Most of the changes have been in linux-next for quite some time except
      the minor fixes I made to check if a module was already loaded prior
      to allocating the final module memory with vmalloc and the respective
      debug code it introduces to help clarify the issue. Although the
      functional change is small it is rather safe as it can only *help*
      reduce vmalloc space for duplicates and is confirmed to fix a bootup
      issue with over 400 CPUs with KASAN enabled. I don't expect stable
      kernels to pick up that fix as the cleanups would have also had to
      have been picked up. Folks on larger CPU systems with modules will
      want to just upgrade if vmalloc space has been an issue on bootup.
    
      Given the size of this request, here's some more elaborate details:
    
      The functional change change in this pull request is the very first
      patch from Song Liu which replaces the 'struct module_layout' with a
      new 'struct module_memory'. The old data structure tried to put
      together all types of supported module memory types in one data
      structure, the new one abstracts the differences in memory types in a
      module to allow each one to provide their own set of details. This
      paves the way in the future so we can deal with them in a cleaner way.
      If you look at changes they also provide a nice cleanup of how we
      handle these different memory areas in a module. This change has been
      in linux-next since before the merge window opened for v6.3 so to
      provide more than a full kernel cycle of testing. It's a good thing as
      quite a bit of fixes have been found for it.
    
      Jason Baron then made dynamic debug a first class citizen module user
      by using module notifier callbacks to allocate / remove module
      specific dynamic debug information.
    
      Nick Alcock has done quite a bit of work cross-tree to remove module
      license tags from things which cannot possibly be module at my request
      so to:
    
       a) help him with his longer term tooling goals which require a
          deterministic evaluation if a piece a symbol code could ever be
          part of a module or not. But quite recently it is has been made
          clear that tooling is not the only one that would benefit.
          Disambiguating symbols also helps efforts such as live patching,
          kprobes and BPF, but for other reasons and R&D on this area is
          active with no clear solution in sight.
    
       b) help us inch closer to the now generally accepted long term goal
          of automating all the MODULE_LICENSE() tags from SPDX license tags
    
      In so far as a) is concerned, although module license tags are a no-op
      for non-modules, tools which would want create a mapping of possible
      modules can only rely on the module license tag after the commit
      8b41fc4454e ("kbuild: create modules.builtin without
      Makefile.modbuiltin or tristate.conf").
    
      Nick has been working on this *for years* and AFAICT I was the only
      one to suggest two alternatives to this approach for tooling. The
      complexity in one of my suggested approaches lies in that we'd need a
      possible-obj-m and a could-be-module which would check if the object
      being built is part of any kconfig build which could ever lead to it
      being part of a module, and if so define a new define
      -DPOSSIBLE_MODULE [0].
    
      A more obvious yet theoretical approach I've suggested would be to
      have a tristate in kconfig imply the same new -DPOSSIBLE_MODULE as
      well but that means getting kconfig symbol names mapping to modules
      always, and I don't think that's the case today. I am not aware of
      Nick or anyone exploring either of these options. Quite recently Josh
      Poimboeuf has pointed out that live patching, kprobes and BPF would
      benefit from resolving some part of the disambiguation as well but for
      other reasons. The function granularity KASLR (fgkaslr) patches were
      mentioned but Joe Lawrence has clarified this effort has been dropped
      with no clear solution in sight [1].
    
      In the meantime removing module license tags from code which could
      never be modules is welcomed for both objectives mentioned above. Some
      developers have also welcomed these changes as it has helped clarify
      when a module was never possible and they forgot to clean this up, and
      so you'll see quite a bit of Nick's patches in other pull requests for
      this merge window. I just picked up the stragglers after rc3. LWN has
      good coverage on the motivation behind this work [2] and the typical
      cross-tree issues he ran into along the way. The only concrete blocker
      issue he ran into was that we should not remove the MODULE_LICENSE()
      tags from files which have no SPDX tags yet, even if they can never be
      modules. Nick ended up giving up on his efforts due to having to do
      this vetting and backlash he ran into from folks who really did *not
      understand* the core of the issue nor were providing any alternative /
      guidance. I've gone through his changes and dropped the patches which
      dropped the module license tags where an SPDX license tag was missing,
      it only consisted of 11 drivers. To see if a pull request deals with a
      file which lacks SPDX tags you can just use:
    
        ./scripts/spdxcheck.py -f \
            $(git diff --name-only commid-id | xargs echo)
    
      You'll see a core module file in this pull request for the above, but
      that's not related to his changes. WE just need to add the SPDX
      license tag for the kernel/module/kmod.c file in the future but it
      demonstrates the effectiveness of the script.
    
      Most of Nick's changes were spread out through different trees, and I
      just picked up the slack after rc3 for the last kernel was out. Those
      changes have been in linux-next for over two weeks.
    
      The cleanups, debug code I added and final fix I added for modules
      were motivated by David Hildenbrand's report of boot failing on a
      systems with over 400 CPUs when KASAN was enabled due to running out
      of virtual memory space. Although the functional change only consists
      of 3 lines in the patch "module: avoid allocation if module is already
      present and ready", proving that this was the best we can do on the
      modules side took quite a bit of effort and new debug code.
    
      The initial cleanups I did on the modules side of things has been in
      linux-next since around rc3 of the last kernel, the actual final fix
      for and debug code however have only been in linux-next for about a
      week or so but I think it is worth getting that code in for this merge
      window as it does help fix / prove / evaluate the issues reported with
      larger number of CPUs. Userspace is not yet fixed as it is taking a
      bit of time for folks to understand the crux of the issue and find a
      proper resolution. Worst come to worst, I have a kludge-of-concept [3]
      of how to make kernel_read*() calls for modules unique / converge
      them, but I'm currently inclined to just see if userspace can fix this
      instead"
    
    Link: https://lore.kernel.org/all/Y/kXDqW+7d71C4wz@bombadil.infradead.org/ [0]
    Link: https://lkml.kernel.org/r/025f2151-ce7c-5630-9b90-98742c97ac65@redhat.com [1]
    Link: https://lwn.net/Articles/927569/ [2]
    Link: https://lkml.kernel.org/r/20230414052840.1994456-3-mcgrof@kernel.org [3]
    
    * tag 'modules-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/mcgrof/linux: (121 commits)
      module: add debugging auto-load duplicate module support
      module: stats: fix invalid_mod_bytes typo
      module: remove use of uninitialized variable len
      module: fix building stats for 32-bit targets
      module: stats: include uapi/linux/module.h
      module: avoid allocation if module is already present and ready
      module: add debug stats to help identify memory pressure
      module: extract patient module check into helper
      modules/kmod: replace implementation with a semaphore
      Change DEFINE_SEMAPHORE() to take a number argument
      module: fix kmemleak annotations for non init ELF sections
      module: Ignore L0 and rename is_arm_mapping_symbol()
      module: Move is_arm_mapping_symbol() to module_symbol.h
      module: Sync code of is_arm_mapping_symbol()
      scripts/gdb: use mem instead of core_layout to get the module address
      interconnect: remove module-related code
      interconnect: remove MODULE_LICENSE in non-modules
      zswap: remove MODULE_LICENSE in non-modules
      zpool: remove MODULE_LICENSE in non-modules
      x86/mm/dump_pagetables: remove MODULE_LICENSE in non-modules
      ...

commit d06f5a3f7140921ada47d49574ae6fa4de5e2a89
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 16:21:32 2023 -0700

    cdx: fix build failure due to sysfs 'bus_type' argument needing to be const
    
    Commit 75cff725d956 ("driver core: bus: mark the struct bus_type for
    sysfs callbacks as constant") missed at least one case - the CDX bus
    driver.  Probably because Greg didn't notice the build failure, because
    it only ends up being enabled on arm64.
    
    And I missed it during the merge, because while I do arm64 builds these
    days, I don't do them in between each pull.  So it took a while for me
    to notice the breakage, rather than me just fixing it in the driver core
    merge that brought this failure case in.
    
    Maybe we should remove the CDX_BUS dependency on arm64 when COMPILE_TEST
    is on?
    
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Nipun Gupta <nipun.gupta@amd.com>
    Cc: Nikhil Agarwal <nikhil.agarwal@amd.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

M	drivers/cdx/cdx.c

commit d88f2f72ca89ead8743ee15e547274ba248e7c59
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Mon Apr 24 17:01:32 2023 +1000

    mailmap: add entries for Paul Mackerras
    
    Link: https://lkml.kernel.org/r/ZEYpTAufVHTvsO1n@cleo
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

M	.mailmap

commit 4f20b7471c57032860065591a17efd3325216bde
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Apr 21 16:54:24 2023 +0200

    libgcc: add forward declarations for generic library routines
    
    With W=1 on platforms that use the generic gcc library routines
    (csky/loongarch/mips/riscv/sh/xtensa):
    
        lib/ashldi3.c:9:19: warning: no previous prototype for '__ashldi3' [-Wmissing-prototypes]
            9 | long long notrace __ashldi3(long long u, word_type b)
              |                   ^~~~~~~~~
          CC      lib/ashrdi3.o
        lib/ashrdi3.c:9:19: warning: no previous prototype for '__ashrdi3' [-Wmissing-prototypes]
            9 | long long notrace __ashrdi3(long long u, word_type b)
              |                   ^~~~~~~~~
          CC      lib/cmpdi2.o
        lib/cmpdi2.c:9:19: warning: no previous prototype for '__cmpdi2' [-Wmissing-prototypes]
            9 | word_type notrace __cmpdi2(long long a, long long b)
              |                   ^~~~~~~~
          CC      lib/lshrdi3.o
        lib/lshrdi3.c:9:19: warning: no previous prototype for '__lshrdi3' [-Wmissing-prototypes]
            9 | long long notrace __lshrdi3(long long u, word_type b)
              |                   ^~~~~~~~~
          CC      lib/muldi3.o
        lib/muldi3.c:49:19: warning: no previous prototype for '__muldi3' [-Wmissing-prototypes]
           49 | long long notrace __muldi3(long long u, long long v)
              |                   ^~~~~~~~
          CC      lib/ucmpdi2.o
        lib/ucmpdi2.c:8:19: warning: no previous prototype for '__ucmpdi2' [-Wmissing-prototypes]
            8 | word_type notrace __ucmpdi2(unsigned long long a, unsigned long long b)
              |                   ^~~~~~~~~
    
    Fix this by adding forward declarations to the common libgcc header
    file.
    
    Link: https://lkml.kernel.org/r/5cdbe08296693dd53849f199c3933e16e97b33c1.1682088593.git.geert+renesas@glider.be
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reported-by: kernel test robot <lkp@intel.com>
      Link: https://lore.kernel.org/oe-kbuild-all/202303272214.RxzpA6bP-lkp@intel.com/
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Chris Zankel <chris@zankel.net>
    Cc: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

M	include/linux/libgcc.h

commit 4d4b6d66db63ceed399f1fb1a4b24081d2590eb1
Author: Huang Ying <ying.huang@intel.com>
Date:   Mon Apr 24 14:54:08 2023 +0800

    mm,unmap: avoid flushing TLB in batch if PTE is inaccessible
    
    0Day/LKP reported a performance regression for commit 7e12beb8ca2a
    ("migrate_pages: batch flushing TLB").  In the commit, the TLB flushing
    during page migration is batched.  So, in try_to_migrate_one(),
    ptep_clear_flush() is replaced with set_tlb_ubc_flush_pending().  In
    further investigation, it is found that the TLB flushing can be avoided in
    ptep_clear_flush() if the PTE is inaccessible.  In fact, we can optimize
    in similar way for the batched TLB flushing too to improve the
    performance.
    
    So in this patch, we check pte_accessible() before
    set_tlb_ubc_flush_pending() in try_to_unmap/migrate_one().  Tests show
    that the benchmark score of the anon-cow-rand-mt test case of
    vm-scalability test suite can improve up to 2.1% with the patch on a Intel
    server machine.  The TLB flushing IPI can reduce up to 44.3%.
    
    Link: https://lore.kernel.org/oe-lkp/202303192325.ecbaf968-yujie.liu@intel.com
    Link: https://lore.kernel.org/oe-lkp/ab92aaddf1b52ede15e2c608696c36765a2602c1.camel@intel.com/
    Link: https://lkml.kernel.org/r/20230424065408.188498-1-ying.huang@intel.com
    Fixes: 7e12beb8ca2a ("migrate_pages: batch flushing TLB")
    Signed-off-by: "Huang, Ying" <ying.huang@intel.com>
    Reported-by: kernel test robot <yujie.liu@intel.com>
    Reviewed-by: Nadav Amit <namit@vmware.com>
    Reviewed-by: Xin Hao <xhao@linux.alibaba.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: David Hildenbrand <david@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

M	mm/rmap.c

commit 01106e140835ff94fdef79d66f166b87b0c89824
Author: Christian Brauner <brauner@kernel.org>
Date:   Thu Apr 20 10:57:43 2023 +0200

    shmem: restrict noswap option to initial user namespace
    
    Prevent tmpfs instances mounted in an unprivileged namespaces from evading
    accounting of locked memory by using the "noswap" mount option.
    
    Link: https://lkml.kernel.org/r/20230420-faxen-advokat-40abb4c1a152@brauner
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Reported-by: Hugh Dickins <hughd@google.com>
      Link: https://lore.kernel.org/lkml/79eae9fe-7818-a65c-89c6-138b55d609a@google.com
    Reviewed-by: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Adam Manzanares <a.manzanares@samsung.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Pankaj Raghav <p.raghav@samsung.com>
    Cc: Yosry Ahmed <yosryahmed@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

M	mm/shmem.c

commit 0175ab610c2df7c21d93e4bd63b4e67cfa86737c
Author: Hugh Dickins <hughd@google.com>
Date:   Sat Apr 22 21:47:20 2023 -0700

    mm/khugepaged: fix conflicting mods to collapse_file()
    
    Inserting Ivan Orlov's syzbot fix commit 2ce0bdfebc74
    ("mm: khugepaged: fix kernel BUG in hpage_collapse_scan_file()")
    ahead of Jiaqi Yan's and David Stevens's commits
    12904d953364 ("mm/khugepaged: recover from poisoned file-backed memory")
    cae106dd67b9 ("mm/khugepaged: refactor collapse_file control flow")
    ac492b9c70ca ("mm/khugepaged: skip shmem with userfaultfd")
    (all of which restructure collapse_file()) did not work out well.
    
    xfstests generic/086 on huge tmpfs (with accelerated khugepaged) freezes
    (if not on the first attempt, then the 2nd or 3rd) in find_lock_entries()
    while doing drop_caches: the file's xarray seems to have been corrupted,
    with find_get_entry() returning nonsense which makes no progress.
    
    Bisection led to ac492b9c70ca; and diff against earlier working linux-next
    suggested that it's probably down to an errant xas_store(), which does not
    belong with the later changes (and nor does the positioning of warnings).
    The later changes look as if they fix the syzbot issue independently.
    
    Remove most of what's left of 2ce0bdfebc74: just leave one WARN_ON_ONCE
    (xas_error) after the final xas_store() of the multi-index entry.
    
    Link: https://lkml.kernel.org/r/b6c881-c352-bb91-85a8-febeb09dfd71@google.com
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Cc: David Stevens <stevensd@chromium.org>
    Cc: Ivan Orlov <ivan.orlov0322@gmail.com>
    Cc: Jiaqi Yan <jiaqiyan@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

M	mm/khugepaged.c

commit cec24b8b6bb841a19b5c5555b600a511a8988100
Merge: 556eb8b79190 2025b2ca8004
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 12:07:50 2023 -0700

    Merge tag 'char-misc-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/char-misc
    
    Pull char/misc drivers updates from Greg KH:
     "Here is the "big" set of char/misc and other driver subsystems for
      6.4-rc1.
    
      It's pretty big, but due to the removal of pcmcia drivers, almost
      breaks even for number of lines added vs. removed, a nice change.
    
      Included in here are:
    
       - removal of unused PCMCIA drivers (finally!)
    
       - Interconnect driver updates and additions
    
       - Lots of IIO driver updates and additions
    
       - MHI driver updates
    
       - Coresight driver updates
    
       - NVMEM driver updates, which required some OF updates
    
       - W1 driver updates and a new maintainer to manage the subsystem
    
       - FPGA driver updates
    
       - New driver subsystem, CDX, for AMD systems
    
       - lots of other small driver updates and additions
    
      All of these have been in linux-next for a while with no reported
      issues"
    
    * tag 'char-misc-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/char-misc: (196 commits)
      mcb-lpc: Reallocate memory region to avoid memory overlapping
      mcb-pci: Reallocate memory region to avoid memory overlapping
      mcb: Return actual parsed size when reading chameleon table
      kernel/configs: Drop Android config fragments
      virt: acrn: Replace obsolete memalign() with posix_memalign()
      spmi: Add a check for remove callback when removing a SPMI driver
      spmi: fix W=1 kernel-doc warnings
      spmi: mtk-pmif: Drop of_match_ptr for ID table
      spmi: pmic-arb: Convert to platform remove callback returning void
      spmi: mtk-pmif: Convert to platform remove callback returning void
      spmi: hisi-spmi-controller: Convert to platform remove callback returning void
      w1: gpio: remove unnecessary ENOMEM messages
      w1: omap-hdq: remove unnecessary ENOMEM messages
      w1: omap-hdq: add SPDX tag
      w1: omap-hdq: allow compile testing
      w1: matrox: remove unnecessary ENOMEM messages
      w1: matrox: use inline over __inline__
      w1: matrox: switch from asm to linux header
      w1: ds2482: do not use assignment in if condition
      w1: ds2482: drop unnecessary header
      ...

commit 556eb8b79190151506187bf0b16dda423c34d9a8
Merge: 97b2ff294381 046b6a171009
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 11:53:57 2023 -0700

    Merge tag 'driver-core-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core
    
    Pull driver core updates from Greg KH:
     "Here is the large set of driver core changes for 6.4-rc1.
    
      Once again, a busy development cycle, with lots of changes happening
      in the driver core in the quest to be able to move "struct bus" and
      "struct class" into read-only memory, a task now complete with these
      changes.
    
      This will make the future rust interactions with the driver core more
      "provably correct" as well as providing more obvious lifetime rules
      for all busses and classes in the kernel.
    
      The changes required for this did touch many individual classes and
      busses as many callbacks were changed to take const * parameters
      instead. All of these changes have been submitted to the various
      subsystem maintainers, giving them plenty of time to review, and most
      of them actually did so.
    
      Other than those changes, included in here are a small set of other
      things:
    
       - kobject logging improvements
    
       - cacheinfo improvements and updates
    
       - obligatory fw_devlink updates and fixes
    
       - documentation updates
    
       - device property cleanups and const * changes
    
       - firwmare loader dependency fixes.
    
      All of these have been in linux-next for a while with no reported
      problems"
    
    * tag 'driver-core-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core: (120 commits)
      device property: make device_property functions take const device *
      driver core: update comments in device_rename()
      driver core: Don't require dynamic_debug for initcall_debug probe timing
      firmware_loader: rework crypto dependencies
      firmware_loader: Strip off \n from customized path
      zram: fix up permission for the hot_add sysfs file
      cacheinfo: Add use_arch[|_cache]_info field/function
      arch_topology: Remove early cacheinfo error message if -ENOENT
      cacheinfo: Check cache properties are present in DT
      cacheinfo: Check sib_leaf in cache_leaves_are_shared()
      cacheinfo: Allow early level detection when DT/ACPI info is missing/broken
      cacheinfo: Add arm64 early level initializer implementation
      cacheinfo: Add arch specific early level initializer
      tty: make tty_class a static const structure
      driver core: class: remove struct class_interface * from callbacks
      driver core: class: mark the struct class in struct class_interface constant
      driver core: class: make class_register() take a const *
      driver core: class: mark class_release() as taking a const *
      driver core: remove incorrect comment for device_create*
      MIPS: vpe-cmp: remove module owner pointer from struct class usage.
      ...

commit 97b2ff294381d05e59294a931c4db55276470cb5
Merge: b39667abcdcc 3fac2397f562
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 11:49:35 2023 -0700

    Merge tag 'staging-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging
    
    Pull staging driver updates from Greg KH:
     "Here is the large set of staging driver updates for 6.4-rc1. Once
      again, we removed more code than was added, a nice trend.
    
      It was a calm cycle, mostly all just small coding style cleanups,
      included in here are:
    
       - removal of the greybus loopback testing tools, userspace code that
         didn't belong in a driver subdirectory and was causing problems for
         some build systems
    
       - platform remove callback cleanups
    
       - rtl8192e huge cleanups
    
       - other small staging driver cleanups.
    
      All of these have been in linux-next for a while with no reported
      problems"
    
    * tag 'staging-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging: (185 commits)
      staging: rtl8192e: Fix W_DISABLE# does not work after stop/start
      staging: rtl8192e: Remove unchanged variables bfsync_processing and more
      staging: rtl8192e: Remove unchanged variable frame_sync_monitor
      staging: rtl8192e: Remove unchanged variable chan_forced
      staging: rtl8192e: Remove set to true while true of bfirst_after_down
      staging: rtl8192e: Remove second initialization of bActuallySet
      staging: rtl8192e: Remove unused macro RT_SET_PS_LEVEL
      staging: rtl8192e: Remove unused function rtl92e_disable_nic
      staging: rtl8192e: Remove unchanged variable RegRfPsLevel
      staging: rtl8172: Add blank lines after declarations
      staging: rtl8192e: Remove unused variable RF_Type
      staging: rtl8192e: Remove one of two checks for hardware RTL8192SE
      staging: rtl8192e: Remove unused function _rtl92e_dm_init_wa_broadcom_iot
      staging: rtl8192e: Remove macro IS_HARDWARE_TYPE_8192SE
      staging: greybus: drop loopback test files
      staging: rtl8192e: Add blank lines after declarations
      staging: rtl8192e: avoid CamelCase <dot11RSNAStatsCCMPDecryptErrors>
      staging: rtl8192e: avoid CamelCase <dot11RSNAStatsCCMPReplays>
      staging: rtl8192e: avoid CamelCase <dot11RSNAStatsCCMPFormatErrors>
      staging: rtl8192e: fix alignment to match open parenthesis
      ...

commit b39667abcdcc754e32a0eb0df9cf49d45333d4ae
Merge: 4010e62b5b68 2b3174c96696
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 11:46:26 2023 -0700

    Merge tag 'tty-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/tty
    
    Pull tty / serial updates from Greg KH:
     "Here is the big set of tty/serial driver updates for 6.4-rc1.
    
      Nothing major, just lots of tiny, constant, forward development. This
      includes:
    
       - obligatory n_gsm updates and feature additions
    
       - 8250_em driver updates
    
       - sh-sci driver updates
    
       - dts cleanups and updates
    
       - general cleanups and improvements by Ilpo and Jiri
    
       - other small serial driver core fixes and driver updates
    
      All of these have been in linux-next for a while with no reported
      problems"
    
    * tag 'tty-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/tty: (87 commits)
      n_gsm: Use array_index_nospec() with index that comes from userspace
      tty: vt: drop checks for undefined VT_SINGLE_DRIVER
      tty: vt: distribute EXPORT_SYMBOL()
      tty: vt: simplify some cases in tioclinux()
      tty: vt: reformat tioclinux()
      tty: serial: sh-sci: Fix end of transmission on SCI
      tty: serial: sh-sci: Add support for tx end interrupt handling
      tty: serial: sh-sci: Fix TE setting on SCI IP
      tty: serial: sh-sci: Add RZ/G2L SCIFA DMA rx support
      tty: serial: sh-sci: Add RZ/G2L SCIFA DMA tx support
      serial: max310x: fix IO data corruption in batched operations
      serial: core: Disable uart_start() on uart_remove_one_port()
      serial: 8250: Reinit port->pm on port specific driver unbind
      serial: 8250: Add missing wakeup event reporting
      tty: serial: fsl_lpuart: use UARTMODIR register bits for lpuart32 platform
      tty: serial: fsl_lpuart: adjust buffer length to the intended size
      serial: fix TIOCSRS485 locking
      serial: make SiFive serial drivers depend on ARCH_ symbols
      tty: synclink_gt: don't allocate and pass dummy flags
      tty: serial: simplify qcom_geni_serial_send_chunk_fifo()
      ...

commit 4010e62b5b684d7a6090f3f9c69f8a5be31910e5
Merge: b02847fc2e7a 8f40fc080813
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 11:42:11 2023 -0700

    Merge tag 'usb-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb
    
    Pull USB / Thunderbolt updates from Greg KH:
     "Here is the large set of USB and Thunderbolt changes for 6.4-rc1.
    
      The "biggest" thing in here is the removal of two obsolete drivers,
      u132-hcd and ftdi-elan, making this a net-removal of code overall.
    
      Other than the driver removals, included in here are:
    
       - Thunderbolt updates for new hardware and features
    
       - xhci driver updates and fixes
    
       - dwc3 driver updates and fixes
    
       - gadget core and driver updates and features added
    
       - mtu3 driver updates
    
       - dwc2 driver fixes and updates
    
       - usb-serial driver updates
    
       - typec driver updates and fixes
    
       - platform remove callback changes
    
       - dts updates and conversions
    
       - other small changes
    
      All have been in linux-next for a while with no reported problems"
    
    * tag 'usb-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb: (177 commits)
      usb: dwc3: gadget: Refactor EP0 forced stall/restart into a separate API
      usb: dwc3: gadget: Execute gadget stop after halting the controller
      media: radio-shark: Add endpoint checks
      USB: sisusbvga: Add endpoint checks
      USB: core: Add routines for endpoint checks in old drivers
      usb: dwc3: gadget: Stall and restart EP0 if host is unresponsive
      dt-bindings: usb: snps,dwc3: Add 'snps,parkmode-disable-hs-quirk' quirk
      usb: dwc3: core: add support for disabling High-speed park mode
      dt-bindings: usb: ci-hdrc-usb2: allow multiple PHYs
      usb: mtu3: add optional clock xhci_ck and frmcnt_ck
      dt-bindings: usb: mtu3: add two optional clocks
      usb: mtu3: expose role-switch control to userspace
      usb: mtu3: unlock @mtu->lock just before giving back request
      usb: mtu3: fix kernel panic at qmu transfer done irq handler
      usb: mtu3: use boolean return value
      usb: mtu3: give back request when rx error happens
      usb: chipidea: fix missing goto in `ci_hdrc_probe`
      usb: gadget: udc: core: Prevent redundant calls to pullup
      usb: gadget: udc: core: Invoke usb_gadget_connect only when started
      usb: typec: ucsi: don't print PPM init deferred errors
      ...

commit b02847fc2e7a55b7247cf80c14527555bdc965af
Merge: 34da76dca467 02dc51a0a07a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 11:27:48 2023 -0700

    Merge tag 'firewire-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/ieee1394/linux1394
    
    Pull firewire updates from Takashi Sakamoto:
     "The pull request includes a few changes, Its main purpose is to
      prepare for my future work by taking over maintainership from Stefan
      Richter. I have plans to work on several items; e.g. packet processing
      in workqueue context instead of tasklet.
    
      As you may be aware, the IEEE 1394 technology is outdated. However, we
      still have users. It is better to ensure a smooth transition for the
      users to shift to other categories of devices"
    
    * tag 'firewire-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/ieee1394/linux1394:
      firewire: init_ohci1394_dma: use correct function names in comments
      MAINTAINERS: replace maintainer of FireWire subsystem

commit 34da76dca4673ab1819830b4924bb5b436325b26
Merge: 725a345b2ee3 c3a6ef330a08
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 11:23:36 2023 -0700

    Merge tag 'for-linus-2023042601' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid
    
    Pull HID updates from Jiri Kosina:
    
     - import a bunch of HID selftests from out-of-tree hid-tools project
       (Benjamin Tissoires)
    
     - drastically reducing Bluetooth disconnects on hid-nintendo driven
       devices (Daniel J. Ogorchock)
    
     - lazy initialization of battery interfaces in wacom driver (Jason
       Gerecke)
    
     - generic support for all Kye tablets (David Yang)
    
     - proper rumble queue overrun handling in hid-nintendo (Daniel J.
       Ogorchock)
    
     - support for ADC measurement in logitech-hidpp driver (Bastien Nocera)
    
     - reset GPIO support in i2c-hid (Hans de Goede)
    
     - improved handling of generic "Digitizer" usage (Jason Gerecke)
    
     - support for KEY_CAMERA_FOCUS (Feng Qi)
    
     - quirks for Apple Geyser 3 and Apple Geyser 4 (Alex Henrie)
    
     - assorted functional fixes and device ID additions
    
    * tag 'for-linus-2023042601' of git://git.kernel.org/pub/scm/linux/kernel/git/hid/hid: (54 commits)
      HID: amd_sfh: Fix max supported HID devices
      HID: wacom: generic: Set battery quirk only when we see battery data
      HID: wacom: Lazy-init batteries
      HID: Ignore battery for ELAN touchscreen on ROG Flow X13 GV301RA
      HID: asus: explicitly include linux/leds.h
      HID: lg-g15: explicitly include linux/leds.h
      HID: steelseries: explicitly include linux/leds.h
      HID: apple: Set the tilde quirk flag on the Geyser 3
      HID: apple: explicitly include linux/leds.h
      HID: mcp2221: fix get and get_direction for gpio
      HID: mcp2221: fix report layout for gpio get
      HID: wacom: Set a default resolution for older tablets
      HID: i2c-hid-of: Add reset GPIO support to i2c-hid-of
      HID: i2c-hid-of: Allow using i2c-hid-of on non OF platforms
      HID: i2c-hid-of: Consistenly use dev local variable in probe()
      HID: kye: Fix rdesc for kye tablets
      HID: amd_sfh: Support for additional light sensor
      HID: amd_sfh: Handle "no sensors" enabled for SFH1.1
      HID: amd_sfh: Increase sensor command timeout for SFH1.1
      HID: amd_sfh: Correct the stop all command
      ...

commit 725a345b2ee3c24f9ac2078eb73667e22a1b7214
Merge: 89555eebb9fb 60ed3cd85b95
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 11:19:51 2023 -0700

    Merge tag 'fbdev-for-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/linux-fbdev
    
    Pull fbdev updates from Helge Deller:
     "Nothing really exiting in here.
    
      The majority of lines changed is due to Uwe's preparation patches to
      change the return value of the .remove() callback to void.
    
      Summary:
    
       - vt_buffer.h: Fix build on alpha (Randy Dunlap)
    
       - mmp: Clock handling fix (Christophe JAILLET)
    
       - 68328fb, ps3fb, vfb: Init .owner field of struct fb_ops (Thomas
         Zimmermann)
    
       - fbdev: cg14: Convert to platform remove callback returning void
    
       - Preparation patches to convert drivers to return void in .remove()
         callback (Uwe Kleine-König)
    
       - Drop Paul Mackerras as rage128 maintainer"
    
    * tag 'fbdev-for-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/deller/linux-fbdev: (51 commits)
      MAINTAINERS: Remove rage128 framebuffer driver maintainer
      fbdev: vfb: Init owner field of struct fb_ops
      fbdev: ps3fb: Init owner field of struct fb_ops
      fbdev: 68328fb: Init owner field of struct fb_ops
      fbdev: mmp: Fix deferred clk handling in mmphw_probe()
      linux/vt_buffer.h: allow either builtin or modular for macros
      fbdev: xilinxfb: Convert to platform remove callback returning void
      fbdev: wmt_ge_rops: Convert to platform remove callback returning void
      fbdev: wm8505fb: Convert to platform remove callback returning void
      fbdev: vt8500lcdfb: Convert to platform remove callback returning void
      fbdev: via: Convert to platform remove callback returning void
      fbdev: vga16fb: Convert to platform remove callback returning void
      fbdev: vfb: Convert to platform remove callback returning void
      fbdev: vesafb: Convert to platform remove callback returning void
      fbdev: uvesafb: Convert to platform remove callback returning void
      fbdev: tcx: Convert to platform remove callback returning void
      fbdev: sm501fb: Convert to platform remove callback returning void
      fbdev: simplefb: Convert to platform remove callback returning void
      fbdev: sh_mobile_lcdcfb: Convert to platform remove callback returning void
      fbdev: sh7760fb: Convert to platform remove callback returning void
      ...

commit 89555eebb9fb603ad43c0def8ab35e76c210002f
Merge: d91f6a7307d2 38c87827ffd3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 11:15:36 2023 -0700

    Merge tag 'i2c-for-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/wsa/linux
    
    Pull i2c updates from Wolfram Sang:
     "Mostly fixes for DTs or DT handling this time. And a few driver
      bugfixes"
    
    * tag 'i2c-for-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/wsa/linux: (28 commits)
      i2c: xiic: xiic_xfer(): Fix runtime PM leak on error path
      i2c: cadence: cdns_i2c_master_xfer(): Fix runtime PM leak on error path
      i2c: omap: Improve error reporting for problems during .remove()
      i2c: cadence: Add reset controller support
      dt-bindings: i2c: cadence: Document `resets` property
      i2c: mediatek: add support for MT7981 SoC
      dt-bindings: i2c: i2c-mt65xx: add MediaTek MT7981 SoC
      dt-bindings: i2c: Drop unneeded quotes
      i2c: brcmstb: use devm_platform_ioremap_resource_byname()
      i2c: cadence: Detect maximum transfer size
      i2c: cadence: Allow to specify the FIFO depth
      dt-bindings: i2c: cadence: Document `fifo-depth` property
      i2c: xiic: Use devm_platform_get_and_ioremap_resource()
      i2c: mpc: Use i2c-scl-clk-low-timeout-us i2c property
      i2c: mpc: Use of_property_read_u32 instead of of_get_property
      dt-bindings: i2c: mpc: Mark "fsl,timeout" as deprecated
      i2c: xiic: hide OF related data for COMPILE_TEST
      i2c: synquacer: mark OF related data as maybe unused
      dt-bindings: i2c: i2c-mt65xx: Add compatible for MT6795 Helio X10
      i2c: imx: Simplify using devm_clk_get_enabled()
      ...

commit d91f6a7307d27eae7b954c82bebf55071914c3f2
Merge: fc2e58b8b7c9 d08076678ce7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 11:07:18 2023 -0700

    Merge tag 'for-linus-6.4-1' of https://github.com/cminyard/linux-ipmi
    
    Pull IPMI updates from Corey Minyard:
     "Minor bug fixes for the IPMI driver
    
      There was a bug in the SSIF driver where in certain conditions it
      could stop working.
    
      Outside of that: spelling fixes, removing some dead code, re-adding a
      missing statistic increment, and removal of register_sysctl_table()"
    
    * tag 'for-linus-6.4-1' of https://github.com/cminyard/linux-ipmi:
      ipmi:ssif: Drop if blocks with always false condition
      ipmi: fix SSIF not responding under certain cond.
      ipmi:ssif: Add send_retries increment
      char:ipmi:Fix spelling mistake "asychronously" -> "asynchronously"
      ipmi: simplify sysctl registration
      ipmi: ASPEED_BT_IPMI_BMC: select REGMAP_MMIO instead of depending on it

commit fc2e58b8b7c94b8fe23977775550de00472f6a74
Merge: 1c15ca4e4efa cc5f6fa4f659
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 11:02:26 2023 -0700

    Merge tag 'spi-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi
    
    Pull spi updates from Mark Brown:
     "A fairly standard release for SPI with the exception of a change to
      the API for specifying chip selects done in preparation for supporting
      devices with more than one chip select, this required some mechanical
      changes throughout the tree which have been cooking in -next happily
      for a while.
    
      There's also a new API to allow us to support TPM chips on half duplex
      controllers.
    
      Summary:
    
       - Refactoring in preparation for supporting multiple chip selects for
         a single device, needed by some flash devices, which required a
         change in the SPI device API visible throughout the tree
    
       - Support for hardware assisted interaction with SPI TPMs on half
         duplex controllers, implemented on nVidia Tedra210 QuadSPI
    
       - Optimisation for large transfers on fsl-cpm devices
    
       - Cleanups around device property use which fix some sisues with
         fwnode
    
       - Use of both void remove() and devm_platform_.*ioremap_resource()
    
       - Support for AMD Pensando Elba, Amlogic A1, Cadence device mode,
         Intel MetorLake-S and StarFive J7110 QuadSPI"
    
    * tag 'spi-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi: (185 commits)
      spi: bcm63xx: use macro DEFINE_SIMPLE_DEV_PM_OPS
      spi: tegra210-quad: Enable TPM wait polling
      spi: Add TPM HW flow flag
      spi: bcm63xx: remove PM_SLEEP based conditional compilation
      spi: cadence-quadspi: use macro DEFINE_SIMPLE_DEV_PM_OPS
      spi: spi-cadence: Add support for Slave mode
      spi: spi-cadence: Switch to spi_controller structure
      spi: cadence-quadspi: fix suspend-resume implementations
      spi: dw: Add support for AMD Pensando Elba SoC
      spi: dw: Add AMD Pensando Elba SoC SPI Controller
      spi: cadence-quadspi: Disable the SPI before reconfiguring
      spi: cadence-quadspi: Update the read timeout based on the length
      spi: spi-loopback-test: Add module param for iteration length
      spi: add support for Amlogic A1 SPI Flash Controller
      dt-bindings: spi: add Amlogic A1 SPI controller
      spi: fsl-spi: No need to check transfer length versus word size
      spi: fsl-spi: Change mspi_apply_cpu_mode_quirks() to void
      spi: fsl-cpm: Use 16 bit mode for large transfers with even size
      spi: fsl-spi: Re-organise transfer bits_per_word adaptation
      spi: fsl-spi: Fix CPM/QE mode Litte Endian
      ...

commit 1c15ca4e4efaddb78f83eed31eeee34c522c3ae2
Merge: 34b62f186db9 baa6584a2449
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 10:58:37 2023 -0700

    Merge tag 'sound-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound
    
    Pull sound updates from Takashi Iwai:
     "At this time, it's an interesting mixture of changes for both old and
      new stuff. Majority of changes are about ASoC (lots of systematic
      changes for converting remove callbacks to void, and cleanups), while
      we got the fixes and the enhancements of very old PCI cards, too.
    
      Here are some highlights:
    
      ALSA/ASoC Core:
       - Continued effort of more ASoC core cleanups
       - Minor improvements for XRUN handling in indirect PCM helpers
       - Code refactoring of PCM core code
    
      ASoC:
       - Continued feature and simplification work on SOF, including
         addition of a no-DSP mode for bringup, HDA MLink and extensions to
         the IPC4 protocol
       - Hibernation support for CS35L45
       - More DT binding conversions
       - Support for Cirrus Logic CS35L56, Freescale QMC, Maxim MAX98363,
         nVidia systems with MAX9809x and RT5631, Realtek RT712, Renesas
         R-Car Gen4, Rockchip RK3588 and TI TAS5733
    
      ALSA:
       - Lots of works for legacy emu10k1 and ymfpci PCI drivers
       - PCM kselftest fixes and enhancements"
    
    * tag 'sound-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound: (586 commits)
      ALSA: emu10k1: use high-level I/O in set_filterQ()
      ALSA: emu10k1: use high-level I/O functions also during init
      ALSA: emu10k1: fix error handling in snd_audigy_i2c_volume_put()
      ALSA: emu10k1: don't stop DSP in _snd_emu10k1_{,audigy_}init_efx()
      ALSA: emu10k1: fix SNDRV_EMU10K1_IOCTL_SINGLE_STEP
      ALSA: emu10k1: skip Sound Blaster-specific hacks for E-MU cards
      ALSA: emu10k1: fixup DSP defines
      ALSA: emu10k1: pull in some register definitions from kX-project
      ALSA: emu10k1: remove some bogus defines
      ALSA: emu10k1: eliminate some unused defines
      ALSA: emu10k1: fix lineup of EMU_HANA_* defines
      ALSA: emu10k1: comment updates
      ALSA: emu10k1: fix snd_emu1010_fpga_read() input masking for rev2 cards
      ALSA: emu10k1: remove unused emu->pcm_playback_efx_substream field
      ALSA: emu10k1: remove unused `resume` parameter from snd_emu10k1_init()
      ALSA: emu10k1: minor optimizations
      ALSA: emu10k1: remove remaining cruft from snd_emu10k1_emu1010_init()
      ALSA: emu10k1: remove apparently pointless EMU_HANA_OPTION_CARDS reads
      ALSA: emu10k1: remove apparently pointless FPGA reads
      ALSA: emu10k1: stop doing weird things with HCFG in snd_emu10k1_emu1010_init()
      ...

commit 34b62f186db9614e55d021f8c58d22fc44c57911
Merge: cb6fe2ceb667 09a8e5f01dfb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 10:45:30 2023 -0700

    Merge tag 'pci-v6.4-changes' of git://git.kernel.org/pub/scm/linux/kernel/git/pci/pci
    
    Pull pci updates from Bjorn Helgaas:
     "Resource management:
    
       - Add pci_dev_for_each_resource() and pci_bus_for_each_resource()
         iterators
    
      PCIe native device hotplug:
    
       - Fix AB-BA deadlock between reset_lock and device_lock
    
      Power management:
    
       - Wait longer for devices to become ready after resume (as we do for
         reset) to accommodate Intel Titan Ridge xHCI devices
    
       - Extend D3hot delay for NVIDIA HDA controllers to avoid
         unrecoverable devices after a bus reset
    
      Error handling:
    
       - Clear PCIe Device Status after EDR since generic error recovery now
         only clears it when AER is native
    
      ASPM:
    
       - Work around Chromebook firmware defect that clobbers Capability
         list (including ASPM L1 PM Substates Cap) when returning from
         D3cold to D0
    
      Freescale i.MX6 PCIe controller driver:
    
       - Install imprecise external abort handler only when DT indicates
         PCIe support
    
      Freescale Layerscape PCIe controller driver:
    
       - Add ls1028a endpoint mode support
    
      Qualcomm PCIe controller driver:
    
       - Add SM8550 DT binding and driver support
    
       - Add SDX55 DT binding and driver support
    
       - Use bulk APIs for clocks of IP 1.0.0, 2.3.2, 2.3.3
    
       - Use bulk APIs for reset of IP 2.1.0, 2.3.3, 2.4.0
    
       - Add DT "mhi" register region for supported SoCs
    
       - Expose link transition counts via debugfs to help debug low power
         issues
    
       - Support system suspend and resume; reduce interconnect bandwidth
         and turn off clock and PHY if there are no active devices
    
       - Enable async probe by default to reduce boot time
    
      Miscellaneous:
    
       - Sort controller Kconfig entries by vendor"
    
    * tag 'pci-v6.4-changes' of git://git.kernel.org/pub/scm/linux/kernel/git/pci/pci: (56 commits)
      PCI: xilinx: Drop obsolete dependency on COMPILE_TEST
      PCI: mobiveil: Sort Kconfig entries by vendor
      PCI: dwc: Sort Kconfig entries by vendor
      PCI: Sort controller Kconfig entries by vendor
      PCI: Use consistent controller Kconfig menu entry language
      PCI: xilinx-nwl: Add 'Xilinx' to Kconfig prompt
      PCI: hv: Add 'Microsoft' to Kconfig prompt
      PCI: meson: Add 'Amlogic' to Kconfig prompt
      PCI: Use of_property_present() for testing DT property presence
      PCI/PM: Extend D3hot delay for NVIDIA HDA controllers
      dt-bindings: PCI: qcom: Document msi-map and msi-map-mask properties
      PCI: qcom: Add SM8550 PCIe support
      dt-bindings: PCI: qcom: Add SM8550 compatible
      PCI: qcom: Add support for SDX55 SoC
      dt-bindings: PCI: qcom-ep: Fix the unit address used in example
      dt-bindings: PCI: qcom: Add SDX55 SoC
      dt-bindings: PCI: qcom: Update maintainers entry
      PCI: qcom: Enable async probe by default
      PCI: qcom: Add support for system suspend and resume
      PCI/PM: Drop pci_bridge_wait_for_secondary_bus() timeout parameter
      ...

commit cb6fe2ceb667eb78f252d473b03deb23999ab1cf
Merge: d42b1c47570e 1c5e9170ad93
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 10:09:05 2023 -0700

    Merge tag 'devicetree-for-6.4-2' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull more devicetree updates from Rob Herring:
    
     - First part of DT header detangling dropping cpu.h from of_device.h
       and replacing some includes with forward declarations. A handful of
       drivers needed some adjustment to their includes as a result.
    
     - Refactor of_device.h to be used by bus drivers rather than various
       device drivers. This moves non-bus related functions out of
       of_device.h. The end goal is for of_platform.h and of_device.h to
       stop including each other.
    
     - Refactor open coded parsing of "ranges" in some bus drivers to use DT
       address parsing functions
    
     - Add some new address parsing functions of_property_read_reg(),
       of_range_count(), and of_range_to_resource() in preparation to
       convert more open coded parsing of DT addresses to use them.
    
     - Treewide clean-ups to use of_property_read_bool() and
       of_property_present() as appropriate. The ones here are the ones that
       didn't get picked up elsewhere.
    
    * tag 'devicetree-for-6.4-2' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (34 commits)
      bus: tegra-gmi: Replace of_platform.h with explicit includes
      hte: Use of_property_present() for testing DT property presence
      w1: w1-gpio: Use of_property_read_bool() for boolean properties
      virt: fsl: Use of_property_present() for testing DT property presence
      soc: fsl: Use of_property_present() for testing DT property presence
      sbus: display7seg: Use of_property_read_bool() for boolean properties
      sparc: Use of_property_read_bool() for boolean properties
      sparc: Use of_property_present() for testing DT property presence
      bus: mvebu-mbus: Remove open coded "ranges" parsing
      of/address: Add of_property_read_reg() helper
      of/address: Add of_range_count() helper
      of/address: Add support for 3 address cell bus
      of/address: Add of_range_to_resource() helper
      of: unittest: Add bus address range parsing tests
      of: Drop cpu.h include from of_device.h
      OPP: Adjust includes to remove of_device.h
      irqchip: loongson-eiointc: Add explicit include for cpuhotplug.h
      cpuidle: Adjust includes to remove of_device.h
      cpufreq: sun50i: Add explicit include for cpu.h
      cpufreq: Adjust includes to remove of_device.h
      ...

commit d42b1c47570eb2ed818dc3fe94b2678124af109d
Merge: 6df969b77ecc 66ae05351676
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 09:23:57 2023 -0700

    Merge tag 'devicetree-for-6.4-1' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull devicetree updates from Rob Herring:
     "Bindings:
    
       - Convert Qcom IOMMU, Amlogic timer, Freescale sec-v4.0, Toshiba
         TC358764 display bridge, Parade PS8622 display bridge, and Xilinx
         FPGA bindings to DT schema format
    
       - Add qdu1000 and sa8775p SoC support to Qcom PDC interrupt
         controller
    
       - Add MediaTek MT8365 UART and SYSIRQ bindings
    
       - Add Arm Cortex-A78C and X1C core compatibles
    
       - Add vendor prefix for Novatek
    
       - Remove bindings for stih415, sti416, stid127 platforms
    
       - Drop uneeded quotes in schema files. This is preparation for
         yamllint checking quoting for us.
    
       - Add missing (unevaluated|additional)Properties constraints on child
         node schemas
    
       - Clean-up schema comments formatting
    
       - Fix I2C and SPI node bus names in schema examples
    
       - Clean-up some display compatibles schema syntax
    
       - Fix incorrect references to lvds.yaml
    
       - Gather all cache controller bindings in a common directory
    
      DT core:
    
       - Convert unittest to new void .remove platform device hook
    
       - kerneldoc fixes for DT address of_pci_range_to_resource/
         of_address_to_resource functions"
    
    * tag 'devicetree-for-6.4-1' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (46 commits)
      dt-bindings: rng: Drop unneeded quotes
      dt-bindings: arm/soc: mediatek: Drop unneeded quotes
      dt-bindings: soc: qcom: Drop unneeded quotes
      dt-bindings: i2c: samsung: Fix 'deprecated' value
      dt-bindings: display: Fix lvds.yaml references
      dt-bindings: display: simplify compatibles syntax
      dt-bindings: display: mediatek: simplify compatibles syntax
      dt-bindings: drm/bridge: ti-sn65dsi86: Fix the video-interfaces.yaml references
      dt-bindings: timer: Drop unneeded quotes
      dt-bindings: interrupt-controller: qcom,pdc: document qcom,qdu1000-pdc
      dt-bindings: interrupt-controller: qcom-pdc: add compatible for sa8775p
      dt-bindings: reset: remove stih415/stih416 reset
      dt-bindings: net: dwmac: sti: remove stih415/sti416/stid127
      dt-bindings: irqchip: sti: remove stih415/stih416 and stid127
      dt-bindings: iommu: Convert QCOM IOMMU to YAML
      dt-bindings: irqchip: ti,sci-inta: Add optional power-domains property
      dt-bindings: Add missing (unevaluated|additional)Properties on child node schemas
      of: address: Reshuffle to remove forward declarations
      of: address: Fix documented return value of of_pci_range_to_resource()
      of: address: Document return value of of_address_to_resource()
      ...

commit 6df969b77ecc2ba21dcd0e57f416e58bec2a5ca1
Merge: 32f7ad0fbe75 62e37c86bf07
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 09:08:08 2023 -0700

    Merge tag 'for-linus-iommufd' of git://git.kernel.org/pub/scm/linux/kernel/git/jgg/iommufd
    
    Pull iommufd updates from Jason Gunthorpe:
     "Two series:
    
       - Reorganize how the hardware page table objects are managed,
         particularly their destruction flow. Increase the selftest test
         coverage in this area by creating a more complete mock iommu
         driver.
    
         This is preparation to add a replace operation for HWPT binding,
         which is done but waiting for the VFIO parts to complete so there
         is a user.
    
       - Split the iommufd support for "access" to make it two step -
         allocate an access then link it to an IOAS. Update VFIO and have
         VFIO always create an access even for the VFIO mdevs that never do
         DMA.
    
         This is also preperation for the replace VFIO series that will
         allow replace to work on access types as well.
    
      Three minor fixes:
    
       - Sykzaller found the selftest code didn't check for overflow when
         processing user VAs
    
       - smatch noted a .data item should have been static
    
       - Add a selftest that reproduces a syzkaller bug for batch carry
         already fixed in rc"
    
    * tag 'for-linus-iommufd' of git://git.kernel.org/pub/scm/linux/kernel/git/jgg/iommufd: (21 commits)
      iommufd/selftest: Cover domain unmap with huge pages and access
      iommufd/selftest: Set varaiable mock_iommu_device storage-class-specifier to static
      vfio: Check the presence for iommufd callbacks in __vfio_register_dev()
      vfio/mdev: Uses the vfio emulated iommufd ops set in the mdev sample drivers
      vfio-iommufd: Make vfio_iommufd_emulated_bind() return iommufd_access ID
      vfio-iommufd: No need to record iommufd_ctx in vfio_device
      iommufd: Create access in vfio_iommufd_emulated_bind()
      iommu/iommufd: Pass iommufd_ctx pointer in iommufd_get_ioas()
      iommufd/selftest: Catch overflow of uptr and length
      iommufd/selftest: Add a selftest for iommufd_device_attach() with a hwpt argument
      iommufd/selftest: Make selftest create a more complete mock device
      iommufd/selftest: Rename the remaining mock device_id's to stdev_id
      iommufd/selftest: Rename domain_id to hwpt_id for FIXTURE iommufd_mock_domain
      iommufd/selftest: Rename domain_id to stdev_id for FIXTURE iommufd_ioas
      iommufd/selftest: Rename the sefltest 'device_id' to 'stdev_id'
      iommufd: Make iommufd_hw_pagetable_alloc() do iopt_table_add_domain()
      iommufd: Move iommufd_device to iommufd_private.h
      iommufd: Move ioas related HWPT destruction into iommufd_hw_pagetable_destroy()
      iommufd: Consistently manage hwpt_item
      iommufd: Add iommufd_lock_obj() around the auto-domains hwpts
      ...

commit 32f7ad0fbe7521de2a5e8f79c33d46110247fd7c
Merge: 7e7757876f25 cf03e2956af3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 27 08:28:08 2023 -0700

    Merge tag 'drm-next-2023-04-27' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "A bit out of routine fixes pull for rc1.
    
      There's a build breakage on some platforms due to ttm, this has that
      fix + qaic uapi removal + minor panel fixes.
    
      ttm:
       - Fix TTM build on archs where PMD_SHIFT is not constant
    
      qaic:
       - Revert uAPI from accel/qaic
    
      panel:
       - Improve error handling in nt35950
       - Fix double unregister in otm8009a when removing the driver"
    
    * tag 'drm-next-2023-04-27' of git://anongit.freedesktop.org/drm/drm:
      drm/panel: novatek-nt35950: Only unregister DSI1 if it exists
      drm/panel: otm8009a: Set backlight parent to panel device
      drm/panel: novatek-nt35950: Improve error handling
      drm/ttm: revert "Reduce the number of used allocation orders for TTM pages"
      Revert "accel/qaic: Add mhi_qaic_cntl"

commit 7e7757876f258d99266e7b3c559639289a2a45fe
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Thu Apr 27 16:09:59 2023 +0200

    mm/mremap: fix vm_pgoff in vma_merge() case 3
    
    After upgrading build guests to v6.3, rpm started segfaulting for
    specific packages, which was bisected to commit 0503ea8f5ba7 ("mm/mmap:
    remove __vma_adjust()"). rpm is doing many mremap() operations with file
    mappings of its db. The problem is that in vma_merge() case 3 (we merge
    with the next vma, expanding it downwards) vm_pgoff is not adjusted as
    it should when vm_start changes. As a result the rpm process most likely
    sees data from the wrong offset of the file. Fix the vm_pgoff
    calculation.
    
    For case 8 this is a non-functional change as the resulting vm_pgoff is
    the same.
    
    Reported-and-bisected-by: Jiri Slaby <jirislaby@kernel.org>
    Reported-and-tested-by: Fabian Vogt <fvogt@suse.com>
    Link: https://bugzilla.suse.com/show_bug.cgi?id=1210903
    Fixes: 0503ea8f5ba7 ("mm/mmap: remove __vma_adjust()")
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

M	mm/mmap.c

commit cf03e2956af307dc25e8c41fd4cffe44482a6ec1
Merge: 289af45508ca a50be876f4fe
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Apr 27 11:29:33 2023 +1000

    Merge tag 'drm-misc-next-fixes-2023-04-26' of git://anongit.freedesktop.org/drm/drm-misc into drm-next
    
    drm-misc-next-fixes for v6.4-rc1:
    - Revert uAPI from accel/qaic.
    - Fix TTM build on archs where PMD_SHIFT is not constant.
    - Improve error handling in nt35950.
    - Fix double unregister in otm8009a when removing the driver.
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    From: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/45757de9-75d8-5b41-f1f9-562a7c4675b9@linux.intel.com

commit 6e98b09da931a00bf4e0477d0fa52748bf28fcce
Merge: b68ee1c6131c 9b78d919632b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 16:07:23 2023 -0700

    Merge tag 'net-next-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next
    
    Pull networking updates from Paolo Abeni:
     "Core:
    
       - Introduce a config option to tweak MAX_SKB_FRAGS. Increasing the
         default value allows for better BIG TCP performances
    
       - Reduce compound page head access for zero-copy data transfers
    
       - RPS/RFS improvements, avoiding unneeded NET_RX_SOFTIRQ when
         possible
    
       - Threaded NAPI improvements, adding defer skb free support and
         unneeded softirq avoidance
    
       - Address dst_entry reference count scalability issues, via false
         sharing avoidance and optimize refcount tracking
    
       - Add lockless accesses annotation to sk_err[_soft]
    
       - Optimize again the skb struct layout
    
       - Extends the skb drop reasons to make it usable by multiple
         subsystems
    
       - Better const qualifier awareness for socket casts
    
      BPF:
    
       - Add skb and XDP typed dynptrs which allow BPF programs for more
         ergonomic and less brittle iteration through data and
         variable-sized accesses
    
       - Add a new BPF netfilter program type and minimal support to hook
         BPF programs to netfilter hooks such as prerouting or forward
    
       - Add more precise memory usage reporting for all BPF map types
    
       - Adds support for using {FOU,GUE} encap with an ipip device
         operating in collect_md mode and add a set of BPF kfuncs for
         controlling encap params
    
       - Allow BPF programs to detect at load time whether a particular
         kfunc exists or not, and also add support for this in light
         skeleton
    
       - Bigger batch of BPF verifier improvements to prepare for upcoming
         BPF open-coded iterators allowing for less restrictive looping
         capabilities
    
       - Rework RCU enforcement in the verifier, add kptr_rcu and enforce
         BPF programs to NULL-check before passing such pointers into kfunc
    
       - Add support for kptrs in percpu hashmaps, percpu LRU hashmaps and
         in local storage maps
    
       - Enable RCU semantics for task BPF kptrs and allow referenced kptr
         tasks to be stored in BPF maps
    
       - Add support for refcounted local kptrs to the verifier for allowing
         shared ownership, useful for adding a node to both the BPF list and
         rbtree
    
       - Add BPF verifier support for ST instructions in
         convert_ctx_access() which will help new -mcpu=v4 clang flag to
         start emitting them
    
       - Add ARM32 USDT support to libbpf
    
       - Improve bpftool's visual program dump which produces the control
         flow graph in a DOT format by adding C source inline annotations
    
      Protocols:
    
       - IPv4: Allow adding to IPv4 address a 'protocol' tag. Such value
         indicates the provenance of the IP address
    
       - IPv6: optimize route lookup, dropping unneeded R/W lock acquisition
    
       - Add the handshake upcall mechanism, allowing the user-space to
         implement generic TLS handshake on kernel's behalf
    
       - Bridge: support per-{Port, VLAN} neighbor suppression, increasing
         resilience to nodes failures
    
       - SCTP: add support for Fair Capacity and Weighted Fair Queueing
         schedulers
    
       - MPTCP: delay first subflow allocation up to its first usage. This
         will allow for later better LSM interaction
    
       - xfrm: Remove inner/outer modes from input/output path. These are
         not needed anymore
    
       - WiFi:
          - reduced neighbor report (RNR) handling for AP mode
          - HW timestamping support
          - support for randomized auth/deauth TA for PASN privacy
          - per-link debugfs for multi-link
          - TC offload support for mac80211 drivers
          - mac80211 mesh fast-xmit and fast-rx support
          - enable Wi-Fi 7 (EHT) mesh support
    
      Netfilter:
    
       - Add nf_tables 'brouting' support, to force a packet to be routed
         instead of being bridged
    
       - Update bridge netfilter and ovs conntrack helpers to handle IPv6
         Jumbo packets properly, i.e. fetch the packet length from
         hop-by-hop extension header. This is needed for BIT TCP support
    
       - The iptables 32bit compat interface isn't compiled in by default
         anymore
    
       - Move ip(6)tables builtin icmp matches to the udptcp one. This has
         the advantage that icmp/icmpv6 match doesn't load the
         iptables/ip6tables modules anymore when iptables-nft is used
    
       - Extended netlink error report for netdevice in flowtables and
         netdev/chains. Allow for incrementally add/delete devices to netdev
         basechain. Allow to create netdev chain without device
    
      Driver API:
    
       - Remove redundant Device Control Error Reporting Enable, as PCI core
         has already error reporting enabled at enumeration time
    
       - Move Multicast DB netlink handlers to core, allowing devices other
         then bridge to use them
    
       - Allow the page_pool to directly recycle the pages from safely
         localized NAPI
    
       - Implement lockless TX queue stop/wake combo macros, allowing for
         further code de-duplication and sanitization
    
       - Add YNL support for user headers and struct attrs
    
       - Add partial YNL specification for devlink
    
       - Add partial YNL specification for ethtool
    
       - Add tc-mqprio and tc-taprio support for preemptible traffic classes
    
       - Add tx push buf len param to ethtool, specifies the maximum number
         of bytes of a transmitted packet a driver can push directly to the
         underlying device
    
       - Add basic LED support for switch/phy
    
       - Add NAPI documentation, stop relaying on external links
    
       - Convert dsa_master_ioctl() to netdev notifier. This is a
         preparatory work to make the hardware timestamping layer selectable
         by user space
    
       - Add transceiver support and improve the error messages for CAN-FD
         controllers
    
      New hardware / drivers:
    
       - Ethernet:
          - AMD/Pensando core device support
          - MediaTek MT7981 SoC
          - MediaTek MT7988 SoC
          - Broadcom BCM53134 embedded switch
          - Texas Instruments CPSW9G ethernet switch
          - Qualcomm EMAC3 DWMAC ethernet
          - StarFive JH7110 SoC
          - NXP CBTX ethernet PHY
    
       - WiFi:
          - Apple M1 Pro/Max devices
          - RealTek rtl8710bu/rtl8188gu
          - RealTek rtl8822bs, rtl8822cs and rtl8821cs SDIO chipset
    
       - Bluetooth:
          - Realtek RTL8821CS, RTL8851B, RTL8852BS
          - Mediatek MT7663, MT7922
          - NXP w8997
          - Actions Semi ATS2851
          - QTI WCN6855
          - Marvell 88W8997
    
       - Can:
          - STMicroelectronics bxcan stm32f429
    
      Drivers:
    
       - Ethernet NICs:
          - Intel (1G, icg):
             - add tracking and reporting of QBV config errors
             - add support for configuring max SDU for each Tx queue
          - Intel (100G, ice):
             - refactor mailbox overflow detection to support Scalable IOV
             - GNSS interface optimization
          - Intel (i40e):
             - support XDP multi-buffer
          - nVidia/Mellanox:
             - add the support for linux bridge multicast offload
             - enable TC offload for egress and engress MACVLAN over bond
             - add support for VxLAN GBP encap/decap flows offload
             - extend packet offload to fully support libreswan
             - support tunnel mode in mlx5 IPsec packet offload
             - extend XDP multi-buffer support
             - support MACsec VLAN offload
             - add support for dynamic msix vectors allocation
             - drop RX page_cache and fully use page_pool
             - implement thermal zone to report NIC temperature
          - Netronome/Corigine:
             - add support for multi-zone conntrack offload
          - Solarflare/Xilinx:
             - support offloading TC VLAN push/pop actions to the MAE
             - support TC decap rules
             - support unicast PTP
    
       - Other NICs:
          - Broadcom (bnxt): enforce software based freq adjustments only on
            shared PHC NIC
          - RealTek (r8169): refactor to addess ASPM issues during NAPI poll
          - Micrel (lan8841): add support for PTP_PF_PEROUT
          - Cadence (macb): enable PTP unicast
          - Engleder (tsnep): add XDP socket zero-copy support
          - virtio-net: implement exact header length guest feature
          - veth: add page_pool support for page recycling
          - vxlan: add MDB data path support
          - gve: add XDP support for GQI-QPL format
          - geneve: accept every ethertype
          - macvlan: allow some packets to bypass broadcast queue
          - mana: add support for jumbo frame
    
       - Ethernet high-speed switches:
          - Microchip (sparx5): Add support for TC flower templates
    
       - Ethernet embedded switches:
          - Broadcom (b54):
             - configure 6318 and 63268 RGMII ports
          - Marvell (mv88e6xxx):
             - faster C45 bus scan
          - Microchip:
             - lan966x:
                - add support for IS1 VCAP
                - better TX/RX from/to CPU performances
             - ksz9477: add ETS Qdisc support
             - ksz8: enhance static MAC table operations and error handling
             - sama7g5: add PTP capability
          - NXP (ocelot):
             - add support for external ports
             - add support for preemptible traffic classes
          - Texas Instruments:
             - add CPSWxG SGMII support for J7200 and J721E
    
       - Intel WiFi (iwlwifi):
          - preparation for Wi-Fi 7 EHT and multi-link support
          - EHT (Wi-Fi 7) sniffer support
          - hardware timestamping support for some devices/firwmares
          - TX beacon protection on newer hardware
    
       - Qualcomm 802.11ax WiFi (ath11k):
          - MU-MIMO parameters support
          - ack signal support for management packets
    
       - RealTek WiFi (rtw88):
          - SDIO bus support
          - better support for some SDIO devices (e.g. MAC address from
            efuse)
    
       - RealTek WiFi (rtw89):
          - HW scan support for 8852b
          - better support for 6 GHz scanning
          - support for various newer firmware APIs
          - framework firmware backwards compatibility
    
       - MediaTek WiFi (mt76):
          - P2P support
          - mesh A-MSDU support
          - EHT (Wi-Fi 7) support
          - coredump support"
    
    * tag 'net-next-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next: (2078 commits)
      net: phy: hide the PHYLIB_LEDS knob
      net: phy: marvell-88x2222: remove unnecessary (void*) conversions
      tcp/udp: Fix memleaks of sk and zerocopy skbs with TX timestamp.
      net: amd: Fix link leak when verifying config failed
      net: phy: marvell: Fix inconsistent indenting in led_blink_set
      lan966x: Don't use xdp_frame when action is XDP_TX
      tsnep: Add XDP socket zero-copy TX support
      tsnep: Add XDP socket zero-copy RX support
      tsnep: Move skb receive action to separate function
      tsnep: Add functions for queue enable/disable
      tsnep: Rework TX/RX queue initialization
      tsnep: Replace modulo operation with mask
      net: phy: dp83867: Add led_brightness_set support
      net: phy: Fix reading LED reg property
      drivers: nfc: nfcsim: remove return value check of `dev_dir`
      net: phy: dp83867: Remove unnecessary (void*) conversions
      net: ethtool: coalesce: try to make user settings stick twice
      net: mana: Check if netdev/napi_alloc_frag returns single page
      net: mana: Rename mana_refill_rxoob and remove some empty lines
      net: veth: add page_pool stats
      ...

commit b68ee1c6131c540a62ecd443be89c406401df091
Merge: 36006b1d5c04 3c85f087faec
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 15:39:25 2023 -0700

    Merge tag 'scsi-misc' of git://git.kernel.org/pub/scm/linux/kernel/git/jejb/scsi
    
    Pull SCSI updates from James Bottomley:
     "Updates to the usual drivers (megaraid_sas, scsi_debug, lpfc, target,
      mpi3mr, hisi_sas, arcmsr).
    
      The major core change is the constification of the host templates
      (which touches everything) along with other minor fixups and clean
      ups"
    
    * tag 'scsi-misc' of git://git.kernel.org/pub/scm/linux/kernel/git/jejb/scsi: (207 commits)
      scsi: ufs: mcq: Use pointer arithmetic in ufshcd_send_command()
      scsi: ufs: mcq: Annotate ufshcd_inc_sq_tail() appropriately
      scsi: cxlflash: s/semahpore/semaphore/
      scsi: lpfc: Silence an incorrect device output
      scsi: mpi3mr: Use IRQ save variants of spinlock to protect chain frame allocation
      scsi: scsi_debug: Fix missing error code in scsi_debug_init()
      scsi: hisi_sas: Work around build failure in suspend function
      scsi: lpfc: Fix ioremap issues in lpfc_sli4_pci_mem_setup()
      scsi: mpt3sas: Fix an issue when driver is being removed
      scsi: mpt3sas: Remove HBA BIOS version in the kernel log
      scsi: target: core: Fix invalid memory access
      scsi: scsi_debug: Drop sdebug_queue
      scsi: scsi_debug: Only allow sdebug_max_queue be modified when no shosts
      scsi: scsi_debug: Use scsi_host_busy() in delay_store() and ndelay_store()
      scsi: scsi_debug: Use blk_mq_tagset_busy_iter() in stop_all_queued()
      scsi: scsi_debug: Use blk_mq_tagset_busy_iter() in sdebug_blk_mq_poll()
      scsi: scsi_debug: Dynamically allocate sdebug_queued_cmd
      scsi: scsi_debug: Use scsi_block_requests() to block queues
      scsi: scsi_debug: Protect block_unblock_all_queues() with mutex
      scsi: scsi_debug: Change shost list lock to a mutex
      ...

commit c3a6ef330a08eba406f82b0b8cbca4e4d9b7c4ba
Merge: ab396fb2f37d bea407a427ba
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Apr 26 23:09:07 2023 +0200

    Merge branch 'for-6.4/wacom' into for-linus
    
    - improved handling of battery quirk (Jason Gerecke)
    - lazy initialization of battery interfaces (Jason Gerecke)

commit ab396fb2f37dabc436bbe52ac0d287f95080ee65
Merge: 67471b89989d bf81de760a83
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Apr 26 23:08:04 2023 +0200

    Merge branch 'for-6.4/tests' into for-linus
    
    - import of bunch of HID selftests from out-of-tree hid-tools project
      (Benjamin Tissoires)

commit 67471b89989d960a2f2283e281287481e791fb6d
Merge: 5fce154a4d9f d750d1480362
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Apr 26 23:05:55 2023 +0200

    Merge branch 'for-6.4/nintendo' into for-linus
    
    - drastically reducing Bluetooth disconnects on hid-nintendo
      driven devices (Daniel J. Ogorchock)
    - proper rumble queue overrun handling (Daniel J. Ogorchock)

commit 5fce154a4d9fcbf897fcaa0ebf084618dd6d751f
Merge: 0549fbac401c ca6961d8a851
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Apr 26 23:03:00 2023 +0200

    Merge branch 'for-6.4/mcp2221' into for-linus
    
    - generic code improvements for mcp2221 driver (Louis Morhet)

commit 0549fbac401ced4adea4fca44baf8bab7ebcfc74
Merge: d411b5aa1f49 539adfedbd2d
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Apr 26 22:57:40 2023 +0200

    Merge branch 'for-6.4/logitech-hidpp' into for-linus
    
    - support for ADC measurement (Bastien Nocera)
    - support for Logitech G935 (Bastien Nocera)

commit d411b5aa1f49c065dfe23b7a7e72ee56f2677331
Merge: b680751bd9c5 a2654c1f640c
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Apr 26 22:57:15 2023 +0200

    Merge branch 'for-6.4/led-includes' into for-linus
    
    - explicit include fixes (Thomas Weißschuh)

commit b680751bd9c55b8dd85d1f1067f4a0474449c819
Merge: ba984d2798fe 0f6fac2cfbef
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Apr 26 22:56:33 2023 +0200

    Merge branch 'for-6.4/kye' into for-linus
    
    - generic support for all Kye tablets (David Yang)

commit ba984d2798fedd73ec85b7ef44ff75b7216903fb
Merge: 63f7cf665929 2be404486c05
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Apr 26 22:55:51 2023 +0200

    Merge branch 'for-6.4/i2c-hid' into for-linus
    
    - reset GPIO support (Hans de Goede)

commit 63f7cf66592907e17073c14f6a24c366b1f68db5
Merge: 5f86a084a412 35903009dbde
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Apr 26 22:54:24 2023 +0200

    Merge branch 'for-6.4/core' into for-linus
    
    - improve handling of generic "Digitizer" usage (Jason Gerecke)
    - support for KEY_CAMERA_FOCUS (Feng Qi)

commit 5f86a084a4127458563a845459d08770f3a59465
Merge: cdc780f044a8 29e1ecc197d4
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Apr 26 22:53:41 2023 +0200

    Merge branch 'for-6.4/apple' into for-linus
    
    - quirks for Apple Geyser 3 and Apple Geyser 4 (Alex Henrie)

commit cdc780f044a803aff8845b949f800f0f3d095d5f
Merge: 38518593ec55 37386669887d
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Wed Apr 26 22:52:34 2023 +0200

    Merge branch 'for-6.4/amd-sfh' into for-linus
    
    - assorted functional fixes for amd-sfh driver (Basavaraj Natikar)

commit 36006b1d5c04692924f011aa949e8788f1c604de
Merge: 48dc810012a6 140b26035b2d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 13:09:45 2023 -0700

    Merge tag 'ata-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/dlemoal/libata
    
    Pull ata updates from Damien Le Moal:
    
     - Many cleanups of the pata_parport driver and of its protocol modules
       (Ondrej)
    
     - Remove unused code (ata_id_xxx() functions) (Sergey)
    
     - Add Add UniPhier SATA controller DT bindings (Kunihiko)
    
     - Fix dependencies for the Freescale QorIQ AHCI SATA controller driver
       (Geert)
    
     - DT property handling improvements (Rob)
    
    * tag 'ata-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/dlemoal/libata: (57 commits)
      ata: pata_parport-bpck6: Declare mode_map as static
      ata: pata_parport-bpck6: Remove dependency on 64BIT
      ata: pata_parport-bpck6: reduce indents in bpck6_open
      ata: pata_parport-bpck6: delete ppc6lnx.c
      ata: pata_parport-bpck6: move defines and mode_map to bpck6.c
      ata: pata_parport-bpck6: move ppc6_wr_data_byte to bpck6.c and rename
      ata: pata_parport-bpck6: move ppc6_rd_data_byte to bpck6.c and rename
      ata: pata_parport-bpck6: move ppc6_send_cmd to bpck6.c and rename
      ata: pata_parport-bpck6: move ppc6_deselect to bpck6.c and rename
      ata: pata_parport-bpck6: merge ppc6_select into bpck6_open
      ata: pata_parport-bpck6: move ppc6_open to bpck6.c and rename
      ata: pata_parport-bpck6: move ppc6_wr_extout to bpck6.c and rename
      ata: pata_parport-bpck6: move ppc6_wait_for_fifo to bpck6.c and rename
      ata: pata_parport-bpck6: merge ppc6_wr_data_blk into bpck6_write_block
      ata: pata_parport-bpck6: merge ppc6_rd_data_blk into bpck6_read_block
      ata: pata_parport-bpck6: merge ppc6_wr_port16_blk into bpck6_write_block
      ata: pata_parport-bpck6: merge ppc6_rd_port16_blk into bpck6_read_block
      ata: pata_parport-bpck6: merge ppc6_wr_port into bpck6_write_regr
      ata: pata_parport-bpck6: merge ppc6_rd_port into bpck6_read_regr
      ata: pata_parport-bpck6: remove ppc6_close
      ...

commit 48dc810012a6b4f4ba94073d6b7edb4f76edeb72
Merge: 9dd6956b3892 38d11da522aa
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 13:05:21 2023 -0700

    Merge tag 'for-6.4/dm-changes' of git://git.kernel.org/pub/scm/linux/kernel/git/device-mapper/linux-dm
    
    Pull device mapper updates from Mike Snitzer:
    
     - Split dm-bufio's rw_semaphore and rbtree. Offers improvements to
       dm-bufio's locking to allow increased concurrent IO -- particularly
       for read access for buffers already in dm-bufio's cache.
    
     - Also split dm-bio-prison-v1's spinlock and rbtree with comparable aim
       at improving concurrent IO (for the DM thinp target).
    
     - Both the dm-bufio and dm-bio-prison-v1 scaling of the number of locks
       and rbtrees used are managed by dm_num_hash_locks(). And the hash
       function used by both is dm_hash_locks_index().
    
     - Allow DM targets to require DISCARD, WRITE_ZEROES and SECURE_ERASE to
       be split at the target specified boundary (in terms of
       max_discard_sectors, max_write_zeroes_sectors and
       max_secure_erase_sectors respectively).
    
     - DM verity error handling fix for check_at_most_once on FEC.
    
     - Update DM verity target to emit audit events on verification failure
       and more.
    
     - DM core ->io_hints improvements needed in support of new discard
       support that is added to the DM "zero" and "error" targets.
    
     - Fix missing kmem_cache_destroy() call in initialization error path of
       both the DM integrity and DM clone targets.
    
     - A couple fixes for DM flakey, also add "error_reads" feature.
    
     - Fix DM core's resume to not lock FS when the DM map is NULL;
       otherwise initial table load can race with FS mount that takes
       superblock's ->s_umount rw_semaphore.
    
     - Various small improvements to both DM core and DM targets.
    
    * tag 'for-6.4/dm-changes' of git://git.kernel.org/pub/scm/linux/kernel/git/device-mapper/linux-dm: (40 commits)
      dm: don't lock fs when the map is NULL in process of resume
      dm flakey: add an "error_reads" option
      dm flakey: remove trailing space in the table line
      dm flakey: fix a crash with invalid table line
      dm ioctl: fix nested locking in table_clear() to remove deadlock concern
      dm: unexport dm_get_queue_limits()
      dm: allow targets to require splitting WRITE_ZEROES and SECURE_ERASE
      dm: add helper macro for simple DM target module init and exit
      dm raid: remove unused d variable
      dm: remove unnecessary (void*) conversions
      dm mirror: add DMERR message if alloc_workqueue fails
      dm: push error reporting down to dm_register_target()
      dm integrity: call kmem_cache_destroy() in dm_integrity_init() error path
      dm clone: call kmem_cache_destroy() in dm_clone_init() error path
      dm error: add discard support
      dm zero: add discard support
      dm table: allow targets without devices to set ->io_hints
      dm verity: emit audit events on verification failure and more
      dm verity: fix error handling for check_at_most_once on FEC
      dm: improve hash_locks sizing and hash function
      ...

commit 9dd6956b38923dc1b7b349ca1eee3c0bb1f0163a
Merge: 5b9a7bb72fdd 55793ea54d77
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 12:52:58 2023 -0700

    Merge tag 'for-6.4/block-2023-04-21' of git://git.kernel.dk/linux
    
    Pull block updates from Jens Axboe:
    
     - drbd patches, bringing us closer to unifying the out-of-tree version
       and the in tree one (Andreas, Christoph)
    
     - support for auto-quiesce for the s390 dasd driver (Stefan)
    
     - MD pull request via Song:
          - md/bitmap: Optimal last page size (Jon Derrick)
          - Various raid10 fixes (Yu Kuai, Li Nan)
          - md: add error_handlers for raid0 and linear (Mariusz Tkaczyk)
    
     - NVMe pull request via Christoph:
          - Drop redundant pci_enable_pcie_error_reporting (Bjorn Helgaas)
          - Validate nvmet module parameters (Chaitanya Kulkarni)
          - Fence TCP socket on receive error (Chris Leech)
          - Fix async event trace event (Keith Busch)
          - Minor cleanups (Chaitanya Kulkarni, zhenwei pi)
          - Fix and cleanup nvmet Identify handling (Damien Le Moal,
            Christoph Hellwig)
          - Fix double blk_mq_complete_request race in the timeout handler
            (Lei Yin)
          - Fix irq locking in nvme-fcloop (Ming Lei)
          - Remove queue mapping helper for rdma devices (Sagi Grimberg)
    
     - use structured request attribute checks for nbd (Jakub)
    
     - fix blk-crypto race conditions between keyslot management (Eric)
    
     - add sed-opal support for reading read locking range attributes
       (Ondrej)
    
     - make fault injection configurable for null_blk (Akinobu)
    
     - clean up the request insertion API (Christoph)
    
     - clean up the queue running API (Christoph)
    
     - blkg config helper cleanups (Tejun)
    
     - lazy init support for blk-iolatency (Tejun)
    
     - various fixes and tweaks to ublk (Ming)
    
     - remove hybrid polling. It hasn't really been useful since we got
       async polled IO support, and these days we don't support sync polled
       IO at all (Keith)
    
     - misc fixes, cleanups, improvements (Zhong, Ondrej, Colin, Chengming,
       Chaitanya, me)
    
    * tag 'for-6.4/block-2023-04-21' of git://git.kernel.dk/linux: (118 commits)
      nbd: fix incomplete validation of ioctl arg
      ublk: don't return 0 in case of any failure
      sed-opal: geometry feature reporting command
      null_blk: Always check queue mode setting from configfs
      block: ublk: switch to ioctl command encoding
      blk-mq: fix the blk_mq_add_to_requeue_list call in blk_kick_flush
      block, bfq: Fix division by zero error on zero wsum
      fault-inject: fix build error when FAULT_INJECTION_CONFIGFS=y and CONFIGFS_FS=m
      block: store bdev->bd_disk->fops->submit_bio state in bdev
      block: re-arrange the struct block_device fields for better layout
      md/raid5: remove unused working_disks variable
      md/raid10: don't call bio_start_io_acct twice for bio which experienced read error
      md/raid10: fix memleak of md thread
      md/raid10: fix memleak for 'conf->bio_split'
      md/raid10: fix leak of 'r10bio->remaining' for recovery
      md/raid10: don't BUG_ON() in raise_barrier()
      md: fix soft lockup in status_resync
      md: add error_handlers for raid0 and linear
      md: Use optimal I/O size for last bitmap page
      md: Fix types in sb writer
      ...

commit 5b9a7bb72fddbc5247f56ede55d485fab7abdf92
Merge: 5c7ecada25d2 3c85cc43c8e7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 12:40:31 2023 -0700

    Merge tag 'for-6.4/io_uring-2023-04-21' of git://git.kernel.dk/linux
    
    Pull io_uring updates from Jens Axboe:
    
     - Cleanup of the io-wq per-node mapping, notably getting rid of it so
       we just have a single io_wq entry per ring (Breno)
    
     - Followup to the above, move accounting to io_wq as well and
       completely drop struct io_wqe (Gabriel)
    
     - Enable KASAN for the internal io_uring caches (Breno)
    
     - Add support for multishot timeouts. Some applications use timeouts to
       wake someone waiting on completion entries, and this makes it a bit
       easier to just have a recurring timer rather than needing to rearm it
       every time (David)
    
     - Support archs that have shared cache coloring between userspace and
       the kernel, and hence have strict address requirements for mmap'ing
       the ring into userspace. This should only be parisc/hppa. (Helge, me)
    
     - XFS has supported O_DIRECT writes without needing to lock the inode
       exclusively for a long time, and ext4 now supports it as well. This
       is true for the common cases of not extending the file size. Flag the
       fs as having that feature, and utilize that to avoid serializing
       those writes in io_uring (me)
    
     - Enable completion batching for uring commands (me)
    
     - Revert patch adding io_uring restriction to what can be GUP mapped or
       not. This does not belong in io_uring, as io_uring isn't really
       special in this regard. Since this is also getting in the way of
       cleanups and improvements to the GUP code, get rid of if (me)
    
     - A few series greatly reducing the complexity of registered resources,
       like buffers or files. Not only does this clean up the code a lot,
       the simplified code is also a LOT more efficient (Pavel)
    
     - Series optimizing how we wait for events and run task_work related to
       it (Pavel)
    
     - Fixes for file/buffer unregistration with DEFER_TASKRUN (Pavel)
    
     - Misc cleanups and improvements (Pavel, me)
    
    * tag 'for-6.4/io_uring-2023-04-21' of git://git.kernel.dk/linux: (71 commits)
      Revert "io_uring/rsrc: disallow multi-source reg buffers"
      io_uring: add support for multishot timeouts
      io_uring/rsrc: disassociate nodes and rsrc_data
      io_uring/rsrc: devirtualise rsrc put callbacks
      io_uring/rsrc: pass node to io_rsrc_put_work()
      io_uring/rsrc: inline io_rsrc_put_work()
      io_uring/rsrc: add empty flag in rsrc_node
      io_uring/rsrc: merge nodes and io_rsrc_put
      io_uring/rsrc: infer node from ctx on io_queue_rsrc_removal
      io_uring/rsrc: remove unused io_rsrc_node::llist
      io_uring/rsrc: refactor io_queue_rsrc_removal
      io_uring/rsrc: simplify single file node switching
      io_uring/rsrc: clean up __io_sqe_buffers_update()
      io_uring/rsrc: inline switch_start fast path
      io_uring/rsrc: remove rsrc_data refs
      io_uring/rsrc: fix DEFER_TASKRUN rsrc quiesce
      io_uring/rsrc: use wq for quiescing
      io_uring/rsrc: refactor io_rsrc_ref_quiesce
      io_uring/rsrc: remove io_rsrc_node::done
      io_uring/rsrc: use nospec'ed indexes
      ...

commit 5c7ecada25d2086aee607ff7deb69e77faa4aa92
Merge: fbfaf03ebac9 8375be2b6414
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 09:42:10 2023 -0700

    Merge tag 'f2fs-for-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/jaegeuk/f2fs
    
    Pull f2fs update from Jaegeuk Kim:
     "In this round, we've mainly modified to support non-power-of-two zone
      size, which is not required for f2fs by design. In order to avoid arch
      dependency, we refactored the messy rb_entry structure shared across
      different extent_cache. In addition to the improvement, we've also
      fixed several subtle bugs and error cases.
    
      Enhancements:
       - support non-power-of-two zone size for zoned device
       - remove sharing the rb_entry structure in extent cache
       - refactor f2fs_gc to call checkpoint in urgent condition
       - support iopoll
    
      Bug fixes:
       - fix potential corruption when moving a directory
       - fix to avoid use-after-free for cached IPU bio
       - fix the folio private usage
       - avoid kernel warnings or panics in the cp_error case
       - fix to recover quota data correctly
       - fix some bugs in atomic operations
       - fix system crash due to lack of free space in LFS
       - fix null pointer panic in tracepoint in __replace_atomic_write_block
       - fix iostat lock protection
       - fix scheduling while atomic in decompression path
       - preserve direct write semantics when buffering is forced
       - fix to call f2fs_wait_on_page_writeback() in f2fs_write_raw_pages()"
    
    * tag 'f2fs-for-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/jaegeuk/f2fs: (52 commits)
      f2fs: remove unnessary comment in __may_age_extent_tree
      f2fs: allocate node blocks for atomic write block replacement
      f2fs: use cow inode data when updating atomic write
      f2fs: remove power-of-two limitation of zoned device
      f2fs: allocate trace path buffer from names_cache
      f2fs: add has_enough_free_secs()
      f2fs: relax sanity check if checkpoint is corrupted
      f2fs: refactor f2fs_gc to call checkpoint in urgent condition
      f2fs: remove folio_detach_private() in .invalidate_folio and .release_folio
      f2fs: remove bulk remove_proc_entry() and unnecessary kobject_del()
      f2fs: support iopoll method
      f2fs: remove batched_trim_sections node description
      f2fs: fix to check return value of inc_valid_block_count()
      f2fs: fix to check return value of f2fs_do_truncate_blocks()
      f2fs: fix passing relative address when discard zones
      f2fs: fix potential corruption when moving a directory
      f2fs: add radix_tree_preload_end in error case
      f2fs: fix to recover quota data correctly
      f2fs: fix to check readonly condition correctly
      docs: f2fs: Correct instruction to disable checkpoint
      ...

commit fbfaf03ebac999b4f44f36d851bd729c24c5a658
Merge: e0fcc9c68d11 7a40f1f18a88
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 09:36:55 2023 -0700

    Merge tag 'dlm-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/teigland/linux-dlm
    
    Pull dlm updates from David Teigland:
    
     - Remove some unused features (related to lock timeouts) that have been
       previously scheduled for removal
    
     - Fix a bug where the pending callback flag would be incorrectly
       cleared, which could potentially result in missing a completion
       callback
    
     - Use an unbound workqueue for dlm socket handling so that socket
       operations can be processed with less delay
    
     - Fix possible lockspace join connection errors with large clusters
       (e.g. over 16 nodes) caused by a small socket backlog setting
    
     - Use atomic bit ops for internal flags to help avoid mistakes copying
       flag values from messages
    
     - Fix recently introduced bug where memory for lvb data could be
       unnecessarily allocated for a lock
    
    * tag 'dlm-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/teigland/linux-dlm:
      fs: dlm: stop unnecessarily filling zero ms_extra bytes
      fs: dlm: switch lkb_sbflags to atomic ops
      fs: dlm: rsb hash table flag value to atomic ops
      fs: dlm: move internal flags to atomic ops
      fs: dlm: change dflags to use atomic bits
      fs: dlm: store lkb distributed flags into own value
      fs: dlm: remove DLM_IFL_LOCAL_MS flag
      fs: dlm: rename stub to local message flag
      fs: dlm: remove deprecated code parts
      DLM: increase socket backlog to avoid hangs with 16 nodes
      fs: dlm: add unbound flag to dlm_io workqueue
      fs: dlm: fix DLM_IFL_CB_PENDING gets overwritten

commit e0fcc9c68d1147ca33159d57332b02ca8bac6ab9
Merge: 85d7ab246382 644f6bf762fa
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 09:28:15 2023 -0700

    Merge tag 'gfs2-v6.3-rc3-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/gfs2/linux-gfs2
    
    Pull gfs2 updates from Andreas Gruenbacher:
    
     - Fix revoke processing at unmount and on read-only remount
    
     - Refuse reading in inodes with an impossible indirect block height
    
     - Various minor cleanups
    
    * tag 'gfs2-v6.3-rc3-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/gfs2/linux-gfs2:
      gfs2: gfs2_ail_empty_gl no log flush on error
      gfs2: Issue message when revokes cannot be written
      gfs2: Perform second log flush in gfs2_make_fs_ro
      gfs2: return errors from gfs2_ail_empty_gl
      gfs2: Move variable assignment behind a null pointer check in inode_go_dump
      gfs2: Use gfs2_holder_initialized for jindex
      gfs2: Eliminate gfs2_trim_blocks
      gfs2: Fix inode height consistency check
      gfs2: Remove ghs[] from gfs2_unlink
      gfs2: Remove ghs[] from gfs2_link
      gfs2: Remove duplicate i_nlink check from gfs2_link()

commit 85d7ab2463822a4ab096c0b7b59feec962552572
Merge: 94fc0792661a f372463124df
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 09:13:44 2023 -0700

    Merge tag 'for-6.4-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux
    
    Pull btrfs updates from David Sterba:
     "Mostly core changes and cleanups, some notable fixes and two
      performance improvements in directory logging.
    
      The IO path cleanups are removing or refactoring old code, scrub main
      loop has been completely rewritten also refactoring old code.
    
      There are some changes to non-btrfs code, mostly trivial, the cgroup
      punt bio logic is only moved from generic code.
    
      Performance improvements:
    
       - improve logging changes in a directory during one transaction,
         avoid iterating over items and reduce lock contention (fsync time
         4x lower)
    
       - when logging directory entries during one transaction, reduce
         locking of subvolume trees by checking tree-log instead
         (improvement in throughput and latency for concurrent access to a
         subvolume)
    
      Notable fixes:
    
       - dev-replace:
          - properly honor read mode when requested to avoid reading from
            source device
          - target device won't be used for eventual read repair, this is
            unreliable for NODATASUM files
          - when there are unpaired (and unrepairable) metadata during
            replace, exit early with error and don't try to finish whole
            operation
    
       - scrub ioctl properly rejects unknown flags
    
       - fix global block reserve calculations
    
       - fix partial direct io write when there's a page fault in the
         middle, iomap will try to continue with partial request but the
         btrfs part did not match that, this can lead to zeros written
         instead of data
    
      Core changes:
    
       - io path:
          - continued cleanups and refactoring around bio handling
          - extent io submit path simplifications and cleanups
          - flush write path simplifications and cleanups
          - rework logic of passing sync mode of bio, with further cleanups
    
       - rewrite scrub code flow, restructure how the stripes are enumerated
         and verified in a more unified way
    
       - allow to set lower threshold for block group reclaim in debug mode
         to aid zoned mode testing
    
       - remove obsolete time-based delayed ref throttling logic when
         truncating items
    
       - DREW locks are not using percpu variables anymore
    
       - more warning fixes (-Wmaybe-uninitialized)
    
       - u64 division simplifications
    
       - error handling improvements
    
      Non-btrfs code changes:
    
       - push cgroup punt bio logic to btrfs code (there was no other user
         of that), the functionality can be now selected separately by
         BLK_CGROUP_PUNT_BIO
    
       - crc32c_impl removed after removing last uses in btrfs code
    
       - add btrfs_assertfail() to objtool table"
    
    * tag 'for-6.4-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux: (147 commits)
      btrfs: mark btrfs_assertfail() __noreturn
      btrfs: fix uninitialized variable warnings
      btrfs: use log root when iterating over index keys when logging directory
      btrfs: avoid iterating over all indexes when logging directory
      btrfs: dev-replace: error out if we have unrepaired metadata error during
      btrfs: remove pointless loop at btrfs_get_next_valid_item()
      btrfs: scrub: reject unsupported scrub flags
      btrfs: reinterpret async discard iops_limit=0 as no delay
      btrfs: set default discard iops_limit to 1000
      btrfs: remove unused raid56 functions which were dedicated for scrub
      btrfs: scrub: remove scrub_bio structure
      btrfs: scrub: remove scrub_block and scrub_sector structures
      btrfs: scrub: remove the old scrub recheck code
      btrfs: scrub: remove the old writeback infrastructure
      btrfs: scrub: remove scrub_parity structure
      btrfs: scrub: use scrub_stripe to implement RAID56 P/Q scrub
      btrfs: scrub: switch scrub_simple_mirror() to scrub_stripe infrastructure
      btrfs: scrub: introduce helper to queue a stripe for scrub
      btrfs: scrub: introduce error reporting functionality for scrub_stripe
      btrfs: scrub: introduce a writeback helper for scrub_stripe
      ...

commit 94fc0792661a96d64a4bb79cf10d0793ecadf76e
Merge: 0cfcde1fafc2 36d532d713db
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 09:07:46 2023 -0700

    Merge tag 'fs_for_v6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/jack/linux-fs
    
    Pull ext2, reiserfs, udf, and quota updates from Jan Kara:
     "A couple of small fixes and cleanups for ext2, udf, reiserfs, and
      quota.
    
      The biggest change is making CONFIG_PRINT_QUOTA_WARNING depend on
      BROKEN with an outlook for removing it completely in an year or so"
    
    * tag 'fs_for_v6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/jack/linux-fs:
      quota: mark PRINT_QUOTA_WARNING as BROKEN
      quota: update Kconfig comment
      reiserfs: remove unused iter variable
      quota: Use register_sysctl_init() for registering fs_dqstats_table
      reiserfs: remove unused sched_count variable
      ext2: remove redundant assignment to pointer end
      quota: make dquot_set_dqinfo return errors from ->write_info
      quota: fixup *_write_file_info() to return proper error code
      quota: simplify two-level sysctl registration for fs_dqstats_table
      udf: use wrapper i_blocksize() in udf_discard_prealloc()
      udf: Use folios in udf_adinicb_writepage()
      ext2: Check block size validity during mount
      ext2: Correct maximum ext2 filesystem block size

commit 0cfcde1fafc23068f57afa50faa3e69487b7cd30
Merge: c3558a6b2a75 519fe1bae7e2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 08:57:41 2023 -0700

    Merge tag 'ext4_for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tytso/ext4
    
    Pull ext4 updates from Ted Ts'o:
     "There are a number of major cleanups in ext4 this cycle:
    
       - The data=journal writepath has been significantly cleaned up and
         simplified, and reduces a large number of data=journal special
         cases by Jan Kara.
    
       - Ojaswin Muhoo has replaced linked list used to track extents that
         have been used for inode preallocation with a red-black tree in the
         multi-block allocator. This improves performance for workloads
         which do a large number of random allocating writes.
    
       - Thanks to Kemeng Shi for a lot of cleanup and bug fixes in the
         multi-block allocator.
    
       - Matthew wilcox has converted the code paths for reading and writing
         ext4 pages to use folios.
    
       - Jason Yan has continued to factor out ext4_fill_super() into
         smaller functions for improve ease of maintenance and
         comprehension.
    
       - Josh Triplett has created an uapi header for ext4 userspace API's"
    
    * tag 'ext4_for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tytso/ext4: (105 commits)
      ext4: Add a uapi header for ext4 userspace APIs
      ext4: remove useless conditional branch code
      ext4: remove unneeded check of nr_to_submit
      ext4: move dax and encrypt checking into ext4_check_feature_compatibility()
      ext4: factor out ext4_block_group_meta_init()
      ext4: move s_reserved_gdt_blocks and addressable checking into ext4_check_geometry()
      ext4: rename two functions with 'check'
      ext4: factor out ext4_flex_groups_free()
      ext4: use ext4_group_desc_free() in ext4_put_super() to save some duplicated code
      ext4: factor out ext4_percpu_param_init() and ext4_percpu_param_destroy()
      ext4: factor out ext4_hash_info_init()
      Revert "ext4: Fix warnings when freezing filesystem with journaled data"
      ext4: Update comment in mpage_prepare_extent_to_map()
      ext4: Simplify handling of journalled data in ext4_bmap()
      ext4: Drop special handling of journalled data from ext4_quota_on()
      ext4: Drop special handling of journalled data from ext4_evict_inode()
      ext4: Fix special handling of journalled data from extent zeroing
      ext4: Drop special handling of journalled data from extent shifting operations
      ext4: Drop special handling of journalled data from ext4_sync_file()
      ext4: Commit transaction before writing back pages in data=journal mode
      ...

commit c3558a6b2a75d9adacf15dd7fae79dbfffa7ebe4
Merge: dbe0e78d0e3a 04839139213c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 08:51:51 2023 -0700

    Merge tag 'fsverity-for-linus' of git://git.kernel.org/pub/scm/fs/fsverity/linux
    
    Pull fsverity updates from Eric Biggers:
     "Several cleanups and fixes for fs/verity/, including a couple minor
      fixes to the changes in 6.3 that added support for Merkle tree block
      sizes less than the page size"
    
    * tag 'fsverity-for-linus' of git://git.kernel.org/pub/scm/fs/fsverity/linux:
      fsverity: reject FS_IOC_ENABLE_VERITY on mode 3 fds
      fsverity: explicitly check for buffer overflow in build_merkle_tree()
      fsverity: use WARN_ON_ONCE instead of WARN_ON
      fs-verity: simplify sysctls with register_sysctl()
      fs/buffer.c: use b_folio for fsverity work

commit dbe0e78d0e3a83dd924ea01bebf6c45313c81607
Merge: 733f7e9c18c5 83e57e47906c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 08:37:51 2023 -0700

    Merge tag 'fscrypt-for-linus' of git://git.kernel.org/pub/scm/fs/fscrypt/linux
    
    Pull fscrypt updates from Eric Biggers:
     "A few cleanups for fs/crypto/, and another patch to prepare for the
      upcoming CephFS encryption support"
    
    * tag 'fscrypt-for-linus' of git://git.kernel.org/pub/scm/fs/fscrypt/linux:
      fscrypt: optimize fscrypt_initialize()
      fscrypt: use WARN_ON_ONCE instead of WARN_ON
      fscrypt: new helper function - fscrypt_prepare_lookup_partial()
      fs/buffer.c: use b_folio for fscrypt work

commit 733f7e9c18c5e377025c1bfdce6bc9a7d55649be
Merge: 98f99e67a1dc 482c84e906e5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 08:32:52 2023 -0700

    Merge tag 'v6.4-p1' of git://git.kernel.org/pub/scm/linux/kernel/git/herbert/crypto-2.6
    
    Pull crypto updates from Herbert Xu:
     "API:
       - Total usage stats now include all that returned errors (instead of
         just some)
       - Remove maximum hash statesize limit
       - Add cloning support for hmac and unkeyed hashes
       - Demote BUG_ON in crypto_unregister_alg to a WARN_ON
    
      Algorithms:
       - Use RIP-relative addressing on x86 to prepare for PIE build
       - Add accelerated AES/GCM stitched implementation on powerpc P10
       - Add some test vectors for cmac(camellia)
       - Remove failure case where jent is unavailable outside of FIPS mode
         in drbg
       - Add permanent and intermittent health error checks in jitter RNG
    
      Drivers:
       - Add support for 402xx devices in qat
       - Add support for HiSTB TRNG
       - Fix hash concurrency issues in stm32
       - Add OP-TEE firmware support in caam"
    
    * tag 'v6.4-p1' of git://git.kernel.org/pub/scm/linux/kernel/git/herbert/crypto-2.6: (139 commits)
      i2c: designware: Add doorbell support for Mendocino
      i2c: designware: Use PCI PSP driver for communication
      powerpc: Move Power10 feature PPC_MODULE_FEATURE_P10
      crypto: p10-aes-gcm - Remove POWER10_CPU dependency
      crypto: testmgr - Add some test vectors for cmac(camellia)
      crypto: cryptd - Add support for cloning hashes
      crypto: cryptd - Convert hash to use modern init_tfm/exit_tfm
      crypto: hmac - Add support for cloning
      crypto: hash - Add crypto_clone_ahash/shash
      crypto: api - Add crypto_clone_tfm
      crypto: api - Add crypto_tfm_get
      crypto: x86/sha - Use local .L symbols for code
      crypto: x86/crc32 - Use local .L symbols for code
      crypto: x86/aesni - Use local .L symbols for code
      crypto: x86/sha256 - Use RIP-relative addressing
      crypto: x86/ghash - Use RIP-relative addressing
      crypto: x86/des3 - Use RIP-relative addressing
      crypto: x86/crc32c - Use RIP-relative addressing
      crypto: x86/cast6 - Use RIP-relative addressing
      crypto: x86/cast5 - Use RIP-relative addressing
      ...

commit 98f99e67a1dc456e9a542584819b2aa265ffc737
Merge: 0cfd8703e7da 00168b415a60
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 08:25:57 2023 -0700

    Merge tag 'flex-array-transformations-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gustavoars/linux
    
    Pull flexible-array updates from Gustavo Silva:
     "Transform more zero-length and one-element arrays into C99
      flexible-array members"
    
    * tag 'flex-array-transformations-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gustavoars/linux:
      uapi: net: ipv6: Replace fake flex-array with flex-array member
      drm/vmwgfx: Replace one-element array with flexible-array member
      ASoC: uapi: Replace zero-length arrays with __DECLARE_FLEX_ARRAY() helper

commit 9b78d919632b7149d311aaad5a977e4b48b10321
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Wed Apr 26 10:15:31 2023 +0200

    net: phy: hide the PHYLIB_LEDS knob
    
    commit 4bb7aac70b5d ("net: phy: fix circular LEDS_CLASS dependencies")
    solved a build failure, but introduces a new config knob with a default
    'y' value: PHYLIB_LEDS.
    
    The latter is against the current new config policy. The exception
    was raised to allow the user to catch bad configurations without led
    support.
    
    Anyway the current definition of PHYLIB_LEDS does not fit the above
    goal: if LEDS_CLASS is disabled, the new config will be available
    only with PHYLIB disabled, too.
    
    Hide the mentioned config, to preserve the randconfig testing done so
    far, while respecting the mentioned policy.
    
    Suggested-by: Andrew Lunn <andrew@lunn.ch>
    Suggested-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Link: https://lore.kernel.org/r/d82489be8ed911c383c3447e9abf469995ccf39a.1682496488.git.pabeni@redhat.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>

M	drivers/net/phy/Kconfig

commit c248b27cfc0a8a5fee93e000d47e659bca335d0f
Merge: 28b17f6270f1 50749f2dd685
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Wed Apr 26 10:17:46 2023 +0200

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    No conflicts.
    
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>

commit 0cfd8703e7da687924371e9bc77a025bdeba9637
Merge: 793582ff47f8 d3f2c402e448
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 18:44:10 2023 -0700

    Merge tag 'pm-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull power management updates from Rafael Wysocki:
     "These update several cpufreq drivers and the cpufreq core, add sysfs
      interface for exposing the time really spent in the platform low-power
      state during suspend-to-idle, update devfreq (core and drivers) and
      the pm-graph suite of tools and clean up code.
    
      Specifics:
    
       - Fix the frequency unit in cpufreq_verify_current_freq checks()
         Sanjay Chandrashekara)
    
       - Make mode_state_machine in amd-pstate static (Tom Rix)
    
       - Make the cpufreq core require drivers with target_index() to set
         freq_table (Viresh Kumar)
    
       - Fix typo in the ARM_BRCMSTB_AVS_CPUFREQ Kconfig entry (Jingyu Wang)
    
       - Use of_property_read_bool() for boolean properties in the pmac32
         cpufreq driver (Rob Herring)
    
       - Make the cpufreq sysfs interface return proper error codes on
         obviously invalid input (qinyu)
    
       - Add guided autonomous mode support to the AMD P-state driver (Wyes
         Karny)
    
       - Make the Intel P-state driver enable HWP IO boost on all server
         platforms (Srinivas Pandruvada)
    
       - Add opp and bandwidth support to tegra194 cpufreq driver (Sumit
         Gupta)
    
       - Use of_property_present() for testing DT property presence (Rob
         Herring)
    
       - Remove MODULE_LICENSE in non-modules (Nick Alcock)
    
       - Add SM7225 to cpufreq-dt-platdev blocklist (Luca Weiss)
    
       - Optimizations and fixes for qcom-cpufreq-hw driver (Krzysztof
         Kozlowski, Konrad Dybcio, and Bjorn Andersson)
    
       - DT binding updates for qcom-cpufreq-hw driver (Konrad Dybcio and
         Bartosz Golaszewski)
    
       - Updates and fixes for mediatek driver (Jia-Wei Chang and
         AngeloGioacchino Del Regno)
    
       - Use of_property_present() for testing DT property presence in the
         cpuidle code (Rob Herring)
    
       - Drop unnecessary (void *) conversions from the PM core (Li zeming)
    
       - Add sysfs files to represent time spent in a platform sleep state
         during suspend-to-idle and make AMD and Intel PMC drivers use them
         Mario Limonciello)
    
       - Use of_property_present() for testing DT property presence (Rob
         Herring)
    
       - Add set_required_opps() callback to the 'struct opp_table', to make
         the code paths cleaner (Viresh Kumar)
    
       - Update the pm-graph siute of utilities to v5.11 with the following
         changes:
           * New script which allows users to install the latest pm-graph
             from the upstream github repo.
           * Update all the dmesg suspend/resume PM print formats to be able
             to process recent timelines using dmesg only.
           * Add ethtool output to the log for the system's ethernet device
             if ethtool exists.
           * Make the tool more robustly handle events where mangled dmesg
             or ftrace outputs do not include all the requisite data.
    
       - Make the sleepgraph utility recognize "CPU killed" messages (Xueqin
         Luo)
    
       - Remove unneeded SRCU selection in Kconfig because it's always set
         from devfreq core (Paul E. McKenney)
    
       - Drop of_match_ptr() macro from exynos-bus.c because this driver is
         always using the DT table for driver probe (Krzysztof Kozlowski)
    
       - Use the preferred of_property_present() instead of the low-level
         of_get_property() on exynos-bus.c (Rob Herring)
    
       - Use devm_platform_get_and_ioream_resource() in exyno-ppmu.c (Yang
         Li)"
    
    * tag 'pm-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (44 commits)
      platform/x86/intel/pmc: core: Report duration of time in HW sleep state
      platform/x86/intel/pmc: core: Always capture counters on suspend
      platform/x86/amd: pmc: Report duration of time in hw sleep state
      PM: Add sysfs files to represent time spent in hardware sleep state
      cpufreq: use correct unit when verify cur freq
      cpufreq: tegra194: add OPP support and set bandwidth
      cpufreq: amd-pstate: Make varaiable mode_state_machine static
      PM: core: Remove unnecessary (void *) conversions
      cpufreq: drivers with target_index() must set freq_table
      PM / devfreq: exynos-ppmu: Use devm_platform_get_and_ioremap_resource()
      OPP: Move required opps configuration to specialized callback
      OPP: Handle all genpd cases together in _set_required_opps()
      cpufreq: qcom-cpufreq-hw: Revert adding cpufreq qos
      dt-bindings: cpufreq: cpufreq-qcom-hw: Add QCM2290
      dt-bindings: cpufreq: cpufreq-qcom-hw: Sanitize data per compatible
      dt-bindings: cpufreq: cpufreq-qcom-hw: Allow just 1 frequency domain
      cpufreq: Add SM7225 to cpufreq-dt-platdev blocklist
      cpufreq: qcom-cpufreq-hw: fix double IO unmap and resource release on exit
      cpufreq: mediatek: Raise proc and sram max voltage for MT7622/7623
      cpufreq: mediatek: raise proc/sram max voltage for MT8516
      ...

commit 793582ff47f8b73be8d3d925d750bf3ef79f33c7
Merge: 5e0ca0bfc33b 4f810294e00b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 18:37:41 2023 -0700

    Merge tag 'acpi-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI updates from Rafael Wysocki:
     "These update the ACPICA code in the kernel to upstream revision
      20230331, fix the ACPI SBS driver and the evaluation of the _PDC
      method on Xen dom0 in the ACPI processor driver, update the ACPI
      driver for Intel SoCs and clean up code in multiple places.
    
      Specifics:
    
       - Update the ACPICA code in the kernel to upstream revision 20230331
         including the following changes:
           * Delete bogus node_array array of pointers from AEST table
             (Jessica Clarke)
           * Add support for trace buffer extension in GICC to the ACPI MADT
             parser (Xiongfeng Wang)
           * Add missing macro ACPI_FUNCTION_TRACE() for
             acpi_ns_repair_HID() (Xiongfeng Wang)
           * Add missing tables to astable (Pedro Falcato)
           * Add support for 64 bit loong_arch compilation to ACPICA (Huacai
             Chen)
           * Add support for ASPT table in disassembler to ACPICA (Jeremi
             Piotrowski)
           * Add support for Arm's MPAM ACPI table version 2 (Hesham
             Almatary)
           * Update all copyrights/signons in ACPICA to 2023 (Bob Moore)
           * Add support for ClockInput resource (v6.5) (Niyas Sait)
           * Add RISC-V INTC interrupt controller definition to the list of
             supported interrupt controllers for MADT (Sunil V L)
           * Add structure definitions for the RISC-V RHCT ACPI table (Sunil
             V L)
           * Address several cases in which the ACPICA code might lead to
             undefined behavior (Tamir Duberstein)
           * Make ACPICA code support flexible arrays properly (Kees Cook)
           * Check null return of ACPI_ALLOCATE_ZEROED in
             acpi_db_display_objects() (void0red)
           * Add os specific support for Zephyr RTOS to ACPICA (Najumon)
           * Update version to 20230331 (Bob Moore)
    
       - Fix evaluating the _PDC ACPI control method when running as Xen
         dom0 (Roger Pau Monne)
    
       - Use platform devices to load ACPI PPC and PCC drivers (Petr Pavlu)
    
       - Check for null return of devm_kzalloc() in fch_misc_setup() (Kang
         Chen)
    
       - Log a message if enable_irq_wake() fails for the ACPI SCI (Simon
         Gaiser)
    
       - Initialize the correct IOMMU fwspec while parsing ACPI VIOT
         (Jean-Philippe Brucker)
    
       - Amend indentation and prefix error messages with FW_BUG in the ACPI
         SPCR parsing code (Andy Shevchenko)
    
       - Enable ACPI sysfs support for CCEL records (Kuppuswamy
         Sathyanarayanan)
    
       - Make the APEI error injection code warn on invalid arguments when
         explicitly indicated by platform (Shuai Xue)
    
       - Add CXL error types to the error injection code in APEI (Tony Luck)
    
       - Refactor acpi_data_prop_read_single() (Andy Shevchenko)
    
       - Fix two issues in the ACPI SBS driver (Armin Wolf)
    
       - Replace ternary operator with min_t() in the generic ACPI thermal
         zone driver (Jiangshan Yi)
    
       - Ensure that ACPI notify handlers are not running after removal and
         clean up code in acpi_sb_notify() (Rafael Wysocki)
    
       - Remove register_backlight_delay module option and code and remove
         quirks for false-positive backlight control support advertised on
         desktop boards (Hans de Goede)
    
       - Replace irqdomain.h include with struct declarations in ACPI
         headers and update several pieces of code previously including of.h
         implicitly through those headers (Rob Herring)
    
       - Fix acpi_evaluate_dsm_typed() redefinition error (Kiran K)
    
       - Update the pm_profile sysfs attribute documentation (Rafael
         Wysocki)
    
       - Add 80862289 ACPI _HID for second PWM controller on Cherry Trail to
         the ACPI driver for Intel SoCs (Hans de Goede)"
    
    * tag 'acpi-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (64 commits)
      ACPI: LPSS: Add 80862289 ACPI _HID for second PWM controller on Cherry Trail
      ACPI: bus: Ensure that notify handlers are not running after removal
      ACPI: bus: Add missing braces to acpi_sb_notify()
      ACPI: video: Remove desktops without backlight DMI quirks
      ACPI: video: Remove register_backlight_delay module option and code
      ACPI: Replace irqdomain.h include with struct declarations
      fpga: lattice-sysconfig-spi: Add explicit include for of.h
      tpm: atmel: Add explicit include for of.h
      virtio-mmio: Add explicit include for of.h
      pata: ixp4xx: Add explicit include for of.h
      ata: pata_macio: Add explicit include of irqdomain.h
      serial: 8250_tegra: Add explicit include for of.h
      net: rfkill-gpio: Add explicit include for of.h
      staging: iio: resolver: ad2s1210: Add explicit include for of.h
      iio: adc: ad7292: Add explicit include for of.h
      ACPICA: Update version to 20230331
      ACPICA: add os specific support for Zephyr RTOS
      ACPICA: ACPICA: check null return of ACPI_ALLOCATE_ZEROED in acpi_db_display_objects
      ACPICA: acpi_resource_irq: Replace 1-element arrays with flexible array
      ACPICA: acpi_madt_oem_data: Fix flexible array member definition
      ...

commit 5e0ca0bfc33b7196ae3a5cbe26289a4025618f5a
Merge: 4173cf6fb6b7 5bc6b1df65c8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 18:32:43 2023 -0700

    Merge tag 'thermal-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull thermal control updates from Rafael Wysocki:
     "These mostly continue to prepare the thermal control subsystem for
      using unified representation of trip points, which includes cleanups,
      code refactoring and similar and update several drivers (for other
      reasons), which includes new hardware support.
    
      Specifics:
    
       - Add a thermal zone 'devdata' accessor and modify several drivers to
         use it (Daniel Lezcano)
    
       - Prevent drivers from using the 'device' internal thermal zone
         structure field directly (Daniel Lezcano)
    
       - Clean up the hwmon thermal driver (Daniel Lezcano)
    
       - Add thermal zone id accessor and thermal zone type accessor and
         prevent drivers from using thermal zone fields directly (Daniel
         Lezcano)
    
       - Clean up the acerhdf and tegra thermal drivers (Daniel Lezcano)
    
       - Add lower bound check for sysfs input to the x86_pkg_temp_thermal
         Intel thermal driver (Zhang Rui)
    
       - Add more thermal zone device encapsulation: prevent setting
         structure field directly, access the sensor device instead the
         thermal zone's device for trace, relocate the traces in
         drivers/thermal (Daniel Lezcano)
    
       - Use the generic trip point for the i.MX and remove the
         get_trip_temp ops (Daniel Lezcano)
    
       - Use the devm_platform_ioremap_resource() in the Hisilicon driver
         (Yang Li)
    
       - Remove R-Car H3 ES1.* handling as public has only access to the ES2
         version and the upstream support for the ES1 has been shutdown
         (Wolfram Sang)
    
       - Add a delay after initializing the bank in order to let the time to
         the hardware to initialze itself before reading the temperature
         (Amjad Ouled-Ameur)
    
       - Add MT8365 support (Amjad Ouled-Ameur)
    
       - Preparational cleanup and DT bindings for RK3588 support (Sebastian
         Reichel)
    
       - Add driver support for RK3588 (Finley Xiao)
    
       - Use devm_reset_control_array_get_exclusive() for the Rockchip
         driver (Ye Xingchen)
    
       - Detect power gated thermal zones and return -EAGAIN when reading
         the temperature (Mikko Perttunen)
    
       - Remove thermal_bind_params structure as it is unused (Zhang Rui)
    
       - Drop unneeded quotes in DT bindings allowing to run yamllint (Rob
         Herring)
    
       - Update the power allocator documentation according to the thermal
         trace relocation (Lukas Bulwahn)
    
       - Fix sensor 1 interrupt status bitmask for the Mediatek LVTS sensor
         (Chen-Yu Tsai)
    
       - Use the dev_err_probe() helper in the Amlogic driver (Ye Xingchen)
    
       - Add AP domain support to LVTS thermal controllers for mt8195
         (Balsam CHIHI)
    
       - Remove buggy call to thermal_of_zone_unregister() (Daniel Lezcano)
    
       - Make thermal_of_zone_[un]register() private to the thermal OF code
         (Daniel Lezcano)
    
       - Create a private copy of the thermal zone device parameters
         structure when registering a thermal zone (Daniel Lezcano)
    
       - Fix a kernel NULL pointer dereference in thermal_hwmon (Zhang Rui)
    
       - Revert recent message adjustment in thermal_hwmon (Rafael Wysocki)
    
       - Use of_property_present() for testing DT property presence in
         thermal control code (Rob Herring)
    
       - Clean up thermal_list_lock locking in the thermal core (Rafael
         Wysocki)
    
       - Add DLVR support for RFIM control in the int340x Intel thermal
         driver (Srinivas Pandruvada)"
    
    * tag 'thermal-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (55 commits)
      thermal: intel: int340x: Add DLVR support for RFIM control
      thermal/core: Alloc-copy-free the thermal zone parameters structure
      thermal/of: Unexport unused OF functions
      thermal/drivers/bcm2835: Remove buggy call to thermal_of_zone_unregister
      thermal/drivers/mediatek/lvts_thermal: Add AP domain for mt8195
      dt-bindings: thermal: mediatek: Add AP domain to LVTS thermal controllers for mt8195
      thermal: amlogic: Use dev_err_probe()
      thermal/drivers/mediatek/lvts_thermal: Fix sensor 1 interrupt status bitmask
      MAINTAINERS: adjust entry in THERMAL/POWER_ALLOCATOR after header movement
      dt-bindings: thermal: Drop unneeded quotes
      thermal/core: Remove thermal_bind_params structure
      thermal/drivers/tegra-bpmp: Handle offline zones
      thermal/drivers/rockchip: use devm_reset_control_array_get_exclusive()
      dt-bindings: rockchip-thermal: Support the RK3588 SoC compatible
      thermal/drivers/rockchip: Support RK3588 SoC in the thermal driver
      thermal/drivers/rockchip: Support dynamic sized sensor array
      thermal/drivers/rockchip: Simplify channel id logic
      thermal/drivers/rockchip: Use dev_err_probe
      thermal/drivers/rockchip: Simplify clock logic
      thermal/drivers/rockchip: Simplify getting match data
      ...

commit 4173cf6fb6b7d1b4569cca08af318c4561356fb5
Merge: 3361e9a4ea95 1c19ac768b8e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 17:43:44 2023 -0700

    Merge tag 'hwmon-for-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/groeck/linux-staging
    
    Pull hwmon updates from Guenter Roeck:
     "New drivers
    
       - Driver for Acbel FSB032 power supply
    
       - Driver for StarFive JH71x0 temperature sensor
    
      Added support to existing drivers:
    
       - aquacomputer_d5next: Support for Aquacomputer Aquastream XT
    
       - nct6775: Added various ASUS boards to list of boards supporting WMI
    
       - asus-ec-sensors: ROG STRIX Z390-F GAMING, ProArt B550-Creator,
    
      Notable improvements:
    
       - Regulator event and sysfs notification support for PMBus drivers
    
      Notable cleanup:
    
       - Constified pointers to hwmon_channel_info
    
      .. and various other minor bug fixes and improvements"
    
    * tag 'hwmon-for-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/groeck/linux-staging: (131 commits)
      hwmon: lochnagar: Remove the unneeded include <linux/i2c.h>
      hwmon: (pmbus/fsp-3y) Fix functionality bitmask in FSP-3Y YM-2151E
      hwmon: (adt7475) Use device_property APIs when configuring polarity
      hwmon: (aquacomputer_d5next) Add support for Aquacomputer Aquastream XT
      hwmon: (it87) Disable/enable SMBus access for IT8622E chipset
      hwmon: (it87) Add calls to smbus_enable/smbus_disable as required
      hwmon: (it87) Test for error in it87_update_device
      hwmon: (it87) Disable SMBus access for environmental controller registers.
      docs: hwmon: Add documentaion for acbel-fsg032 PSU
      hwmon: (pmbus/acbel-fsg032) Add Acbel power supply
      dt-bindings: trivial-devices: Add acbel,fsg032
      dt-bindings: vendor-prefixes: Add prefix for acbel
      hwmon: (sfctemp) Simplify error message
      hwmon: (pmbus/ibm-cffps) Use default debugfs attributes and lock function
      hwmon: (pmbus/core) Add lock and unlock functions
      hwmon: (pmbus/core) Request threaded interrupt with IRQF_ONESHOT
      hwmon: (nct6775) update ASUS WMI monitoring list A620/B760/W790
      hwmon: ina2xx: add optional regulator support
      dt-bindings: hwmon: ina2xx: add supply property
      dt-bindings: hwmon: pwm-fan: Convert to DT schema
      ...

commit 3361e9a4ea957b09c5d6242613360c415194dbb5
Merge: fe89e9b1af14 1f6fa392a994
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 17:38:25 2023 -0700

    Merge tag 'rproc-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/remoteproc/linux
    
    Pull remoteproc updates from Bjorn Andersson:
    
     - Unnecessary type casts from the 'void *' rproc->priv pointer are
       dropped throughout the subsystem.
    
     - A kernel-doc error is corrected in the Mediatek SCPI IPI
       implementation
    
     - The firmware loading onto the IMX DSP remote processors is reworked
       to avoid non-32bit memory operations. A module parameter is
       introduced to assist development of firmware without communication
       abilities in place. Error paths in imx_dsp_rproc_mbox_alloc() is
       cleaned up
    
     - The cluster configuration handling in the TI K3 R5 driver is
       corrected and support for the single-R5 core found in the TI AM62x
       SoC family is introduced
    
     - The TI PRU driver device- to virtual-address translation is updated
       to avoid compiler warning about the unsigned device-address always
       being larger than 0
    
     - The ST remoteproc driver is transitioned to use of_property_present()
    
     - Issues with kicks arriving after the STM32 remote processor has been
       shut down are mitigated by checking the processor's state before
       handling them.
    
     - Support for mailbox channels for communication with the remote
       processors are added to the Xilinx R5 remoteproc driver. The naming
       of carveouts are corrected and their parsing is reworked. For this a
       couple of fixes targeting the mailbox subsystem are picked up here as
       well.
    
     - Reference counting of of_nodes are corrected in the ST, STM32, RCAR
       and IMX remoteproc drivers
    
    * tag 'rproc-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/remoteproc/linux: (24 commits)
      remoteproc: st: Use of_property_present() for testing DT property presence
      dt-bindings: remoteproc: Drop unneeded quotes
      remoteproc: imx_dsp_rproc: Fix kernel test robot sparse warning
      remoteproc: imx_dsp_rproc: Improve exception handling in imx_dsp_rproc_mbox_alloc()
      remoteproc: pru: Remove always true check positive unsigned value
      dt-bindings: remoteproc: stm32-rproc: Typo fix
      remoteproc: stm32_rproc: Add mutex protection for workqueue
      remoteproc: Remove unnecessary (void*) conversions
      remoteproc: imx_dsp_rproc: Call of_node_put() on iteration error
      remoteproc: imx_rproc: Call of_node_put() on iteration error
      remoteproc: rcar_rproc: Call of_node_put() on iteration error
      remoteproc: st: Call of_node_put() on iteration error
      remoteproc: stm32: Call of_node_put() on iteration error
      remoteproc: k3-r5: Use separate compatible string for TI AM62x SoC family
      dt-bindings: remoteproc: ti: Add new compatible for AM62 SoC family
      remoteproc: k3-r5: Simplify cluster mode setting usage
      remoteproc/mtk_scpi_ipi: Fix one kernel-doc comment
      remoteproc: xilinx: Add mailbox channels for rpmsg
      drivers: remoteproc: xilinx: Fix carveout names
      mailbox: zynqmp: Fix typo in IPI documentation
      ...

commit fe89e9b1af14794a4df9d45b958ff1adf0b98dc1
Merge: c5c06e278019 ba7a4754da10
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 17:33:55 2023 -0700

    Merge tag 'rpmsg-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/remoteproc/linux
    
    Pull rpmsg updates from Bjorn Andersson:
     "The remove functions of the Qualcomm SMD and GLINK RPM platform
      drivers are transitioned to the new void returning prototype. Likewise
      is qcom_smd_unregister_edge() transitioned to void, as it
      unconditionally returned 0.
    
      An assumption about the ordering of the intent request acknowledgement
      and advertisement of a new intent in the GLINK implementation is
      corrected. Faulty error handling is corrected is improved in the TX
      path, and duplicated code, in the same path, is cleaned up"
    
    * tag 'rpmsg-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/remoteproc/linux:
      rpmsg: glink: Consolidate TX_DATA and TX_DATA_CONT
      rpmsg: glink: Propagate TX failures in intentless mode as well
      rpmsg: glink: Wait for intent, not just request ack
      rpmsg: glink: Transition intent request signaling to wait queue
      rpmsg: qcom_smd: Convert to platform remove callback returning void
      rpmsg: qcom_glink_rpm: Convert to platform remove callback returning void
      rpmsg: qcom_smd: Make qcom_smd_unregister_edge() return void

commit c5c06e278019892391ef4d47933796cacfec29cb
Merge: eb8322d714ea 22a4455e75be
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 17:29:46 2023 -0700

    Merge tag 'mmc-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/ulfh/mmc
    
    Pull MMC updates from Ulf Hansson:
     "MMC core:
       - Allow an invalid regulator in mmc_regulator_set_ocr()
       - Log about empty non-removable slots
       - Add helpers to enable/disable the vqmmc regulator
    
      MMC host:
       - mtk-sd: Add support for the mt8365 variant
       - renesas_sdhi: Remove support for R-Car H3 ES1.* variants
       - sdhci_am654: Add power management support
       - sdhci-cadence: Add support for eMMC hardware reset
       - sdhci-cadence: Add support for AMD Pensando Elba variant
       - sdhci-msm: Add support for the IPQ5018 variant
       - sdhci-msm: Add support for the QCM2290 variant
       - sdhci-of-arasan: Skip setting clock delay for 400KHz
       - sdhci-of-arasan: Add support for the Xilinx Versal Net variant
       - sdhci-of-arasan: Remove Intel Thunder Bay SOC support
       - sdhci-of-arasan: Add support to request the "gate" clock
       - sdhci-of-dwcmshc: Properly determine max clock on Rockchip
       - sdhci-of-esdhc: Fix quirk to ignore command inhibit for data
       - sdhci-pci-o2micro: Fix SDR50 mode timing issue
    
      MEMSTICK:
       - r592: Fix use-after-free bug in r592_remove due to race condition"
    
    * tag 'mmc-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/ulfh/mmc: (40 commits)
      dt-bindings: mmc: sdhci-msm: Document the IPQ5018 compatible
      mmc: vub300: remove unreachable code
      mmc: sdhci-cadence: Support mmc hardware reset
      mmc: sdhci-cadence: Add AMD Pensando Elba SoC support
      mmc: sdhci-cadence: Support device specific init during probe
      mmc: sdhci-cadence: Enable device specific override of writel()
      dt-bindings: mmc: cdns: Add AMD Pensando Elba SoC
      mmc: core: Remove unused macro mmc_req_rel_wr
      mmc: sdhci-of-arasan: Skip setting clock delay for 400KHz
      mmc: sdhci-of-arasan: Add support for eMMC5.1 on Xilinx Versal Net platform
      dt-bindings: mmc: arasan,sdci: Add Xilinx Versal Net compatible
      mmc: sdhci_am654: Add support for PM suspend/resume
      mmc: core: remove unnecessary (void*) conversions
      dt-bindings: mmc: fsl-imx-esdhc: ref sdhci-common.yaml
      mmc: sdhci-of-esdhc: fix quirk to ignore command inhibit for data
      mmc: core: Log about empty non-removable slots
      dt-bindings: mmc: fujitsu: Add Socionext Synquacer
      mmc: sdricoh_cs: remove unused sdricoh_readw function
      dt-bindings: mmc: Remove bindings for Intel Thunder Bay SoC"
      mmc: sdhci-of-arasan: Remove Intel Thunder Bay SOC support
      ...

commit eb8322d714ea98fdc620d682fb517b50ea282aa5
Merge: 2c96606a0f8b 7227aacb62ae
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 17:23:42 2023 -0700

    Merge tag 'mtd/for-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/mtd/linux
    
    Pull mtd updates from Miquel Raynal:
     "Core MTD changes:
       - dt-bindings: Drop unneeded quotes
       - mtdblock: Tolerate corrected bit-flips
       - Use of_property_read_bool() for boolean properties
       - Avoid magic values
       - Avoid printing error messages on probe deferrals
       - Prepare mtd_otp_nvmem_add() to handle -EPROBE_DEFER
       - Fix error path for nvmem provider
       - Fix nvmem error reporting
       - Provide unique name for nvmem device
    
      MTD device changes:
       - lpddr_cmds: Remove unused words variable
       - bcm63xxpart: Remove MODULE_LICENSE in non-modules
    
      SPI NOR core changes:
       - Introduce Read While Write support for flashes featuring several
         banks
       - Set the 4-Byte Address Mode method based on SFDP data
       - Allow post_sfdp hook to return errors
       - Parse SCCR MC table and introduce support for multi-chip devices
    
      SPI NOR manufacturer drivers changes:
       - macronix: Add support for mx25uw51245g with RWW
       - spansion:
          - Determine current address mode at runtime as it can be changed
            in a non-volatile way and differ from factory defaults or from
            what SFDP advertises.
          - Enable JFFS2 write buffer mode for few ECC'd NOR flashes:
            S25FS256T, s25hx and s28hx
          - Add support for s25hl02gt and s25hs02gt
    
      Raw NAND core changes:
       - Convert to platform remove callback returning void
       - Fix spelling mistake waifunc() -> waitfunc()
    
      Raw NAND controller driver changes:
       - imx: Remove unused is_imx51_nfc and imx53_nfc functions
       - omap2: Drop obsolete dependency on COMPILE_TEST
       - orion: Use devm_platform_ioremap_resource()
       - qcom:
          - Use of_property_present() for testing DT property presence
          - Use devm_platform_get_and_ioremap_resource()
       - stm32_fmc2: Depends on ARCH_STM32 instead of MACH_STM32MP157
       - tmio: Remove reference to config MTD_NAND_TMIO in the parsers
    
      Raw NAND manufacturer driver changes:
       - hynix: Fix up bit 0 of sdr_timing_mode
    
      SPI-NAND changes:
       - Add support for ESMT F50x1G41LB"
    
    * tag 'mtd/for-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/mtd/linux: (55 commits)
      mtd: nand: Convert to platform remove callback returning void
      mtd: onenand: omap2: Drop obsolete dependency on COMPILE_TEST
      mtd: spi-nor: spansion: Add support for s25hl02gt and s25hs02gt
      mtd: spi-nor: spansion: Add a new ->ready() hook for multi-chip device
      mtd: spi-nor: spansion: Rework cypress_nor_quad_enable_volatile() for multi-chip device support
      mtd: spi-nor: spansion: Rework cypress_nor_get_page_size() for multi-chip device support
      mtd: spi-nor: sfdp: Add support for SCCR map for multi-chip device
      mtd: spi-nor: Extract volatile register offset from SCCR map
      mtd: spi-nor: Allow post_sfdp hook to return errors
      mtd: spi-nor: spansion: Rename method to cypress_nor_get_page_size
      mtd: spi-nor: spansion: Enable JFFS2 write buffer for S25FS256T
      mtd: spi-nor: spansion: Enable JFFS2 write buffer for Infineon s25hx SEMPER flash
      mtd: spi-nor: spansion: Enable JFFS2 write buffer for Infineon s28hx SEMPER flash
      mtd: spi-nor: spansion: Determine current address mode
      mtd: spi-nor: core: Introduce spi_nor_set_4byte_addr_mode()
      mtd: spi-nor: core: Update flash's current address mode when changing address mode
      mtd: spi-nor: Stop exporting spi_nor_restore()
      mtd: spi-nor: Set the 4-Byte Address Mode method based on SFDP data
      mtd: spi-nor: core: Make spi_nor_set_4byte_addr_mode_brwr public
      mtd: spi-nor: core: Update name and description of spi_nor_set_4byte_addr_mode
      ...

commit 2c96606a0f8b7900387dbeb6532b59527999834d
Merge: d84955790e16 8a4adcf67a39
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 17:18:18 2023 -0700

    Merge tag 'gpio-updates-for-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/brgl/linux
    
    Pull gpio updates from Bartosz Golaszewski:
     "We have some new drivers, significant refactoring of existing intel
      platforms, lots of improvements all around, mass conversion to using
      immutable irqchips by drivers that had not been converted individually
      yet and some changes in the core library code.
    
      Summary:
    
      New drivers:
       - add a driver for the Loongson GPIO controller
       - add a driver for the fxl6408 I2C GPIO expander
       - add a GPIO module containing code common for Intel Elkhart Lake and
         Merrifield platforms
       - add a driver for the Intel Elkhart Lake platform reusing the code
         from the intel tangier library
    
      GPIOLIB core:
       - GPIO ACPI improvements
       - simplify gpiochip_add_data_with_keys() fwnode handling
       - cleanup header inclusions (remove unneeded ones, order the rest
         alphabetically)
       - remove duplicate code (reuse krealloc() instead of open-coding it,
         drop a duplicated check in gpiod_find_and_request())
       - reshuffle the code to remove unnecessary forward declarations
       - coding style cleanups and improvements
       - add a helper for accessing device fwnodes
       - small updates in docs
    
      Driver improvements:
       - convert all remaining GPIO irqchip drivers to using immutable
         irqchips
       - drop unnecessary of_match_ptr() macro expansions
       - shrink the code in gpio-merrifield significantly by reusing the
         code from gpio-tangier + minor tweaks to the driver code
       - remove MODULE_LICENSE() from drivers that can only be built-in
       - add device-tree support to gpio-loongson1
       - use new regmap features in gpio-104-dio-48e and gpio-pcie-idio-24
       - minor tweaks and fixes to gpio-xra1403, gpio-sim, gpio-tegra194,
         gpio-omap, gpio-aspeed, gpio-raspberrypi-exp
       - shrink code in gpio-ich and gpio-pxa
       - Kconfig tweak for gpio-pmic-eic-sprd"
    
    * tag 'gpio-updates-for-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/brgl/linux: (99 commits)
      gpio: gpiolib: Simplify gpiochip_add_data_with_key() fwnode
      gpiolib: Add gpiochip_set_data() helper
      gpiolib: Move gpiochip_get_data() higher in the code
      gpiolib: Check array_info for NULL only once in gpiod_get_array()
      gpiolib: Replace open coded krealloc()
      gpiolib: acpi: Add a ignore wakeup quirk for Clevo NL5xNU
      gpiolib: acpi: Move ACPI device NULL check to acpi_get_driver_gpio_data()
      gpiolib: acpi: use the fwnode in acpi_gpiochip_find()
      gpio: mm-lantiq: Fix typo in the newly added header filename
      sh: mach-x3proto: Add missing #include <linux/gpio/driver.h>
      powerpc/40x: Add missing select OF_GPIO_MM_GPIOCHIP
      gpio: xlp: Convert to immutable irq_chip
      gpio: xilinx: Convert to immutable irq_chip
      gpio: xgs-iproc: Convert to immutable irq_chip
      gpio: visconti: Convert to immutable irq_chip
      gpio: tqmx86: Convert to immutable irq_chip
      gpio: thunderx: Convert to immutable irq_chip
      gpio: stmpe: Convert to immutable irq_chip
      gpio: siox: Convert to immutable irq_chip
      gpio: rda: Convert to immutable irq_chip
      ...

commit d84955790e16588774c4365ba0d449e8a2aa46d8
Merge: f5468bec213e ed479907ff79
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 17:13:47 2023 -0700

    Merge tag 'regulator-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/regulator
    
    Pull regulator updates from Mark Brown:
     "A fairly quiet release, there were some cleanup and a couple of new
      devices but the biggest change was converting most of the drivers to
      use asynchronous probe. This allows us to ramp up multiple regulators
      in parallel during boot which can have a noticable impact on modern
      systems.
    
      Summary:
    
       - Update of drivers to PROBE_PREFER_ASYNCHRONOUS to mitigate issues
         with ramp times slowing down boots.
    
       - Convert to void remove callbacks.
    
       - Support for voltage monitoring on DA9063
    
       - Support for Qualcomm PMC8180 and PMM8654au, Richtek RT4803 and
         RT5739, Rockchip RK860x"
    
    * tag 'regulator-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/regulator: (46 commits)
      regulator: dt-bindings: qcom,rpmh: Combine PM6150L and PM8150L if-then
      regulator: core: Make regulator_lock_two() logic easier to follow
      regulator: dt-bindings: qcom,rpmh: Correct PM8550 family supplies
      regulator: stm32-pwr: fix of_iomap leak
      dt-bindings: mfd: dlg,da9063: document voltage monitoring
      regulator: da9063: implement setter for voltage monitoring
      regulator: da9063: add voltage monitoring registers
      regulator: fan53555: Add support for RK860X
      regulator: fan53555: Use dev_err_probe
      regulator: fan53555: Improve vsel_mask computation
      regulator: fan53555: Make use of the bit macros
      regulator: fan53555: Remove unused *_SLEW_SHIFT definitions
      regulator: dt-bindings: fcs,fan53555: Add support for RK860X
      regulator: qcom_smd: Add MP5496 S1 regulator
      regulator: qcom_smd: Add s1 sub-node to mp5496 regulator
      regulator: qcom,rpmh: add compatible for pmm8654au RPMH
      regulator: qcom-rpmh: add support for pmm8654au regulators
      regulator: core: Avoid lockdep reports when resolving supplies
      regulator: core: Consistently set mutex_owner when using ww_mutex_lock_slow()
      regulator: dt-bindings: qcom,rpmh: Add compatible for PMC8180
      ...

commit f5468bec213ec2ad3f2724e3f1714b3bc7bf1515
Merge: 088e0c188513 4a670ac3e75e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 17:09:34 2023 -0700

    Merge tag 'regmap-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/regmap
    
    Pull regmap updates from Mark Brown:
     "This is a much bigger change for regmap than is normal, the main
      things being the addition of some KUnit coverage and a maple tree
      based register cache which longer term is likely to replace the rbtree
      cache except possibly for very small register maps.
    
      While it's complete overkill for most applications the code for maple
      trees is there and there are some larger, sparser devices where the
      data structure is a better fit.
    
      The maple tree support is still a work in progress but already useful,
      there's some conversions of drivers ready to go after the merge
      window.
    
      Summary:
    
       - Support for shifting register addresses up as well as down, there's
         a use cases with memory mapped MDIO.
    
       - Refactoring of the type configuration in regmap-irq to allow access
         to driver data in the handler, needed by some GPIO devices.
    
       - Some initial KUnit coverage, the bulk of the driver facing API is
         covered but there's holes and things like the data marshalling for
         bytestream buses are just not covered in the slightest.
    
       - Removal of the compressed cache type, it had zero users and was
         getting in the way of KUnit.
    
       - Addition of a maple tree based register cache, there's more work to
         do but it's already useful for some devices with a flatter data
         structure than rbtree and getting to use all the optimisation work
         Liam is doing"
    
    * tag 'regmap-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/regmap:
      regmap: allow upshifting register addresses before performing operations
      regmap: Pass irq_drv_data as a parameter for set_type_config()
      regmap: Use mas_walk() instead of mas_find()
      regmap: Fix double unlock in the maple cache
      regmap: Add maple tree based register cache
      regmap: Factor out single value register syncing
      regmap: Add some basic kunit tests
      regmap: Add RAM backed register map
      regmap: Removed compressed cache support
      regmap: Support paging for buses with reg_read()/reg_write()
      regmap: Clarify error for unknown cache types
      regmap: Handle sparse caches in the default sync
      regmap: add a helper to translate the register address
      regmap: cache: Silence checkpatch warning
      regmap: cache: Return error in cache sync operations for REGCACHE_NONE
      regmap-irq: Place kernel doc of struct regmap_irq_chip in order
      regmap-irq: Add no_status support
      regmap: sdw: Remove 8-bit value size restriction
      regmap: sdw: Update misleading comment

commit 088e0c188513b58a0056a488cf5b7df094a8a48a
Merge: 07d971abf436 e578c943e363
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 16:59:48 2023 -0700

    Merge tag 'platform-drivers-x86-v6.4-1' of git://git.kernel.org/pub/scm/linux/kernel/git/pdx86/platform-drivers-x86
    
    Pull x86 platform driver updates from Hans de Goede:
    
     -  AMD PMC and PMF drivers:
        - Numerous bugfixes
    
     -  Intel Speed Select Technology (ISST):
        - TPMI (Topology Aware Register and PM Capsule Interface) support
          for ISST support on upcoming processor models
        - Various other improvements / new hw support
        - tools/intel-speed-select: TPMI support + other improvements
    
     -  Intel In Field Scan (IFS):
        - Add Array Bist test support
    
     -  New drivers:
        - intel_bytcrc_pwrsrc Crystal Cove PMIC pwrsrc / reset-reason driver
        - lenovo-ymc Yoga Mode Control driver for reporting SW_TABLET_MODE
        - msi-ec Driver for MSI laptop EC features like battery charging limits
    
     -  apple-gmux:
        - Support for new MMIO based models (T2 Macs)
        - Honor acpi_backlight= auto-detect-code + kernel cmdline option
          to switch between gmux and apple_bl backlight drivers and remove
          own custom handling for this
    
     -  x86-android-tablets: Refactor / cleanup + new hw support
    
     -  Miscellaneous other cleanups / fixes
    
    * tag 'platform-drivers-x86-v6.4-1' of git://git.kernel.org/pub/scm/linux/kernel/git/pdx86/platform-drivers-x86: (178 commits)
      platform/x86: x86-android-tablets: Add accelerometer support for Yoga Tablet 2 1050/830 series
      platform/x86: x86-android-tablets: Add "yogabook-touch-kbd-digitizer-switch" pdev for Lenovo Yoga Book
      platform/x86: x86-android-tablets: Add Wacom digitizer info for Lenovo Yoga Book
      platform/x86: x86-android-tablets: Update Yoga Book HiDeep touchscreen comment
      platform/x86: thinkpad_acpi: Fix Embedded Controller access on X380 Yoga
      platform/x86/intel/sdsi: Change mailbox timeout
      platform/x86/intel/pmt: Ignore uninitialized entries
      platform/x86: amd: pmc: provide user message where s0ix is not supported
      platform/x86/amd: pmc: Fix memory leak in amd_pmc_stb_debugfs_open_v2()
      mlxbf-bootctl: Add sysfs file for BlueField boot fifo
      platform/x86: amd: pmc: Remove __maybe_unused from amd_pmc_suspend_handler()
      platform/x86/intel/pmc/mtl: Put GNA/IPU/VPU devices in D3
      platform/x86/amd: pmc: Move out of BIOS SMN pair for STB init
      platform/x86/amd: pmc: Utilize SMN index 0 for driver probe
      platform/x86/amd: pmc: Move idlemask check into `amd_pmc_idlemask_read`
      platform/x86/amd: pmc: Don't dump data after resume from s0i3 on picasso
      platform/x86/amd: pmc: Hide SMU version and program attributes for Picasso
      platform/x86/amd: pmc: Don't try to read SMU version on Picasso
      platform/x86/amd/pmf: Move out of BIOS SMN pair for driver probe
      platform/x86: intel-uncore-freq: Add client processors
      ...

commit 07d971abf436f78962ad95faafce04582b5b833a
Merge: 4ea956963f4f d184d60aa301
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 16:56:53 2023 -0700

    Merge tag 'tag-chrome-platform-for-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/chrome-platform/linux
    
    Pull chrome platform updates from Tzung-Bi Shih:
     "Improvements:
    
       - Replace fake flexible arrays with flexible-array member
    
      Misc:
    
       - Minor cleanups and fixes"
    
    * tag 'tag-chrome-platform-for-v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/chrome-platform/linux:
      platform/chrome: wilco_ec: remove return value check of debugfs_create_dir()
      platform/chrome: cros_ec_debugfs: fix kernel-doc warning
      platform/chrome: cros_ec: Separate logic for getting panic info
      platform/chrome: cros_typec_switch: Add missing fwnode_handle_put()
      platform/chrome: cros_ec: remove unneeded label and if-condition
      platform/chrome: Replace fake flexible arrays with flexible-array member

commit 4ea956963f4fca59050a22fcc65f00a85d586e63
Merge: c8cc58e289ed 73b41dc51fbe
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 16:27:13 2023 -0700

    Merge tag 'media/v6.4-1' of git://git.kernel.org/pub/scm/linux/kernel/git/mchehab/linux-media
    
    Pull media updates from Mauro Carvalho Chehab:
    
     - Removal of some old unused sensor drivers: ad9389b, m5mols, mt9m032,
       mt9t001, noon010pc30, s5k6aa, sr030pc30 and vs6624
    
     - New i.MX8 image sensor interface driver
    
     - Some new RC keymaps
    
     - lots of cleanups at atomisp driver to make it support standard
       features present on other webcam drivers
    
     - the cx18 and saa7146 now uses VB2
    
     - lots of cleanups and driver improvements
    
    * tag 'media/v6.4-1' of git://git.kernel.org/pub/scm/linux/kernel/git/mchehab/linux-media: (460 commits)
      media: ov5670: Fix probe on ACPI
      media: nxp: imx8-isi: Remove 300ms sleep after enabling channel
      media: nxp: imx8-isi: Replace udelay() with fsleep()
      media: nxp: imx8-isi: Drop partial support for i.MX8QM and i.MX8QXP
      media: nxp: Add i.MX8 ISI driver
      media: dt-bindings: media: Add i.MX8 ISI DT bindings
      media: atomisp: gmin_platform: Add Lenovo Ideapad Miix 310 gmin_vars
      media: atomisp: gmin_platform: Make DMI quirks take precedence over the _DSM table
      media: atomisp: Remove struct atomisp_sub_device index field
      media: atomisp: Drop support for streaming from 2 sensors at once
      media: atomisp: Remove atomisp_try_fmt() call from atomisp_set_fmt()
      media: atomisp: Remove unused ATOM_ISP_MAX_WIDTH_TMP and ATOM_ISP_MAX_HEIGHT_TMP
      media: atomisp: Remove snr_mbus_fmt local var from atomisp_try_fmt()
      media: atomisp: Remove custom V4L2_CID_FMT_AUTO control
      media: atomisp: Remove continuous mode related code from atomisp_set_fmt()
      media: atomisp: Remove duplicate atomisp_[start|stop]_streaming() prototypes
      media: atomisp: gc0310: Switch over to ACPI powermanagement
      media: atomisp: gc0310: Use devm_kzalloc() for data struct
      media: atomisp: gc0310: Add runtime-pm support
      media: atomisp: gc0310: Delay power-on till streaming is started
      ...

commit c8cc58e289ed3b5bc50258f52776cf3dfa3bad66
Merge: 736b378b29d8 289af45508ca
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 16:12:15 2023 -0700

    Merge tag 'drm-next-2023-04-24' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm updates from Dave Airlie:
     "There is a new Qualcomm accel driver for their QAIC, dma-fence got a
      deadline feature added, lots of refactoring around fbdev emulation,
      and the usual pre-release hw enablements from AMD and Intel and fixes
      everywhere.
    
      New drivers:
       - add QAIC acceleration driver
    
      dma-buf:
       - constify kobj_type structs
       - Reject prime DMA-Buf attachment if get_sg_table is missing.
    
      fbdev:
       - cmdline parser fixes
       - implement fbdev emulation for GEM DMA drivers
       - always use shadow buffer in fbdev emulation helpers
    
      dma-fence:
       - add deadline hint to fences
       - signal private stub fence
    
      core:
       - improve DisplayID 2.0 and EDID parsing
       - add gem eviction function + callback
       - prep to convert shmem helper to GEM resv lock
       - move suballocator from radeon/amdgpu to core for Xe
       - HPD polling fixes
       - Documentation improvements
       - Add atomic enable_plane callback
       - use tgid instead of pid for client tracking
       - DP: Add SDP Error Detection Configuration Register
       - Add prime import/export to vram-helper
       - use pci aperture helpers in more drivers
    
      panel:
       - Radxa 8/10HD support
       - Samsung AMD495QA01 support
       - Elida KD50T048A
       - Sony TD4353
       - Novatek NT36523
       - STARRY 2081101QFH032011-53G
       - B133UAN01.0
       - AUO NE135FBM-N41
    
      i915:
       - More MTL enabling
       - fix s/r problems with MEI/PXP
       - Implement fb_dirty for PSR,FBC,DRRS fixes
       - Fix eDP+DSI dual panel systems
       - Fix issue #6333: "list_add corruption" and full system lockup from
         performance monitoring
       - Don't use stolen memory or BAR for ring buffers on LLC platforms
       - Make sure DSM size has correct 1MiB granularity on Gen12+
       - Whitelist COMMON_SLICE_CHICKEN3 for UMD access on Gen12+
       - Add engine TLB invalidation for Meteorlake
       - Fix GSC races on driver load/unload on Meteorlake+
       - Make kobj_type structures constant
       - Move fd_install after last use of fence
       - wm/vblank refactoring
       - display code refactoring
       - Create GSC submission targeting HDCP and PXP usages on MTL+
       - Enable HDCP2.x via GSC CS
       - Fix context runtime accounting on sysfs fdinfo for heavy workloads
       - Use i915 instead of dev_priv insied the file_priv structure
       - Replace fake flex-array with flexible-array member
    
      amdgpu:
       - Make kobj structures const
       - Generalize dmabuf import to work with KFD
       - Add capped/uncapped workload handling for supported APUs
       - Expose additional memory stats via fdinfo
       - Register vga_switcheroo for apple-gmux
       - Initial NBIO7.9, GC 9.4.3, GFXHUB 1.2, MMHUB 1.8 support
       - Initial DC FAM infrastructure
       - Link DC backlight to connector device rather than PCI device
       - Add sysfs nodes for secondary VCN clocks
    
      amdkfd:
       - Make kobj structures const
       - Support for exporting buffers via dmabuf
       - Multi-VMA page migration fixes
       - initial GC 9.4.3 support
    
      radeon:
       - iMac fix
       - convert to client based fbdev emulation
    
      habanalabs:
       - Add opcodes to the CS ioctl to allow user to stall/resume specific
         engines inside Gaudi2.
       - INFO ioctl the amount of device memory that the driver and f/w
         reserve for themselves.
       - INFO ioctl a bit-mask of the available rotator engines
       - INFO ioctl the register's address of the f/w that should be used to
         trigger interrupts
       - INFO ioctl two new opcodes to fetch information on h/w and f/w
         events
       - Enable graceful reset mechanism for compute-reset.
       - Align to the latest firmware specs.
       - Enforce the release order of the compute device and dma-buf.
    
      msm:
       - UBWC decoder programming rework
       - SM8550, SM8450 bindings update
       - uapi C++ fix
       - a3xx and a4xx devfreq support
       - GPU and GEM updates to avoid allocations which could trigger
         reclaim (shrinker) in fence signaling path
       - dma-fence deadline hint support and wait-boost
       - a640/650 speed bin support
    
      cirrus:
       - convert to regular atomic helpers
       - add damage clipping
    
      mediatek:
       - 10-bit overlay support
       - mt8195 support
       - Only trigger DRM HPD events if bridge is attached
       - Change the aux retries times when receiving AUX_DEFER
    
      rockchip:
       - add 4K support
    
      vc4:
       - use drm_gem_objects
    
      virtio:
       - allow KMS support to be disabled
       - add damage clipping
    
      vmwgfx:
       - buffer object lifetime fixes
    
      exynos:
       - move MIPI DSI driver to drm bridge for iMX sharing
       - use kernel fbdev emulation
    
      panfrost:
       - add support for mali MT81xx devices
       - add speed binning support
    
      lima:
       - add usage stats
    
      tegra:
       - fbdev client conversion
    
      vkms:
       - Add primary plane positioning support"
    
    * tag 'drm-next-2023-04-24' of git://anongit.freedesktop.org/drm/drm: (1495 commits)
      drm/i915/dp_mst: Fix active port PLL selection for secondary MST streams
      drm/exynos: Implement fbdev emulation as in-kernel client
      drm/exynos: Initialize fbdev DRM client
      drm/exynos: Remove fb_helper from struct exynos_drm_private
      drm/exynos: Remove struct exynos_drm_fbdev
      drm/exynos: Remove exynos_gem from struct exynos_drm_fbdev
      drm/i915: Fix memory leaks in i915 selftests
      drm/i915: Make intel_get_crtc_new_encoder() less oopsy
      drm/i915/gt: Avoid out-of-bounds access when loading HuC
      drm/amdgpu: add some basic elements for multiple XCD case
      drm/amdgpu: move vmhub out of amdgpu_ring_funcs (v4)
      Revert "drm/amdgpu: enable ras for mp0 v13_0_10 on SRIOV"
      drm/amdgpu: add common ip block for GC 9.4.3
      drm/amd/display: Add logging when DP link training Clock recovery is Successful
      drm/amdgpu: add common early init support for GC 9.4.3
      drm/amdgpu: switch to v9_4_3 gfx_funcs callbacks for GC 9.4.3
      drm/amd/display: Add logging when setting DP sink power state fails
      drm/amdkfd: Add gfx_target_version for GC 9.4.3
      drm/amdkfd: Enable HW_UPDATE_RPTR on GC 9.4.3
      drm/amdgpu: reserve the old gc_11_0_*_mes.bin
      ...

commit 736b378b29d89c8c3567fa4b2e948be5568aebb8
Merge: 11704531dde4 ed4cdfbeb873
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 13:00:41 2023 -0700

    Merge tag 'slab-for-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab
    
    Pull slab updates from Vlastimil Babka:
     "The main change is naturally the SLOB removal. Since its deprecation
      in 6.2 I've seen no complaints so hopefully SLUB_(TINY) works well for
      everyone and we can proceed.
    
      Besides the code cleanup, the main immediate benefit will be allowing
      kfree() family of function to work on kmem_cache_alloc() objects,
      which was incompatible with SLOB. This includes kfree_rcu() which had
      no kmem_cache_free_rcu() counterpart yet and now it shouldn't be
      necessary anymore.
    
      Besides that, there are several small code and comment improvements
      from Thomas, Thorsten and Vernon"
    
    * tag 'slab-for-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:
      mm/slab: document kfree() as allowed for kmem_cache_alloc() objects
      mm/slob: remove slob.c
      mm/slab: remove CONFIG_SLOB code from slab common code
      mm, pagemap: remove SLOB and SLQB from comments and documentation
      mm, page_flags: remove PG_slob_free
      mm/slob: remove CONFIG_SLOB
      mm/slub: fix help comment of SLUB_DEBUG
      mm: slub: make kobj_type structure constant
      slab: Adjust comment after refactoring of gfp.h

commit 11704531dde45bc667a411e1c76de81d9f4481b8
Merge: 7ec85f3e089a c9c8133080c7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 12:51:51 2023 -0700

    Merge tag 'livepatching-for-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/livepatching/livepatching
    
    Pull livepatching updates from Petr Mladek:
    
     - Code and documentation cleanup
    
    * tag 'livepatching-for-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/livepatching/livepatching:
      livepatch: Make kobj_type structures constant
      livepatch: fix ELF typos

commit 7ec85f3e089aa423a69559bf4555b6218b5a2ef7
Merge: df45da57cbd3 bee43904dc77
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 12:46:48 2023 -0700

    Merge tag 'printk-for-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/printk/linux
    
    Pull printk updates from Petr Mladek:
    
     - Code cleanup and dead code removal
    
    * tag 'printk-for-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/printk/linux:
      printk: Remove obsoleted check for non-existent "user" object
      lib/vsprintf: Use isodigit() for the octal number check
      Remove orphaned CONFIG_PRINTK_SAFE_LOG_BUF_SHIFT

commit df45da57cbd35715d590a36a12968a94508ccd1f
Merge: 53b5e72b9d89 eeb3557cc188
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 12:39:01 2023 -0700

    Merge tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux
    
    Pull arm64 updates from Will Deacon:
     "ACPI:
    
       - Improve error reporting when failing to manage SDEI on AGDI device
         removal
    
      Assembly routines:
    
       - Improve register constraints so that the compiler can make use of
         the zero register instead of moving an immediate #0 into a GPR
    
       - Allow the compiler to allocate the registers used for CAS
         instructions
    
      CPU features and system registers:
    
       - Cleanups to the way in which CPU features are identified from the
         ID register fields
    
       - Extend system register definition generation to handle Enum types
         when defining shared register fields
    
       - Generate definitions for new _EL2 registers and add new fields for
         ID_AA64PFR1_EL1
    
       - Allow SVE to be disabled separately from SME on the kernel
         command-line
    
      Tracing:
    
       - Support for "direct calls" in ftrace, which enables BPF tracing for
         arm64
    
      Kdump:
    
       - Don't bother unmapping the crashkernel from the linear mapping,
         which then allows us to use huge (block) mappings and reduce TLB
         pressure when a crashkernel is loaded.
    
      Memory management:
    
       - Try again to remove data cache invalidation from the coherent DMA
         allocation path
    
       - Simplify the fixmap code by mapping at page granularity
    
       - Allow the kfence pool to be allocated early, preventing the rest of
         the linear mapping from being forced to page granularity
    
      Perf and PMU:
    
       - Move CPU PMU code out to drivers/perf/ where it can be reused by
         the 32-bit ARM architecture when running on ARMv8 CPUs
    
       - Fix race between CPU PMU probing and pKVM host de-privilege
    
       - Add support for Apple M2 CPU PMU
    
       - Adjust the generic PERF_COUNT_HW_BRANCH_INSTRUCTIONS event
         dynamically, depending on what the CPU actually supports
    
       - Minor fixes and cleanups to system PMU drivers
    
      Stack tracing:
    
       - Use the XPACLRI instruction to strip PAC from pointers, rather than
         rolling our own function in C
    
       - Remove redundant PAC removal for toolchains that handle this in
         their builtins
    
       - Make backtracing more resilient in the face of instrumentation
    
      Miscellaneous:
    
       - Fix single-step with KGDB
    
       - Remove harmless warning when 'nokaslr' is passed on the kernel
         command-line
    
       - Minor fixes and cleanups across the board"
    
    * tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux: (72 commits)
      KVM: arm64: Ensure CPU PMU probes before pKVM host de-privilege
      arm64: kexec: include reboot.h
      arm64: delete dead code in this_cpu_set_vectors()
      arm64/cpufeature: Use helper macro to specify ID register for capabilites
      drivers/perf: hisi: add NULL check for name
      drivers/perf: hisi: Remove redundant initialized of pmu->name
      arm64/cpufeature: Consistently use symbolic constants for min_field_value
      arm64/cpufeature: Pull out helper for CPUID register definitions
      arm64/sysreg: Convert HFGITR_EL2 to automatic generation
      ACPI: AGDI: Improve error reporting for problems during .remove()
      arm64: kernel: Fix kernel warning when nokaslr is passed to commandline
      perf/arm-cmn: Fix port detection for CMN-700
      arm64: kgdb: Set PSTATE.SS to 1 to re-enable single-step
      arm64: move PAC masks to <asm/pointer_auth.h>
      arm64: use XPACLRI to strip PAC
      arm64: avoid redundant PAC stripping in __builtin_return_address()
      arm64/sme: Fix some comments of ARM SME
      arm64/signal: Alloc tpidr2 sigframe after checking system_supports_tpidr2()
      arm64/signal: Use system_supports_tpidr2() to check TPIDR2
      arm64/idreg: Don't disable SME when disabling SVE
      ...

commit 53b5e72b9d89853b7e622239676163ede52acffe
Merge: d53c3eaaef6a 73afb20716e1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 12:22:11 2023 -0700

    Merge tag 'asm-generic-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/arnd/asm-generic
    
    Pull asm-generic updates from Arnd Bergmann:
     "These are various cleanups, fixing a number of uapi header files to no
      longer reference CONFIG_* symbols, and one patch that introduces the
      new CONFIG_HAS_IOPORT symbol for architectures that provide working
      inb()/outb() macros, as a preparation for adding driver dependencies
      on those in the following release"
    
    * tag 'asm-generic-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/arnd/asm-generic:
      Kconfig: introduce HAS_IOPORT option and select it as necessary
      scripts: Update the CONFIG_* ignore list in headers_install.sh
      pktcdvd: Remove CONFIG_CDROM_PKTCDVD_WCACHE from uapi header
      Move bp_type_idx to include/linux/hw_breakpoint.h
      Move ep_take_care_of_epollwakeup() to fs/eventpoll.c
      Move COMPAT_ATM_ADDPARTY to net/atm/svc.c

commit d53c3eaaef6a05fec04e8b5990d97d7216eb5e42
Merge: 672d2dae1901 b8a4346d2502
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 12:11:54 2023 -0700

    Merge tag 'soc-dt-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC devicetree updates from Arnd Bergmann:
     "The devicetree changes overall are again dominated by the Qualcomm
      Snapdragon platform that weighs in at over 300 changesets, but there
      are many updates across other platforms as well, notably Mediatek,
      NXP, Rockchips, Renesas, TI, Samsung and ST Microelectronics. These
      all add new features for existing machines, as well as new machines
      and SoCs.
    
      The newly added SoCs are:
    
       - Allwinner T113-s, an Cortex-A7 based variant of the RISC-V based D1
         chip.
    
       - StarFive JH7110, a RISC-V SoC based on the Sifive U74 core like its
         JH7100 predecessor, but with additional CPU cores and a GPU.
    
       - Apple M2 as used in current Macbook Air/Pro and Mac Mini gets
         added, with comparable support as its M1 predecessor.
    
       - Unisoc UMS512 (Tiger T610) is a midrange smartphone SoC
    
       - Qualcomm IPQ5332 and IPQ9574 are Wi-Fi 7 networking SoCs, based on
         the Cortex-A53 and Cortex-A73 cores, respectively.
    
       - Qualcomm sa8775p is an automotive SoC derived from the Snapdragon
         family.
    
      Including the initial board support for the added SoC platforms, there
      are 52 new machines. The largest group are 19 boards industrial
      embedded boards based on the NXP i.MX6 (32-bit) and i.MX8 (64-bit)
      families.
    
      Others include:
    
       - Two boards based on the Allwinner f1c200s ultra-low-cost chip
    
       - Three 'Banana Pi' variants based on the Amlogic g12b (A311D, S922X)
         SoC.
    
       - The Gl.Inet mv1000 router based on Marvell Armada 3720
    
       - A Wifi/LTE Dongle based on Qualcomm msm8916
    
       - Two robotics boards based on Qualcomm QRB chips
    
       - Three Snapdragon based phones made by Xiaomi
    
       - Five developments boards based on various Rockchip SoCs, including
         the rk3588s-khadas-edge2 and a few NanoPi models
    
       - The AM625 Beagleplay industrial SBC
    
      Another 14 machines get removed: both boards for the obsolete 'oxnas'
      platform, three boards for the Renesas r8a77950 SoC that were only for
      pre-production chips, and various chromebook models based on the
      Qualcomm Sc7180 'trogdor' design that were never part of products"
    
    * tag 'soc-dt-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc: (836 commits)
      arm64: dts: rockchip: Add support for volume keys to rk3399-pinephone-pro
      arm64: dts: rockchip: Add vdd_cpu_big regulators to rk3588-rock-5b
      arm64: dts: rockchip: Use generic name for es8316 on Pinebook Pro and Rock 5B
      arm64: dts: rockchip: Drop RTC clock-frequency on rk3588-rock-5b
      arm64: dts: apple: t8112: Add PWM controller
      arm64: dts: apple: t600x: Add PWM controller
      arm64: dts: apple: t8103: Add PWM controller
      arm64: dts: rockchip: Add pinctrl gpio-ranges for rk356x
      ARM: dts: nomadik: Replace deprecated spi-gpio properties
      ARM: dts: aspeed-g6: Add UDMA node
      ARM: dts: aspeed: greatlakes: add mctp device
      ARM: dts: aspeed: greatlakes: Add gpio names
      ARM: dts: aspeed: p10bmc: Change power supply info
      arm64: dts: mediatek: mt6795-xperia-m5: Add Bosch BMM050 Magnetometer
      arm64: dts: mediatek: mt6795-xperia-m5: Add Bosch BMA255 Accelerometer
      arm64: dts: mediatek: mt6795: Add tertiary PWM node
      arm64: dts: rockchip: add panel to Anbernic RG353 series
      dt-bindings: arm: Add Data Modul i.MX8M Plus eDM SBC
      dt-bindings: arm: fsl: Add chargebyte Tarragon
      dt-bindings: vendor-prefixes: add chargebyte
      ...

commit 672d2dae19012cb2c40fdf36711ee3b5f5420724
Merge: a90704773247 2c25b94f881c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 12:09:54 2023 -0700

    Merge tag 'soc-defconfig-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC defconfig updates from Arnd Bergmann:
     "Most of the changes just enable additional device drivers that were
      added or that are often used on major platforms.
    
      The virtconfig added last time now disables additional drivers to
      shrink kernels for virtual machines.
    
      The obsolete oxnas_v6_defconfig file is removed in turn"
    
    * tag 'soc-defconfig-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc: (33 commits)
      ARM: config: Update Vexpress defconfig
      arm64: defconfig: enable building the nvmem-reboot-mode module
      arm64: defconfig: Enable TI ADC driver
      arm64: defconfig: Enable TI TSCADC driver
      arm64: defconfig: Enable security accelerator driver for TI K3 SoCs
      arm64: defconfig: Enable crypto test module
      ARM: multi_v7_defconfig: Add OPTEE support
      ARM: configs: Update U8500 defconfig
      ARM: imx_v4_v5_defconfig: Build CONFIG_IMX_SDMA as module
      arm64: defconfig: Enable IPQ9574 SoC base configs
      ARM: imx_v6_v7_defconfig: Enable Tarragon peripheral drivers
      arm64: defconfig: Enable ARM CoreSight PMU driver
      arm64: defconfig: remove duplicate TYPEC_UCSI & QCOM_PMIC_GLINK
      ARM: configs: remove oxnas_v6_defconfig
      arm64: defconfig: Enable audio drivers for AM62-SK
      arm64: defconfig: Enable drivers for BeaglePlay
      ARM: imx_v6_v7_defconfig: Select CONFIG_DRM_I2C_NXP_TDA998X
      arm64: defconfig: Enable Virtio RNG driver as built in
      arm64: defconfig: Enable CAN PHY transceiver driver
      arm64: defconfig: add PMIC GLINK modules
      ...

commit a907047732470f75f3b7c9a8ee09b16765b8364c
Merge: 18032df5ef5c 4c87f3ff78b2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 12:02:16 2023 -0700

    Merge tag 'soc-drivers-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC driver updates from Arnd Bergmann:
     "The most notable updates this time are for Qualcomm Snapdragon
      platforms. The Inline-Crypto-Engine gets a new DT binding and driver,
      and a number of drivers now support additional Snapdragon variants, in
      particular the rsc, scm, geni, bwm, glink and socinfo, while the llcc
      (edac) and rpm drivers get notable functionality updates.
    
      Updates on other platforms include:
    
       - Various updates to the Mediatek mutex and mmsys drivers, including
         support for the Helio X10 SoC
    
       - Support for unidirectional mailbox channels in Arm SCMI firmware
    
       - Support for per cpu asynchronous notification in OP-TEE firmware
    
       - Minor updates for memory controller drivers.
    
       - Minor updates for Renesas, TI, Amlogic, Apple, Broadcom, Tegra,
         Allwinner, Versatile Express, Canaan, Microchip, Mediatek and i.MX
         SoC drivers, mainly updating the use of MODULE_LICENSE() macros and
         obsolete DT driver interfaces"
    
    * tag 'soc-drivers-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc: (165 commits)
      soc: ti: smartreflex: Simplify getting the opam_sr pointer
      bus: vexpress-config: Add explicit of_platform.h include
      soc: mediatek: Kconfig: Add MTK_CMDQ dependency to MTK_MMSYS
      memory: mtk-smi: mt8365: Add SMI Support
      dt-bindings: memory-controllers: mediatek,smi-larb: add mt8365
      dt-bindings: memory-controllers: mediatek,smi-common: add mt8365
      memory: tegra: read values from correct device
      dt-bindings: crypto: Add Qualcomm Inline Crypto Engine
      soc: qcom: Make the Qualcomm UFS/SDCC ICE a dedicated driver
      dt-bindings: firmware: document Qualcomm QCM2290 SCM
      soc: qcom: rpmh-rsc: Support RSC v3 minor versions
      soc: qcom: smd-rpm: Use GFP_ATOMIC in write path
      soc/tegra: fuse: Remove nvmem root only access
      soc/tegra: cbb: tegra194: Use of_address_count() helper
      soc/tegra: cbb: Remove MODULE_LICENSE in non-modules
      ARM: tegra: Remove MODULE_LICENSE in non-modules
      soc/tegra: flowctrl: Use devm_platform_get_and_ioremap_resource()
      soc: tegra: cbb: Drop empty platform remove function
      firmware: arm_scmi: Add support for unidirectional mailbox channels
      dt-bindings: firmware: arm,scmi: Support mailboxes unidirectional channels
      ...

commit 18032df5ef5c0eec2adf120142bd95a3a8807866
Merge: de10553fce40 bd2c0c4452ee
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 11:53:09 2023 -0700

    Merge tag 'soc-arm-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC updates from Arnd Bergmann:
     "The Oxford Semiconductor OX810/OX820 'Oxnas' platform gets retired
      after the ARM11MPcore processor keeps causing problems in certain
      corner cases. OX820 was the only remaining SoC with this core after
      CNS3xxx got retired, and its driver support was never completely
      merged upstream. The Arm 'Realview' reference platform still supports
      ARM11MPCore in principle, but this was never a product, and the CPU
      support will get cleaned up later on.
    
      Another series updates the mv78xx0 platform, which has been similarly
      neglected for a while, but should work properly again now.
    
      The other changes are minor cleanups across platforms, mostly
      converting code to more modern interfaces for DT nodes and removing
      some more code as a follow-up to the large-scale platform removal in
      linux-6.3"
    
    * tag 'soc-arm-6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc: (28 commits)
      ARM: mv78xx0: fix entries for gpios, buttons and usb ports
      ARM: mv78xx0: add code to enable XOR and CRYPTO engines on mv78xx0
      ARM: mv78xx0: set the correct driver for the i2c RTC
      ARM: mv78xx0: adjust init logic for ts-wxl to reflect single core dev
      soc: fsl: Use of_property_present() for testing DT property presence
      ARM: pxa: Use of_property_read_bool() for boolean properties
      firmware: turris-mox-rwtm: make kobj_type structure constant
      ARM: oxnas: remove OXNAS support
      ARM: sh-mobile: Use of_cpu_node_to_id() to read CPU node 'reg'
      ARM: OMAP2+: hwmod: Use kzalloc for allocating only one element
      ARM: OMAP2+: Remove the unneeded result variable
      ARM: OMAP2+: fix repeated words in comments
      ARM: OMAP2+: remove obsolete config OMAP3_SDRC_AC_TIMING
      ARM: OMAP2+: Use of_address_to_resource()
      ARM: OMAP2+: Use of_property_read_bool() for boolean properties
      ARM: omap1: remove redundant variables err
      ARM: omap1: Kconfig: Fix indentation
      ARM: bcm: Use of_address_to_resource()
      ARM: mstar: remove unused config MACH_MERCURY
      ARM: spear: remove obsolete config MACH_SPEAR600
      ...

commit de10553fce40797313f980301af45e7398e422ca
Merge: e7989789c686 5af507bef93c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 11:39:45 2023 -0700

    Merge tag 'x86-apic-2023-04-24' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 APIC updates from Thomas Gleixner:
    
     - Fix the incorrect handling of atomic offset updates in
       reserve_eilvt_offset()
    
       The check for the return value of atomic_cmpxchg() is not compared
       against the old value, it is compared against the new value, which
       makes it two round on success.
    
       Convert it to atomic_try_cmpxchg() which does the right thing.
    
     - Handle IO/APIC less systems correctly
    
       When IO/APIC is not advertised by ACPI then the computation of the
       lower bound for dynamically allocated interrupts like MSI goes wrong.
    
       This lower bound is used to exclude the IO/APIC legacy GSI space as
       that must stay reserved for the legacy interrupts.
    
       In case that the system, e.g. VM, does not advertise an IO/APIC the
       lower bound stays at 0.
    
       0 is an invalid interrupt number except for the legacy timer
       interrupt on x86. The return value is unchecked in the core code, so
       it ends up to allocate interrupt number 0 which is subsequently
       considered to be invalid by the caller, e.g. the MSI allocation code.
    
       A similar problem was already cured for device tree based systems
       years ago, but that missed - or did not envision - the zero IO/APIC
       case.
    
       Consolidate the zero check and return the provided "from" argument to
       the core code call site, which is guaranteed to be greater than 0.
    
     - Simplify the X2APIC cluster CPU mask logic for CPU hotplug
    
       Per cluster CPU masks are required for X2APIC in cluster mode to
       determine the correct cluster for a target CPU when calculating the
       destination for IPIs
    
       These masks are established when CPUs are borught up. The first CPU
       in a cluster must allocate a new cluster CPU mask. As this happens
       during the early startup of a CPU, where memory allocations cannot be
       done, the mask has to be allocated by the control CPU.
    
       The current implementation allocates a clustermask just in case and
       if the to be brought up CPU is the first in a cluster the CPU takes
       over this allocation from a global pointer.
    
       This works nicely in the fully serialized CPU bringup scenario which
       is used today, but would fail completely for parallel bringup of
       CPUs.
    
       The cluster association of a CPU can be computed from the APIC ID
       which is enumerated by ACPI/MADT.
    
       So the cluster CPU masks can be preallocated and associated upfront
       and the upcoming CPUs just need to set their corresponding bit.
    
       Aside of preparing for parallel bringup this is a valuable
       simplification on its own.
    
     - Remove global variables which control the early startup of secondary
       CPUs on 64-bit
    
       The only information which is needed by a starting CPU is the Linux
       CPU number. The CPU number allows it to retrieve the rest of the
       required data from already existing per CPU storage.
    
       So instead of initial_stack, early_gdt_desciptor and initial_gs
       provide a new variable smpboot_control which contains the Linux CPU
       number for now. The starting CPU can retrieve and compute all
       required information for startup from there.
    
       Aside of being a cleanup, this is also preparing for parallel CPU
       bringup, where starting CPUs will look up their Linux CPU number via
       the APIC ID, when smpboot_control has the corresponding control bit
       set.
    
     - Make cc_vendor globally accesible
    
       Subsequent parallel bringup changes require access to cc_vendor
       because confidental computing platforms need special treatment in the
       early startup phase vs. CPUID and APCI ID readouts.
    
       The change makes cc_vendor global and provides stub accessors in case
       that CONFIG_ARCH_HAS_CC_PLATFORM is not set.
    
       This was merged from the x86/cc branch in anticipation of further
       parallel bringup commits which require access to cc_vendor. Due to
       late discoveries of fundamental issue with those patches these
       commits never happened.
    
       The merge commit is unfortunately in the middle of the APIC commits
       so unraveling it would have required a rebase or revert. As the
       parallel bringup seems to be well on its way for 6.5 this would be
       just pointless churn. As the commit does not contain any functional
       change it's not a risk to keep it.
    
    * tag 'x86-apic-2023-04-24' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/ioapic: Don't return 0 from arch_dynirq_lower_bound()
      x86/apic: Fix atomic update of offset in reserve_eilvt_offset()
      x86/coco: Export cc_vendor
      x86/smpboot: Reference count on smpboot_setup_warm_reset_vector()
      x86/smpboot: Remove initial_gs
      x86/smpboot: Remove early_gdt_descr on 64-bit
      x86/smpboot: Remove initial_stack on 64-bit
      x86/apic/x2apic: Allow CPU cluster_mask to be populated in parallel

commit e7989789c686e83f032acf2c4363c2c153876b96
Merge: 3f614ab563c4 f7abf14f0001
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 11:22:46 2023 -0700

    Merge tag 'timers-core-2023-04-24' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull timers and timekeeping updates from Thomas Gleixner:
    
     - Improve the VDSO build time checks to cover all dynamic relocations
    
       VDSO does not allow dynamic relocations, but the build time check is
       incomplete and fragile.
    
       It's based on architectures specifying the relocation types to search
       for and does not handle R_*_NONE relocation entries correctly.
       R_*_NONE relocations are injected by some GNU ld variants if they
       fail to determine the exact .rel[a]/dyn_size to cover trailing zeros.
       R_*_NONE relocations must be ignored by dynamic loaders, so they
       should be ignored in the build time check too.
    
       Remove the architecture specific relocation types to check for and
       validate strictly that no other relocations than R_*_NONE end up in
       the VSDO .so file.
    
     - Prefer signal delivery to the current thread for
       CLOCK_PROCESS_CPUTIME_ID based posix-timers
    
       Such timers prefer to deliver the signal to the main thread of a
       process even if the context in which the timer expires is the current
       task. This has the downside that it might wake up an idle thread.
    
       As there is no requirement or guarantee that the signal has to be
       delivered to the main thread, avoid this by preferring the current
       task if it is part of the thread group which shares sighand.
    
       This not only avoids waking idle threads, it also distributes the
       signal delivery in case of multiple timers firing in the context of
       different threads close to each other better.
    
     - Align the tick period properly (again)
    
       For a long time the tick was starting at CLOCK_MONOTONIC zero, which
       allowed users space applications to either align with the tick or to
       place a periodic computation so that it does not interfere with the
       tick. The alignement of the tick period was more by chance than by
       intention as the tick is set up before a high resolution clocksource
       is installed, i.e. timekeeping is still tick based and the tick
       period advances from there.
    
       The early enablement of sched_clock() broke this alignement as the
       time accumulated by sched_clock() is taken into account when
       timekeeping is initialized. So the base value now(CLOCK_MONOTONIC) is
       not longer a multiple of tick periods, which breaks applications
       which relied on that behaviour.
    
       Cure this by aligning the tick starting point to the next multiple of
       tick periods, i.e 1000ms/CONFIG_HZ.
    
     - A set of NOHZ fixes and enhancements:
    
         * Cure the concurrent writer race for idle and IO sleeptime
           statistics
    
           The statitic values which are exposed via /proc/stat are updated
           from the CPU local idle exit and remotely by cpufreq, but that
           happens without any form of serialization. As a consequence
           sleeptimes can be accounted twice or worse.
    
           Prevent this by restricting the accumulation writeback to the CPU
           local idle exit and let the remote access compute the accumulated
           value.
    
         * Protect idle/iowait sleep time with a sequence count
    
           Reading idle/iowait sleep time, e.g. from /proc/stat, can race
           with idle exit updates. As a consequence the readout may result
           in random and potentially going backwards values.
    
           Protect this by a sequence count, which fixes the idle time
           statistics issue, but cannot fix the iowait time problem because
           iowait time accounting races with remote wake ups decrementing
           the remote runqueues nr_iowait counter. The latter is impossible
           to fix, so the only way to deal with that is to document it
           properly and to remove the assertion in the selftest which
           triggers occasionally due to that.
    
         * Restructure struct tick_sched for better cache layout
    
         * Some small cleanups and a better cache layout for struct
           tick_sched
    
     - Implement the missing timer_wait_running() callback for POSIX CPU
       timers
    
       For unknown reason the introduction of the timer_wait_running()
       callback missed to fixup posix CPU timers, which went unnoticed for
       almost four years.
    
       While initially only targeted to prevent livelocks between a timer
       deletion and the timer expiry function on PREEMPT_RT enabled kernels,
       it turned out that fixing this for mainline is not as trivial as just
       implementing a stub similar to the hrtimer/timer callbacks.
    
       The reason is that for CONFIG_POSIX_CPU_TIMERS_TASK_WORK enabled
       systems there is a livelock issue independent of RT.
    
       CONFIG_POSIX_CPU_TIMERS_TASK_WORK=y moves the expiry of POSIX CPU
       timers out from hard interrupt context to task work, which is handled
       before returning to user space or to a VM. The expiry mechanism moves
       the expired timers to a stack local list head with sighand lock held.
       Once sighand is dropped the task can be preempted and a task which
       wants to delete a timer will spin-wait until the expiry task is
       scheduled back in. In the worst case this will end up in a livelock
       when the preempting task and the expiry task are pinned on the same
       CPU.
    
       The timer wheel has a timer_wait_running() mechanism for RT, which
       uses a per CPU timer-base expiry lock which is held by the expiry
       code and the task waiting for the timer function to complete blocks
       on that lock.
    
       This does not work in the same way for posix CPU timers as there is
       no timer base and expiry for process wide timers can run on any task
       belonging to that process, but the concept of waiting on an expiry
       lock can be used too in a slightly different way.
    
       Add a per task mutex to struct posix_cputimers_work, let the expiry
       task hold it accross the expiry function and let the deleting task
       which waits for the expiry to complete block on the mutex.
    
       In the non-contended case this results in an extra
       mutex_lock()/unlock() pair on both sides.
    
       This avoids spin-waiting on a task which is scheduled out, prevents
       the livelock and cures the problem for RT and !RT systems
    
    * tag 'timers-core-2023-04-24' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      posix-cpu-timers: Implement the missing timer_wait_running callback
      selftests/proc: Assert clock_gettime(CLOCK_BOOTTIME) VS /proc/uptime monotonicity
      selftests/proc: Remove idle time monotonicity assertions
      MAINTAINERS: Remove stale email address
      timers/nohz: Remove middle-function __tick_nohz_idle_stop_tick()
      timers/nohz: Add a comment about broken iowait counter update race
      timers/nohz: Protect idle/iowait sleep time under seqcount
      timers/nohz: Only ever update sleeptime from idle exit
      timers/nohz: Restructure and reshuffle struct tick_sched
      tick/common: Align tick period with the HZ tick.
      selftests/timers/posix_timers: Test delivery of signals across threads
      posix-timers: Prefer delivery of signals to the current thread
      vdso: Improve cmd_vdso_check to check all dynamic relocations

commit 3f614ab563c44fa443cbb6a7f355bdd04a5a4450
Merge: 15bbeec0fe9f f37202aa6e5d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 11:16:08 2023 -0700

    Merge tag 'irq-core-2023-04-24' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull interrupt updates from Thomas Gleixner:
     "Core:
    
       - Add tracepoints for tasklet callbacks which makes it possible to
         analyze individual tasklet functions instead of guess working from
         the overall duration of tasklet processing
    
       - Ensure that secondary interrupt threads have their affinity
         adjusted correctly
    
      Drivers:
    
       - A large rework of the RISC-V IPI management to prepare for a new
         RISC-V interrupt architecture
    
       - Small fixes and enhancements all over the place
    
       - Removal of support for various obsolete hardware platforms and the
         related code"
    
    * tag 'irq-core-2023-04-24' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (21 commits)
      irqchip/st: Remove stih415/stih416 and stid127 platforms support
      irqchip/gic-v3: Add Rockchip 3588001 erratum workaround
      genirq: Update affinity of secondary threads
      softirq: Add trace points for tasklet entry/exit
      irqchip/loongson-pch-pic: Fix pch_pic_acpi_init calling
      irqchip/loongson-pch-pic: Fix registration of syscore_ops
      irqchip/loongson-eiointc: Fix registration of syscore_ops
      irqchip/loongson-eiointc: Fix incorrect use of acpi_get_vec_parent
      irqchip/loongson-eiointc: Fix returned value on parsing MADT
      irqchip/riscv-intc: Add empty irq_eoi() for chained irq handlers
      RISC-V: Use IPIs for remote icache flush when possible
      RISC-V: Use IPIs for remote TLB flush when possible
      RISC-V: Allow marking IPIs as suitable for remote FENCEs
      RISC-V: Treat IPIs as normal Linux IRQs
      irqchip/riscv-intc: Allow drivers to directly discover INTC hwnode
      RISC-V: Clear SIP bit only when using SBI IPI operations
      irqchip/irq-sifive-plic: Add syscore callbacks for hibernation
      irqchip: Use of_property_read_bool() for boolean properties
      irqchip/bcm-6345-l1: Request memory region
      irqchip/gicv3: Workaround for NVIDIA erratum T241-FABRIC-4
      ...

commit 15bbeec0fe9f1e910cb6a173005a02b6b4582f3c
Merge: 29e95a4b2686 8c8fa605f7b8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 11:05:04 2023 -0700

    Merge tag 'core-entry-2023-04-24' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull core entry/ptrace update from Thomas Gleixner:
     "Provide a ptrace set/get interface for syscall user dispatch. The main
      purpose is to enable checkpoint/restore (CRIU) to handle processes
      which utilize syscall user dispatch correctly"
    
    * tag 'core-entry-2023-04-24' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      selftest, ptrace: Add selftest for syscall user dispatch config api
      ptrace: Provide set/get interface for syscall user dispatch
      syscall_user_dispatch: Untag selector address before access_ok()
      syscall_user_dispatch: Split up set_syscall_user_dispatch()

commit 29e95a4b2686b2cfb5564b3fb31371d5f71c6b66
Merge: bc1bb2a49bae 63a759694eed
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 11:00:45 2023 -0700

    Merge tag 'core-debugobjects-2023-04-24' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull core debugobjects update from Thomas Gleixner:
     "A single update to debugobjects:
    
      Prevent a race vs statically initialized objects. Such objects are
      usually not initialized via an init() function. They are special cased
      and detected on first use under the assumption that they are already
      correctly initialized via the static initializer.
    
      This works correctly unless there are two concurrent debug object
      operations on such an object.
    
      The first one detects that the object is not yet tracked and tries to
      establish a tracking object after dropping the debug objects hash
      bucket lock. The concurrent operation does the same. The one which
      wins the race ends up modifying the state of the object which makes
      the other one fail resulting in a bogus debug objects warning.
    
      Prevent this by making the detection of a static object and the
      allocation of a tracking object atomic under the hash bucket lock. So
      the first one to acquire the hash bucket lock will succeed and the
      second one will observe the correct tracking state.
    
      This race existed forever but was only exposed when the timer wheel
      code added a debug_object_assert_init() call outside of the timer base
      locked region. This replaced the previous warning about
      timer::function being NULL which had to be removed when the
      timer_shutdown() mechanics were added"
    
    * tag 'core-debugobjects-2023-04-24' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      debugobject: Prevent init race with static objects

commit bc1bb2a49bae915107fd58705edb1e32db92c635
Merge: c42b59bfaa00 812b0597fb40
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 10:48:08 2023 -0700

    Merge tag 'x86_sev_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 SEV updates from Borislav Petkov:
    
     - Add the necessary glue so that the kernel can run as a confidential
       SEV-SNP vTOM guest on Hyper-V. A vTOM guest basically splits the
       address space in two parts: encrypted and unencrypted. The use case
       being running unmodified guests on the Hyper-V confidential computing
       hypervisor
    
     - Double-buffer messages between the guest and the hardware PSP device
       so that no partial buffers are copied back'n'forth and thus potential
       message integrity and leak attacks are possible
    
     - Name the return value the sev-guest driver returns when the hw PSP
       device hasn't been called, explicitly
    
     - Cleanups
    
    * tag 'x86_sev_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/hyperv: Change vTOM handling to use standard coco mechanisms
      init: Call mem_encrypt_init() after Hyper-V hypercall init is done
      x86/mm: Handle decryption/re-encryption of bss_decrypted consistently
      Drivers: hv: Explicitly request decrypted in vmap_pfn() calls
      x86/hyperv: Reorder code to facilitate future work
      x86/ioremap: Add hypervisor callback for private MMIO mapping in coco VM
      x86/sev: Change snp_guest_issue_request()'s fw_err argument
      virt/coco/sev-guest: Double-buffer messages
      crypto: ccp: Get rid of __sev_platform_init_locked()'s local function pointer
      crypto: ccp - Name -1 return value as SEV_RET_NO_FW_CALL

commit c42b59bfaa0091833b6758be772c54ec7183daa5
Merge: 4a4a28fca696 11af36cb8981
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 10:32:51 2023 -0700

    Merge tag 'x86_paravirt_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 paravirt updates from Borislav Petkov:
    
     - Convert a couple of paravirt callbacks to asm to prevent
       '-fzero-call-used-regs' builds from zeroing live registers because
       paravirt hides the CALLs from the compiler so latter doesn't know
       there's a CALL in the first place
    
     - Merge two paravirt callbacks into one, as their functionality is
       identical
    
    * tag 'x86_paravirt_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/paravirt: Convert simple paravirt functions to asm
      x86/paravirt: Merge activate_mm() and dup_mmap() callbacks

commit 4a4a28fca6966ff2aee7d8313db6defcc8fcf70b
Merge: e3420f98f898 5910f06503aa
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 10:27:02 2023 -0700

    Merge tag 'x86_misc_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull misc x86 updates from Borislav Petkov:
    
     - Add a x86 hw vulnerabilities section to MAINTAINERS so that the folks
       involved in it can get CCed on patches
    
     - Add some more CPUID leafs to the kcpuid tool and extend its
       functionality to be more useful when grepping for CPUID bits
    
    * tag 'x86_misc_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      MAINTAINERS: Add x86 hardware vulnerabilities section
      tools/x86/kcpuid: Dump the CPUID function in detailed view
      tools/x86/kcpuid: Update AMD leaf Fn80000001
      tools/x86/kcpuid: Fix avx512bw and avx512lvl fields in Fn00000007

commit e3420f98f8984c4ffde72e6a877bccbcc9cad6b6
Merge: 1699dbebf31f 36168bc061b4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 10:20:52 2023 -0700

    Merge tag 'x86_cpu_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 cpu model updates from Borislav Petkov:
    
     - Add Emerald Rapids to the list of Intel models supporting PPIN
    
     - Finally use a CPUID bit for split lock detection instead of
       enumerating every model
    
     - Make sure automatic IBRS is set on AMD, even though the AP bringup
       code does that now by replicating the MSR which contains the switch
    
    * tag 'x86_cpu_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/cpu: Add Xeon Emerald Rapids to list of CPUs that support PPIN
      x86/split_lock: Enumerate architectural split lock disable bit
      x86/CPU/AMD: Make sure EFER[AIBRSE] is set

commit 1699dbebf31f0b26a8408d24da3c7f3b113f0340
Merge: d3464152e541 22767544e976
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 10:05:00 2023 -0700

    Merge tag 'x86_acpi_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull x86 ACPI update from Borislav Petkov:
    
     - Improve code generation in ACPI's global lock's acquisition function
    
    * tag 'x86_acpi_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/ACPI/boot: Improve __acpi_acquire_global_lock

commit d3464152e541b08fdc3c60664c01a28f8844a655
Merge: e94ee641f9ce 4c1cdec319b9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 09:56:33 2023 -0700

    Merge tag 'ras_core_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull RAS updates from Borislav Petkov:
    
     - Just cleanups and fixes this time around: make threshold_ktype const,
       an objtool fix and use proper size for a bitmap
    
    * tag 'ras_core_for_v6.4_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:
      x86/MCE/AMD: Use an u64 for bank_map
      x86/mce: Always inline old MCA stubs
      x86/MCE/AMD: Make kobj_type structure constant

commit e94ee641f9cef2502adfe5e0c264b271420c7ab5
Merge: f7301270a29f ce8ac91130b9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 09:44:07 2023 -0700

    Merge tag 'edac_updates_for_v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/ras/ras
    
    Pull EDAC updates from Borislav Petkov:
    
     - skx_edac: Fix overflow when decoding 32G DIMM ranks
    
     - i10nm_edac: Add Sierra Forest support
    
     - amd64_edac: Split driver code between legacy and SMCA systems. The
       final goal is adding support for more hw, like GPUs
    
     - The usual minor cleanups and fixes
    
    * tag 'edac_updates_for_v6.4' of git://git.kernel.org/pub/scm/linux/kernel/git/ras/ras: (25 commits)
      EDAC/i10nm: Add Intel Sierra Forest server support
      EDAC/amd64: Fix indentation in umc_determine_edac_cap()
      EDAC/altera: Remove MODULE_LICENSE in non-module
      EDAC: Sanitize MODULE_AUTHOR strings
      EDAC/amd81[13]1: Remove trailing newline from MODULE_AUTHOR
      EDAC/amd64: Add get_err_info() to pvt->ops
      EDAC/amd64: Split dump_misc_regs() into dct/umc functions
      EDAC/amd64: Split init_csrows() into dct/umc functions
      EDAC/amd64: Split determine_edac_cap() into dct/umc functions
      EDAC/amd64: Rename f17h_determine_edac_ctl_cap()
      EDAC/amd64: Split setup_mci_misc_attrs() into dct/umc functions
      EDAC/amd64: Split ecc_enabled() into dct/umc functions
      EDAC/amd64: Split read_mc_regs() into dct/umc functions
      EDAC/amd64: Split determine_memory_type() into dct/umc functions
      EDAC/amd64: Split read_base_mask() into dct/umc functions
      EDAC/amd64: Split prep_chip_selects() into dct/umc functions
      EDAC/amd64: Rework hw_info_{get,put}
      EDAC/amd64: Merge struct amd64_family_type into struct amd64_pvt
      EDAC/amd64: Do not discover ECC symbol size for Family 17h and later
      EDAC/amd64: Drop dbam_to_cs() for Family 17h and later
      ...

commit f7301270a29fb3b5b2f3ab73ef63a208e21f783a
Merge: 173ea743bf7a aaee8c7f2a17
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 25 09:37:43 2023 -0700

    Merge tag 'm68k-for-v6.4-tag1' of git://git.kernel.org/pub/scm/linux/kernel/git/geert/linux-m68k
    
    Pull m68k updates from Geert Uytterhoeven:
    
     - defconfig updates
    
     - miscellaneous fixes and improvements
    
    * tag 'm68k-for-v6.4-tag1' of git://git.kernel.org/pub/scm/linux/kernel/git/geert/linux-m68k:
      m68k: kexec: Include <linux/reboot.h>
      m68k: defconfig: Update defconfigs for v6.3-rc1
      m68k: Remove obsolete config NO_KERNEL_MSG
      nubus: Drop noop match function

commit cc5f6fa4f6590e3b9eb8d34302ea43af4a3cfed7
Author: Dhruva Gole <d-gole@ti.com>
Date:   Mon Apr 24 15:55:46 2023 +0530

    spi: bcm63xx: use macro DEFINE_SIMPLE_DEV_PM_OPS
    
    Using this macro makes the code more readable.
    It also inits the members of dev_pm_ops in the following manner
    without us explicitly needing to:
    
    .suspend = bcm63xx_spi_suspend, \
    .resume = bcm63xx_spi_resume, \
    .freeze = bcm63xx_spi_suspend, \
    .thaw = bcm63xx_spi_resume, \
    .poweroff = bcm63xx_spi_suspend, \
    .restore = bcm63xx_spi_resume
    
    Signed-off-by: Dhruva Gole <d-gole@ti.com>
    Link: https://lore.kernel.org/r/20230424102546.1604484-1-d-gole@ti.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

M	drivers/spi/spi-bcm63xx.c

commit cbfac7707ba16619006a4fd60faac46303fd2f3e
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Dec 16 14:49:18 2022 +0100

    xen/blkback: move blkif_get_x86_*_req() into blkback.c
    
    There is no need to have the functions blkif_get_x86_32_req() and
    blkif_get_x86_64_req() in a header file, as they are used in one place
    only.
    
    So move them into the using source file and drop the inline qualifier.
    
    While at it fix some style issues, and simplify the code by variable
    reusing and using min() instead of open coding it.
    
    Instead of using barrier() use READ_ONCE() for avoiding multiple reads
    of nr_segments.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>

M	drivers/block/xen-blkback/blkback.c
M	drivers/block/xen-blkback/common.h

commit e7b4c07d4b42676691f3c815f05c1bbf071dc718
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Dec 12 10:37:42 2022 +0100

    xen/blkback: simplify free_persistent_gnts() interface
    
    The interface of free_persistent_gnts() can be simplified, as there is
    only a single caller of free_persistent_gnts() and the 2nd and 3rd
    parameters are easily obtainable via the ring pointer, which is passed
    as the first parameter anyway.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>

M	drivers/block/xen-blkback/blkback.c

commit 656f3c1d7966ea65f9b51d17db3008ce5dbb4090
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Dec 12 09:43:28 2022 +0100

    xen/blkback: remove stale prototype
    
    There is no function xen_blkif_purge_persistent(), so remove its
    prototype from common.h.
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>

M	drivers/block/xen-blkback/common.h

commit 6935321eccf32555e6f7e6d29f4cccf84a5c1e3a
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Dec 12 09:41:34 2022 +0100

    xen/blkback: fix white space code style issues
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>

M	drivers/block/xen-blkback/blkback.c
M	drivers/block/xen-blkback/common.h

commit 644f6bf762fa903f64c59c2ec0f4d0d753527053
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Fri Apr 21 15:07:10 2023 -0400

    gfs2: gfs2_ail_empty_gl no log flush on error
    
    Before this patch, function gfs2_ail_empty_gl called gfs2_log_flush even
    in cases where it encountered an error. It should probably skip the log
    flush and leave the file system in an inconsistent state, letting a
    subsequent withdraw force the journal to be replayed to reestablish
    metadata consistency.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>

M	fs/gfs2/glops.c

commit b97e583caa25abf95695cd06d7f9512b484c6c01
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Fri Apr 21 15:07:09 2023 -0400

    gfs2: Issue message when revokes cannot be written
    
    Before this patch, function gfs2_ail_empty_gl would silently return an
    error to the caller. This would get silently set into sd_log_error which
    would cause a withdraw, but there was no indication why the file system
    was withdrawn. This patch adds a fs_err to log the appropriate error
    message.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>

M	fs/gfs2/glops.c

commit 68ca088dc1cfc4e366811b11ffe2954c6dcebca1
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Fri Apr 21 15:07:08 2023 -0400

    gfs2: Perform second log flush in gfs2_make_fs_ro
    
    Before this patch, function gfs2_make_fs_ro called gfs2_log_flush once to
    finalize the log. However, if there's dirty metadata, log flushes tend
    to sync the metadata and formulate revokes. Before this patch, those
    revokes may not be written out to the journal immediately, which meant
    unresolved glocks could still have revokes in their ail lists. When the
    glock worker runs, it tries to transition the glock, but the unresolved
    revokes in the ail still need to be written, so it tries to start a
    transaction. It's impossible to start a transaction because at that
    point, the SDF_JOURNAL_LIVE flag has been cleared by gfs2_make_fs_ro.
    That causes the glock worker to fail, unable to write the revokes. The
    calling sequence looked something like this:
    
    gfs2_make_fs_ro
       gfs2_log_flush - with GFS2_LOG_HEAD_FLUSH_SHUTDOWN flag set
            if (flags & GFS2_LOG_HEAD_FLUSH_SHUTDOWN)
                    clear_bit(SDF_JOURNAL_LIVE, &sdp->sd_flags);
    ...meanwhile...
    glock_work_func
       do_xmote
          rgrp_go_sync (or possibly inode_go_sync)
             ...
             gfs2_ail_empty_gl
                __gfs2_trans_begin
                   if (unlikely(!test_bit(SDF_JOURNAL_LIVE, &sdp->sd_flags))) {
                   ...
                      return -EROFS;
    
    The previous patch in the series ("gfs2: return errors from
    gfs2_ail_empty_gl") now causes the transaction error to no longer be
    ignored, so it causes a warning from MOST of the xfstests:
    
    WARNING: CPU: 11 PID: X at fs/gfs2/super.c:603 gfs2_put_super [gfs2]
    
    which corresponds to:
    
    WARN_ON(gfs2_withdrawing(sdp));
    
    The withdraw was triggered silently from do_xmote by:
    
            if (unlikely(sdp->sd_log_error && !gfs2_withdrawn(sdp)))
                    gfs2_withdraw_delayed(sdp);
    
    This patch adds a second log_flush to gfs2_make_fs_ro: one to sync the
    data and one to sync any outstanding revokes and finalize the journal.
    Note that both of these log flushes need to be "special," in other
    words, not GFS2_LOG_HEAD_FLUSH_NORMAL.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>

M	fs/gfs2/super.c

commit 24ab15829867a9cc09dfd16f41ed75aa8272a45f
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Fri Apr 21 15:07:07 2023 -0400

    gfs2: return errors from gfs2_ail_empty_gl
    
    Before this patch, function gfs2_ail_empty_gl did not return errors it
    encountered from __gfs2_trans_begin. Those errors usually came from the
    fact that the file system was made read-only, often due to unmount
    (but theoretically could be due to -o remount,ro), which prevented
    the transaction from starting.
    
    The inability to start a transaction prevented its revokes from being
    properly written to the journal for glocks during unmount (and
    transition to ro).
    
    That meant glocks could be unlocked without the metadata properly
    revoked in the journal. So other nodes could grab the glock thinking
    that their lvb values were correct, but in fact corresponded to the
    glock without its revokes properly synced. That presented as lvb
    mismatch errors.
    
    This patch allows gfs2_ail_empty_gl to return the error properly to
    the caller.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>

M	fs/gfs2/glops.c

commit 37386669887d3f2ccf021322c5558353d20f2387
Author: Basavaraj Natikar <Basavaraj.Natikar@amd.com>
Date:   Mon Apr 24 21:34:06 2023 +0530

    HID: amd_sfh: Fix max supported HID devices
    
    commit 4bd763568dbd ("HID: amd_sfh: Support for additional light sensor")
    adds additional sensor devices, but forgets to add the number of HID
    devices to match. Thus, the number of HID devices does not match the
    actual number of sensors.
    
    In order to prevent corruption and system hangs when more than the
    allowed number of HID devices are accessed, the number of HID devices is
    increased accordingly.
    
    Fixes: 4bd763568dbd ("HID: amd_sfh: Support for additional light sensor")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217354
    Signed-off-by: Basavaraj Natikar <Basavaraj.Natikar@amd.com>
    Link: https://lore.kernel.org/r/20230424160406.2579888-1-Basavaraj.Natikar@amd.com
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>

M	drivers/hid/amd-sfh-hid/amd_sfh_hid.h

commit 28b17f6270f182e22cdad5a0fdc4979031e4486a
Author: wuych <yunchuan@nfschina.com>
Date:   Tue Apr 25 13:15:32 2023 +0800

    net: phy: marvell-88x2222: remove unnecessary (void*) conversions
    
    Pointer variables of void * type do not require type cast.
    
    Signed-off-by: wuych <yunchuan@nfschina.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

M	drivers/net/phy/marvell-88x2222.c

commit 50749f2dd6854a41830996ad302aef2ffaf011d8
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Mon Apr 24 15:20:22 2023 -0700

    tcp/udp: Fix memleaks of sk and zerocopy skbs with TX timestamp.
    
    syzkaller reported [0] memory leaks of an UDP socket and ZEROCOPY
    skbs.  We can reproduce the problem with these sequences:
    
      sk = socket(AF_INET, SOCK_DGRAM, 0)
      sk.setsockopt(SOL_SOCKET, SO_TIMESTAMPING, SOF_TIMESTAMPING_TX_SOFTWARE)
      sk.setsockopt(SOL_SOCKET, SO_ZEROCOPY, 1)
      sk.sendto(b'', MSG_ZEROCOPY, ('127.0.0.1', 53))
      sk.close()
    
    sendmsg() calls msg_zerocopy_alloc(), which allocates a skb, sets
    skb->cb->ubuf.refcnt to 1, and calls sock_hold().  Here, struct
    ubuf_info_msgzc indirectly holds a refcnt of the socket.  When the
    skb is sent, __skb_tstamp_tx() clones it and puts the clone into
    the socket's error queue with the TX timestamp.
    
    When the original skb is received locally, skb_copy_ubufs() calls
    skb_unclone(), and pskb_expand_head() increments skb->cb->ubuf.refcnt.
    This additional count is decremented while freeing the skb, but struct
    ubuf_info_msgzc still has a refcnt, so __msg_zerocopy_callback() is
    not called.
    
    The last refcnt is not released unless we retrieve the TX timestamped
    skb by recvmsg().  Since we clear the error queue in inet_sock_destruct()
    after the socket's refcnt reaches 0, there is a circular dependency.
    If we close() the socket holding such skbs, we never call sock_put()
    and leak the count, sk, and skb.
    
    TCP has the same problem, and commit e0c8bccd40fc ("net: stream:
    purge sk_error_queue in sk_stream_kill_queues()") tried to fix it
    by calling skb_queue_purge() during close().  However, there is a
    small chance that skb queued in a qdisc or device could be put
    into the error queue after the skb_queue_purge() call.
    
    In __skb_tstamp_tx(), the cloned skb should not have a reference
    to the ubuf to remove the circular dependency, but skb_clone() does
    not call skb_copy_ubufs() for zerocopy skb.  So, we need to call
    skb_orphan_frags_rx() for the cloned skb to call skb_copy_ubufs().
    
    [0]:
    BUG: memory leak
    unreferenced object 0xffff88800c6d2d00 (size 1152):
      comm "syz-executor392", pid 264, jiffies 4294785440 (age 13.044s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 cd af e8 81 00 00 00 00  ................
        02 00 07 40 00 00 00 00 00 00 00 00 00 00 00 00  ...@............
      backtrace:
        [<0000000055636812>] sk_prot_alloc+0x64/0x2a0 net/core/sock.c:2024
        [<0000000054d77b7a>] sk_alloc+0x3b/0x800 net/core/sock.c:2083
        [<0000000066f3c7e0>] inet_create net/ipv4/af_inet.c:319 [inline]
        [<0000000066f3c7e0>] inet_create+0x31e/0xe40 net/ipv4/af_inet.c:245
        [<000000009b83af97>] __sock_create+0x2ab/0x550 net/socket.c:1515
        [<00000000b9b11231>] sock_create net/socket.c:1566 [inline]
        [<00000000b9b11231>] __sys_socket_create net/socket.c:1603 [inline]
        [<00000000b9b11231>] __sys_socket_create net/socket.c:1588 [inline]
        [<00000000b9b11231>] __sys_socket+0x138/0x250 net/socket.c:1636
        [<000000004fb45142>] __do_sys_socket net/socket.c:1649 [inline]
        [<000000004fb45142>] __se_sys_socket net/socket.c:1647 [inline]
        [<000000004fb45142>] __x64_sys_socket+0x73/0xb0 net/socket.c:1647
        [<0000000066999e0e>] do_syscall_x64 arch/x86/entry/common.c:50 [inline]
        [<0000000066999e0e>] do_syscall_64+0x38/0x90 arch/x86/entry/common.c:80
        [<0000000017f238c1>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    BUG: memory leak
    unreferenced object 0xffff888017633a00 (size 240):
      comm "syz-executor392", pid 264, jiffies 4294785440 (age 13.044s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 00 00 2d 6d 0c 80 88 ff ff  .........-m.....
      backtrace:
        [<000000002b1c4368>] __alloc_skb+0x229/0x320 net/core/skbuff.c:497
        [<00000000143579a6>] alloc_skb include/linux/skbuff.h:1265 [inline]
        [<00000000143579a6>] sock_omalloc+0xaa/0x190 net/core/sock.c:2596
        [<00000000be626478>] msg_zerocopy_alloc net/core/skbuff.c:1294 [inline]
        [<00000000be626478>] msg_zerocopy_realloc+0x1ce/0x7f0 net/core/skbuff.c:1370
        [<00000000cbfc9870>] __ip_append_data+0x2adf/0x3b30 net/ipv4/ip_output.c:1037
        [<0000000089869146>] ip_make_skb+0x26c/0x2e0 net/ipv4/ip_output.c:1652
        [<00000000098015c2>] udp_sendmsg+0x1bac/0x2390 net/ipv4/udp.c:1253
        [<0000000045e0e95e>] inet_sendmsg+0x10a/0x150 net/ipv4/af_inet.c:819
        [<000000008d31bfde>] sock_sendmsg_nosec net/socket.c:714 [inline]
        [<000000008d31bfde>] sock_sendmsg+0x141/0x190 net/socket.c:734
        [<0000000021e21aa4>] __sys_sendto+0x243/0x360 net/socket.c:2117
        [<00000000ac0af00c>] __do_sys_sendto net/socket.c:2129 [inline]
        [<00000000ac0af00c>] __se_sys_sendto net/socket.c:2125 [inline]
        [<00000000ac0af00c>] __x64_sys_sendto+0xe1/0x1c0 net/socket.c:2125
        [<0000000066999e0e>] do_syscall_x64 arch/x86/entry/common.c:50 [inline]
        [<0000000066999e0e>] do_syscall_64+0x38/0x90 arch/x86/entry/common.c:80
        [<0000000017f238c1>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: f214f915e7db ("tcp: enable MSG_ZEROCOPY")
    Fixes: b5947e5d1e71 ("udp: msg_zerocopy")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

M	net/core/skbuff.c

commit d325c34d9e7e38d371c0a299d415e9b07f66a1fb
Author: Gencen Gan <gangecen@hust.edu.cn>
Date:   Mon Apr 24 23:28:01 2023 +0800

    net: amd: Fix link leak when verifying config failed
    
    After failing to verify configuration, it returns directly without
    releasing link, which may cause memory leak.
    
    Paolo Abeni thinks that the whole code of this driver is quite
    "suboptimal" and looks unmainatained since at least ~15y, so he
    suggests that we could simply remove the whole driver, please
    take it into consideration.
    
    Simon Horman suggests that the fix label should be set to
    "Linux-2.6.12-rc2" considering that the problem has existed
    since the driver was introduced and the commit above doesn't
    seem to exist in net/net-next.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Gan Gecen <gangecen@hust.edu.cn>
    Reviewed-by: Dongliang Mu <dzm91@hust.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>

M	drivers/net/ethernet/amd/nmclan_cs.c

commit 73b41dc51fbeffa4a216b20193274cfe92b5d95b
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Wed Mar 29 15:57:50 2023 +0100

    media: ov5670: Fix probe on ACPI
    
    devm_clk_get() will return either an error or NULL, which the driver
    handles, continuing to use the clock of reading the value of the
    clock-frequency property.
    
    However, the value of ov5670->xvclk is left as-is and the other clock
    framework functions aren't capable of handling error values.
    
    Use devm_clk_get_optional() to obtain NULL instead of -ENOENT.
    
    Fixes: 8004c91e2095 ("media: i2c: ov5670: Use common clock framework")
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Jacopo Mondi <jacopo.mondi@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

M	drivers/media/i2c/ov5670.c

commit e5c23bec0f121b4160dc8ca61e751e734652bd05
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Thu Mar 23 11:22:59 2023 +0100

    sh: Replace <uapi/asm/types.h> by <asm-generic/int-ll64.h>
    
    As arch/sh/include/uapi/asm/types.h doesn't exist, sh doesn't provide
    any sh-specific uapi definitions, and it can just include
    <asm-generic/int-ll64.h>, like most other architectures.
    
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Reviewed-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Link: https://lore.kernel.org/r/26932016c83c2ad350db59f5daf96117a38bbbd8.1679566927.git.geert@linux-m68k.org
    Signed-off-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>

M	arch/sh/include/asm/types.h

commit 8bc6666f13fe1971cb870e5e0c3082435e3caa9c
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Mar 23 11:18:07 2023 +0100

    sh: Use generic GCC library routines
    
    The C implementations of __ashldi3(), __ashrdi3__(), and __lshrdi3() in
    arch/sh/lib/ are identical to the generic C implementations in lib/.
    Reduce duplication by switching SH to the generic versions.
    
    Update the include path in arch/sh/boot/compressed accordingly.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Palmer Dabbelt <palmer@rivosinc.com>
    Reviewed-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Link: https://lore.kernel.org/r/74dbe68dc8e2ffb6180092f73723fe21ab692c7a.1679566500.git.geert+renesas@glider.be
    Signed-off-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>

M	arch/sh/Kconfig
M	arch/sh/boot/compressed/ashldi3.c
M	arch/sh/lib/Makefile
D	arch/sh/lib/ashldi3.c
D	arch/sh/lib/ashrdi3.c
D	arch/sh/lib/lshrdi3.c

commit 173ea743bf7a9eef04460e03b00ba267cc52aee2
Merge: 181b69dd6e61 eb2317b13b18
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 19:43:32 2023 -0700

    Merge tag 'pull-nios2' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs
    
    Pull trivial nios2 cleanup from Al Viro.
    
    * tag 'pull-nios2' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:
      nios2: _TIF_ALLWORK_MASK is unused

commit 181b69dd6e61235b04742b473c23b00b731f62c3
Merge: 11b32219cba4 73bb5a9017b9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 19:38:34 2023 -0700

    Merge tag 'pull-misc' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs
    
    Pull misc vfs pile from Al Viro.
    
    Random minor cleanups.
    
    * tag 'pull-misc' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:
      fs: Fix description of vfs_tmpfile()
      sysv: switch to put_and_unmap_page()
      fs/sysv: Don't round down address for kunmap_flush_on_unmap()

commit 11b32219cba462b1e12cfd91069ba82574bc2dcc
Merge: 0e497ad52550 0aaf08de8426
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 19:28:49 2023 -0700

    Merge tag 'pull-old-dio' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs
    
    Pull legacy dio cleanup from Al Viro.
    
    * tag 'pull-old-dio' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:
      __blockdev_direct_IO(): get rid of submit_io callback

commit 0e497ad5255069b2d394168568790d26bbc8d365
Merge: ef36b9afc2ed 2d6831758271
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 19:20:27 2023 -0700

    Merge tag 'pull-write-one-page' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs
    
    Pull vfs write_one_page removal from Al Viro:
     "write_one_page series"
    
    * tag 'pull-write-one-page' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:
      mm,jfs: move write_one_page/folio_write_one to jfs
      ocfs2: don't use write_one_page in ocfs2_duplicate_clusters_by_page
      ufs: don't flush page immediately for DIRSYNC directories

commit ef36b9afc2edb0764cb3df7a1cb5e86406267b40
Merge: 61d325dcbc05 4a892c0fe4bb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 19:14:20 2023 -0700

    Merge tag 'pull-fd' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs
    
    Pull vfs fget updates from Al Viro:
     "fget() to fdget() conversions"
    
    * tag 'pull-fd' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:
      fuse_dev_ioctl(): switch to fdget()
      cgroup_get_from_fd(): switch to fdget_raw()
      bpf: switch to fdget_raw()
      build_mount_idmapped(): switch to fdget()
      kill the last remaining user of proc_ns_fget()
      SVM-SEV: convert the rest of fget() uses to fdget() in there
      convert sgx_set_attribute() to fdget()/fdput()
      convert setns(2) to fdget()/fdput()

commit 4774ad841bef97cc51df90195338c5b2573dd4cb
Author: Christian Marangi <ansuelsmth@gmail.com>
Date:   Sun Apr 23 19:28:00 2023 +0200

    net: phy: marvell: Fix inconsistent indenting in led_blink_set
    
    Fix inconsistent indeinting in m88e1318_led_blink_set reported by kernel
    test robot, probably done by the presence of an if condition dropped in
    later revision of the same code.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Link: https://lore.kernel.org/oe-kbuild-all/202304240007.0VEX8QYG-lkp@intel.com/
    Fixes: ea9e86485dec ("net: phy: marvell: Implement led_blink_set()")
    Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20230423172800.3470-1-ansuelsmth@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/phy/marvell.c

commit 700f11eb2cbea349bda2599b4b676b49d43b4175
Author: Horatiu Vultur <horatiu.vultur@microchip.com>
Date:   Sat Apr 22 16:23:44 2023 +0200

    lan966x: Don't use xdp_frame when action is XDP_TX
    
    When the action of an xdp program was XDP_TX, lan966x was creating
    a xdp_frame and use this one to send the frame back. But it is also
    possible to send back the frame without needing a xdp_frame, because
    it is possible to send it back using the page.
    And then once the frame is transmitted is possible to use directly
    page_pool_recycle_direct as lan966x is using page pools.
    This would save some CPU usage on this path, which results in higher
    number of transmitted frames. Bellow are the statistics:
    Frame size:    Improvement:
    64                ~8%
    256              ~11%
    512               ~8%
    1000              ~0%
    1500              ~0%
    
    Signed-off-by: Horatiu Vultur <horatiu.vultur@microchip.com>
    Reviewed-by: Alexander Lobakin <aleksander.lobakin@intel.com>
    Link: https://lore.kernel.org/r/20230422142344.3630602-1-horatiu.vultur@microchip.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/ethernet/microchip/lan966x/lan966x_fdma.c
M	drivers/net/ethernet/microchip/lan966x/lan966x_main.h
M	drivers/net/ethernet/microchip/lan966x/lan966x_xdp.c

commit ee3392ed16b064594a14ce5886e412efb05ed17b
Merge: 9610a8dc0aaa be7dbd275dc6
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Apr 24 18:45:11 2023 -0700

    Merge tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next
    
    Alexei Starovoitov says:
    
    ====================
    pull-request: bpf-next 2023-04-24
    
    We've added 5 non-merge commits during the last 3 day(s) which contain
    a total of 7 files changed, 87 insertions(+), 44 deletions(-).
    
    The main changes are:
    
    1) Workaround for bpf iter selftest due to lack of subprog support
       in precision tracking, from Andrii.
    
    2) Disable bpf_refcount_acquire kfunc until races are fixed, from Dave.
    
    3) One more test_verifier test converted from asm macro to asm in C,
       from Eduard.
    
    4) Fix build with NETFILTER=y INET=n config, from Florian.
    
    5) Add __rcu_read_{lock,unlock} into deny list, from Yafang.
    
    * tag 'for-netdev' of https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next:
      selftests/bpf: avoid mark_all_scalars_precise() trigger in one of iter tests
      bpf: Add __rcu_read_{lock,unlock} into btf id deny list
      bpf: Disable bpf_refcount_acquire kfunc calls until race conditions are fixed
      selftests/bpf: verifier/prevent_map_lookup converted to inline assembly
      bpf: fix link failure with NETFILTER=y INET=n
    ====================
    
    Link: https://lore.kernel.org/r/20230425005648.86714-1-alexei.starovoitov@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 9610a8dc0aaaf146630ff5566b5d8804fcd22d15
Merge: 938f65adc420 cd275c236b3f
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Apr 24 18:22:39 2023 -0700

    Merge branch 'tsnep-xdp-socket-zero-copy-support'
    
    Gerhard Engleder says:
    
    ====================
    tsnep: XDP socket zero-copy support
    
    Implement XDP socket zero-copy support for tsnep driver. I tried to
    follow existing drivers like igc as far as possible. But one main
    difference is that tsnep does not need any reconfiguration for XDP BPF
    program setup. So I decided to keep this behavior no matter if a XSK
    pool is used or not. As a result, tsnep starts using the XSK pool even
    if no XDP BPF program is available.
    
    Another difference is that I tried to prevent potentially failing
    allocations during XSK pool setup. E.g. both memory models for page pool
    and XSK pool are registered all the time. Thus, XSK pool setup cannot
    end up with not working queues.
    
    Some prework is done to reduce the last two XSK commits to actual XSK
    changes.
    ====================
    
    Link: https://lore.kernel.org/r/20230421194656.48063-1-gerhard@engleder-embedded.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit cd275c236b3f342cb7d9437ef5adcdeaf42fdd2c
Author: Gerhard Engleder <gerhard@engleder-embedded.com>
Date:   Fri Apr 21 21:46:56 2023 +0200

    tsnep: Add XDP socket zero-copy TX support
    
    Send and complete XSK pool frames within TX NAPI context. NAPI context
    is triggered by ndo_xsk_wakeup.
    
    Test results with A53 1.2GHz:
    
    xdpsock txonly copy mode, 64 byte frames:
                       pps            pkts           1.00
    tx                 284,409        11,398,144
    Two CPUs with 100% and 10% utilization.
    
    xdpsock txonly zero-copy mode, 64 byte frames:
                       pps            pkts           1.00
    tx                 511,929        5,890,368
    Two CPUs with 100% and 1% utilization.
    
    xdpsock l2fwd copy mode, 64 byte frames:
                       pps            pkts           1.00
    rx                 248,985        7,315,885
    tx                 248,921        7,315,885
    Two CPUs with 100% and 10% utilization.
    
    xdpsock l2fwd zero-copy mode, 64 byte frames:
                       pps            pkts           1.00
    rx                 254,735        3,039,456
    tx                 254,735        3,039,456
    Two CPUs with 100% and 4% utilization.
    
    Packet rate increases and CPU utilization is reduced in both cases.
    
    Signed-off-by: Gerhard Engleder <gerhard@engleder-embedded.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/ethernet/engleder/tsnep.h
M	drivers/net/ethernet/engleder/tsnep_main.c

commit 3fc2333933fdf1148b694d15db824e10449ecbc1
Author: Gerhard Engleder <gerhard@engleder-embedded.com>
Date:   Fri Apr 21 21:46:55 2023 +0200

    tsnep: Add XDP socket zero-copy RX support
    
    Add support for XSK zero-copy to RX path. The setup of the XSK pool can
    be done at runtime. If the netdev is running, then the queue must be
    disabled and enabled during reconfiguration. This can be done easily
    with functions introduced in previous commits.
    
    A more important property is that, if the netdev is running, then the
    setup of the XSK pool shall not stop the netdev in case of errors. A
    broken netdev after a failed XSK pool setup is bad behavior. Therefore,
    the allocation and setup of resources during XSK pool setup is done only
    before any queue is disabled. Additionally, freeing and later allocation
    of resources is eliminated in some cases. Page pool entries are kept for
    later use. Two memory models are registered in parallel. As a result,
    the XSK pool setup cannot fail during queue reconfiguration.
    
    In contrast to other drivers, XSK pool setup and XDP BPF program setup
    are separate actions. XSK pool setup can be done without any XDP BPF
    program. The XDP BPF program can be added, removed or changed without
    any reconfiguration of the XSK pool.
    
    Test results with A53 1.2GHz:
    
    xdpsock rxdrop copy mode, 64 byte frames:
                       pps            pkts           1.00
    rx                 856,054        10,625,775
    Two CPUs with both 100% utilization.
    
    xdpsock rxdrop zero-copy mode, 64 byte frames:
                       pps            pkts           1.00
    rx                 889,388        4,615,284
    Two CPUs with 100% and 20% utilization.
    
    Packet rate increases and CPU utilization is reduced.
    
    100% CPU load seems to the base load. This load is consumed by ksoftirqd
    just for dropping the generated packets without xdpsock running.
    
    Using batch API reduced CPU utilization slightly, but measurements are
    not stable enough to provide meaningful numbers.
    
    Signed-off-by: Gerhard Engleder <gerhard@engleder-embedded.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/ethernet/engleder/tsnep.h
M	drivers/net/ethernet/engleder/tsnep_main.c
M	drivers/net/ethernet/engleder/tsnep_xdp.c

commit c2d64697f41b0c188690f4f5841045ed86243134
Author: Gerhard Engleder <gerhard@engleder-embedded.com>
Date:   Fri Apr 21 21:46:54 2023 +0200

    tsnep: Move skb receive action to separate function
    
    The function tsnep_rx_poll() is already pretty long and the skb receive
    action can be reused for XSK zero-copy support. Move page based skb
    receive to separate function.
    
    Signed-off-by: Gerhard Engleder <gerhard@engleder-embedded.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/ethernet/engleder/tsnep_main.c

commit 2ea0a282ba09d29915f1d59b22c38207b5c7ed62
Author: Gerhard Engleder <gerhard@engleder-embedded.com>
Date:   Fri Apr 21 21:46:53 2023 +0200

    tsnep: Add functions for queue enable/disable
    
    Move queue enable and disable code to separate functions. This way the
    activation and deactivation of the queues are defined actions, which can
    be used in future execution paths.
    
    This functions will be used for the queue reconfiguration at runtime,
    which is necessary for XSK zero-copy support.
    
    Signed-off-by: Gerhard Engleder <gerhard@engleder-embedded.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/ethernet/engleder/tsnep_main.c

commit 33b0ee02c84c962a9701107be5683f7a600ebffd
Author: Gerhard Engleder <gerhard@engleder-embedded.com>
Date:   Fri Apr 21 21:46:52 2023 +0200

    tsnep: Rework TX/RX queue initialization
    
    Make initialization of TX and RX queues less dynamic by moving some
    initialization from netdev open/close to device probing.
    
    Additionally, move some initialization code to separate functions to
    enable future use in other execution paths.
    
    This is done as preparation for queue reconfigure at runtime, which is
    necessary for XSK zero-copy support.
    
    Signed-off-by: Gerhard Engleder <gerhard@engleder-embedded.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/ethernet/engleder/tsnep_main.c

commit 42fb2962b4a6f8b46aa1c141748319e01d0c7c39
Author: Gerhard Engleder <gerhard@engleder-embedded.com>
Date:   Fri Apr 21 21:46:51 2023 +0200

    tsnep: Replace modulo operation with mask
    
    TX/RX ring size is static and power of 2 to enable compiler to optimize
    modulo operation to mask operation. Make this optimization already in
    the code and don't rely on the compiler.
    
    CPU utilisation during high packet rate has not changed. So no
    performance improvement has been measured. But it is best practice to
    prevent modulo operations.
    
    Suggested-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Gerhard Engleder <gerhard@engleder-embedded.com>
    Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/ethernet/engleder/tsnep.h
M	drivers/net/ethernet/engleder/tsnep_main.c

commit 938f65adc4202da8ed3c85ef5a40dd3b8ee328d9
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Mon Apr 24 15:46:25 2023 +0200

    net: phy: dp83867: Add led_brightness_set support
    
    Up to 4 LEDs can be attached to the PHY, add support for setting
    brightness manually.
    
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20230424134625.303957-1-alexander.stein@ew.tq-group.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/phy/dp83867.c

commit aed8fdad2152d946add50bec00a6b07c457bdcdf
Author: Alexander Stein <alexander.stein@ew.tq-group.com>
Date:   Mon Apr 24 16:16:48 2023 +0200

    net: phy: Fix reading LED reg property
    
    'reg' is always encoded in 32 bits, thus it has to be read using the
    function with the corresponding bit width.
    
    Fixes: 01e5b728e9e4 ("net: phy: Add a binding for PHY LEDs")
    Signed-off-by: Alexander Stein <alexander.stein@ew.tq-group.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20230424141648.317944-1-alexander.stein@ew.tq-group.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/phy/phy_device.c

commit e515c330d7e22692d03475740fa45d179281cdf7
Author: Jianuo Kuang <u202110722@hust.edu.cn>
Date:   Mon Apr 24 10:41:40 2023 +0800

    drivers: nfc: nfcsim: remove return value check of `dev_dir`
    
    Smatch complains that:
    nfcsim_debugfs_init_dev() warn: 'dev_dir' is an error pointer or valid
    
    According to the documentation of the debugfs_create_dir() function,
    there is no need to check the return value of this function.
    Just delete the dead code.
    
    Signed-off-by: Jianuo Kuang <u202110722@hust.edu.cn>
    Reviewed-by: Dongliang Mu <dzm91@hust.edu.cn>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/20230424024140.34607-1-u202110722@hust.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/nfc/nfcsim.c

commit 86c2b51f203ec89adc18492a46343472055fd3c8
Author: wuych <yunchuan@nfschina.com>
Date:   Mon Apr 24 18:15:50 2023 +0800

    net: phy: dp83867: Remove unnecessary (void*) conversions
    
    Pointer variables of void * type do not require type cast.
    
    Signed-off-by: wuych <yunchuan@nfschina.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20230424101550.664319-1-yunchuan@nfschina.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/phy/dp83867.c

commit 00d0f31a1ec8eb3e4d692bdf2455daf0fb865bb3
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Thu Apr 20 16:33:02 2023 -0700

    net: ethtool: coalesce: try to make user settings stick twice
    
    SET_COALESCE may change operation mode and parameters in one call.
    Changing operation mode may cause the driver to reset the parameter
    values to what is a reasonable default for new operation mode.
    
    Since driver does not know which parameters come from user and which
    are echoed back from ->get, driver may ignore the parameters when
    switching operation modes.
    
    This used to be inevitable for ioctl() but in netlink we know which
    parameters are actually specified by the user.
    
    We could inform which parameters were set by the user but this would
    lead to a lot of code duplication in the drivers. Instead try to call
    the drivers twice if both mode and params are changed. The set method
    already checks if any params need updating so in case the driver did
    the right thing the first time around - there will be no second call
    to it's ->set method (only an extra call to ->get()).
    
    For mlx5 for example before this patch we'd see:
    
     # ethtool -C eth0 adaptive-rx on  adaptive-tx on
     # ethtool -C eth0 adaptive-rx off adaptive-tx off \
                       tx-usecs 123 rx-usecs 123
     Adaptive RX: off  TX: off
     rx-usecs: 3
     rx-frames: 32
     tx-usecs: 16
     tx-frames: 32
     [...]
    
    After the change:
    
     # ethtool -C eth0 adaptive-rx on  adaptive-tx on
     # ethtool -C eth0 adaptive-rx off adaptive-tx off \
                       tx-usecs 123 rx-usecs 123
     Adaptive RX: off  TX: off
     rx-usecs: 123
     rx-frames: 32
     tx-usecs: 123
     tx-frames: 32
     [...]
    
    This only works for netlink, so it's a small discrepancy between
    netlink and ioctl(). Since we anticipate most users to move to
    netlink I believe it's worth making their lives easier.
    
    Link: https://lore.kernel.org/r/20230420233302.944382-1-kuba@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	Documentation/networking/ethtool-netlink.rst
M	net/ethtool/coalesce.c

commit 086c161678b8cc291aa21ff8ef2b53df83ee44aa
Merge: 8e8e47d9e84f df18f2da302f
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Apr 24 18:08:54 2023 -0700

    Merge branch 'update-coding-style-and-check-alloc_frag'
    
    Haiyang Zhang says:
    
    ====================
    Update coding style and check alloc_frag
    
    Follow up patches for the jumbo frame support.
    
    As suggested by Jakub Kicinski, update coding style, and check napi_alloc_frag
    for possible fallback to single pages.
    ====================
    
    Link: https://lore.kernel.org/r/1682096818-30056-1-git-send-email-haiyangz@microsoft.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit df18f2da302f169e1a29098c6ca3b474f1b0269e
Author: Haiyang Zhang <haiyangz@microsoft.com>
Date:   Fri Apr 21 10:06:58 2023 -0700

    net: mana: Check if netdev/napi_alloc_frag returns single page
    
    netdev/napi_alloc_frag() may fall back to single page which is smaller
    than the requested size.
    Add error checking to avoid memory overwritten.
    
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/ethernet/microsoft/mana/mana_en.c

commit 5c74064f43c291d9add2b436a2d70205b71a7cc7
Author: Haiyang Zhang <haiyangz@microsoft.com>
Date:   Fri Apr 21 10:06:57 2023 -0700

    net: mana: Rename mana_refill_rxoob and remove some empty lines
    
    Rename mana_refill_rxoob for naming consistency.
    And remove some empty lines between function call and error
    checking.
    
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/ethernet/microsoft/mana/mana_en.c

commit 8e8e47d9e84ff9a6f1072177bd7ec1d2f12f4d5c
Merge: ffcddcaed6e0 4fc418053ec7
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Apr 24 18:07:09 2023 -0700

    Merge branch 'add-page_pool-support-for-page-recycling-in-veth-driver'
    
    Lorenzo Bianconi says:
    
    ====================
    add page_pool support for page recycling in veth driver
    
    Introduce page_pool support in veth driver in order to recycle pages in
    veth_convert_skb_to_xdp_buff routine and avoid reallocating the skb through
    the page allocator when we run a xdp program on the device and we receive
    skbs from the stack.
    ====================
    
    Link: https://lore.kernel.org/r/cover.1682188837.git.lorenzo@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 4fc418053ec7b839d98533d0d4ee83e11ffbaf53
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Sat Apr 22 20:54:33 2023 +0200

    net: veth: add page_pool stats
    
    Introduce page_pool stats support to report info about local page_pool
    through ethtool
    
    Tested-by: Maryam Tahhan <mtahhan@redhat.com>
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/Kconfig
M	drivers/net/veth.c

commit 0ebab78cbcbfd698d40bd307b68337bdf1b47e9b
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Sat Apr 22 20:54:32 2023 +0200

    net: veth: add page_pool for page recycling
    
    Introduce page_pool support in veth driver in order to recycle pages
    in veth_convert_skb_to_xdp_buff routine and avoid reallocating the skb
    through the page allocator.
    The patch has been tested sending tcp traffic to a veth pair where the
    remote peer is running a simple xdp program just returning xdp_pass:
    
    veth upstream codebase:
    MTU 1500B: ~ 8Gbps
    MTU 8000B: ~ 13.9Gbps
    
    veth upstream codebase + pp support:
    MTU 1500B: ~ 9.2Gbps
    MTU 8000B: ~ 16.2Gbps
    
    Tested-by: Maryam Tahhan <mtahhan@redhat.com>
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	drivers/net/Kconfig
M	drivers/net/veth.c

commit d913d32cc2707e9cd24fe6fa6d7d470e9c728980
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Apr 21 11:52:55 2023 -0700

    netlink: Use copy_to_user() for optval in netlink_getsockopt().
    
    Brad Spencer provided a detailed report [0] that when calling getsockopt()
    for AF_NETLINK, some SOL_NETLINK options set only 1 byte even though such
    options require at least sizeof(int) as length.
    
    The options return a flag value that fits into 1 byte, but such behaviour
    confuses users who do not initialise the variable before calling
    getsockopt() and do not strictly check the returned value as char.
    
    Currently, netlink_getsockopt() uses put_user() to copy data to optlen and
    optval, but put_user() casts the data based on the pointer, char *optval.
    As a result, only 1 byte is set to optval.
    
    To avoid this behaviour, we need to use copy_to_user() or cast optval for
    put_user().
    
    Note that this changes the behaviour on big-endian systems, but we document
    that the size of optval is int in the man page.
    
      $ man 7 netlink
      ...
      Socket options
           To set or get a netlink socket option, call getsockopt(2) to read
           or setsockopt(2) to write the option with the option level argument
           set to SOL_NETLINK.  Unless otherwise noted, optval is a pointer to
           an int.
    
    Fixes: 9a4595bc7e67 ("[NETLINK]: Add set/getsockopt options to support more than 32 groups")
    Fixes: be0c22a46cfb ("netlink: add NETLINK_BROADCAST_ERROR socket option")
    Fixes: 38938bfe3489 ("netlink: add NETLINK_NO_ENOBUFS socket flag")
    Fixes: 0a6a3a23ea6e ("netlink: add NETLINK_CAP_ACK socket option")
    Fixes: 2d4bc93368f5 ("netlink: extended ACK reporting")
    Fixes: 89d35528d17d ("netlink: Add new socket option to enable strict checking on dumps")
    Reported-by: Brad Spencer <bspencer@blackberry.com>
    Link: https://lore.kernel.org/netdev/ZD7VkNWFfp22kTDt@datsun.rim.net/
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Johannes Berg <johannes@sipsolutions.net>
    Link: https://lore.kernel.org/r/20230421185255.94606-1-kuniyu@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

M	net/netlink/af_netlink.c

commit be7dbd275dc6b911a5b9a22c4f9cb71b2c7fd847
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Mon Apr 24 16:51:28 2023 -0700

    selftests/bpf: avoid mark_all_scalars_precise() trigger in one of iter tests
    
    iter_pass_iter_ptr_to_subprog subtest is relying on actual array size
    being passed as subprog parameter. This combined with recent fixes to
    precision tracking in conditional jumps ([0]) is now causing verifier to
    backtrack all the way to the point where sum() and fill() subprogs are
    called, at which point precision backtrack bails out and forces all the
    states to have precise SCALAR registers. This in turn causes each
    possible value of i within fill() and sum() subprogs to cause
    a different non-equivalent state, preventing iterator code to converge.
    
    For now, change the test to assume fixed size of passed in array. Once
    BPF verifier supports precision tracking across subprogram calls, these
    changes will be reverted as unnecessary.
    
      [0] 71b547f56124 ("bpf: Fix incorrect verifier pruning due to missing register precision taints")
    
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/r/20230424235128.1941726-1-andrii@kernel.org
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

M	tools/testing/selftests/bpf/progs/iters.c

commit ffcddcaed6e06255811a8204458e1f380a3c2b21
Merge: 2efb07b5ced6 207296f1a03b
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Apr 24 15:37:35 2023 -0700

    Merge tag 'nf-next-23-04-22' of git://git.kernel.org/pub/scm/linux/kernel/git/netfilter/nf-next
    
    Pablo Neira Ayuso says:
    
    ====================
    Netfilter/IPVS updates for net-next
    
    1) Reduce jumpstack footprint: Stash chain in last rule marker in blob for
       tracing. Remove last rule and chain from jumpstack. From Florian Westphal.
    
    2) nf_tables validates all tables before committing the new rules.
       Unfortunately, this has two drawbacks:
    
       - Since addition of the transaction mutex pernet state gets written to
         outside of the locked section from the cleanup callback, this is
         wrong so do this cleanup directly after table has passed all checks.
    
       - Revalidate tables that saw no changes. This can be avoided by
         keeping the validation state per table, not per netns.
    
       From Florian Westphal.
    
    3) Get rid of a few redundant pointers in the traceinfo structure.
       The three removed pointers are used in the expression evaluation loop,
       so gcc keeps them in registers. Passing them to the (inlined) helpers
       thus doesn't increase nft_do_chain text size, while stack is reduced
       by another 24 bytes on 64bit arches. From Florian Westphal.
    
    4) IPVS cleanups in several ways without implementing any functional
       changes, aside from removing some debugging output:
    
       - Update width of source for ip_vs_sync_conn_options
         The operation is safe, use an annotation to describe it properly.
    
       - Consistently use array_size() in ip_vs_conn_init()
         It seems better to use helpers consistently.
    
       - Remove {Enter,Leave}Function. These seem to be well past their
         use-by date.
    
       - Correct spelling in comments.
    
       From Simon Horman.
    
    5) Extended netlink error report for netdevice in flowtables and
       netdev/chains. Allow for incrementally add/delete devices to netdev
       basechain. Allow to create netdev chain without device.
    
    * tag 'nf-next-23-04-22' of git://git.kernel.org/pub/scm/linux/kernel/git/netfilter/nf-next:
      netfilter: nf_tables: allow to create netdev chain without device
      netfilter: nf_tables: support for deleting devices in an existing netdev chain
      netfilter: nf_tables: support for adding new devices to an existing netdev chain
      netfilter: nf_tables: rename function to destroy hook list
      netfilter: nf_tables: do not send complete notification of deletions
      netfilter: nf_tables: extended netlink error reporting for netdevice
      ipvs: Correct spelling in comments
      ipvs: Remove {Enter,Leave}Function
      ipvs: Consistently use array_size() in ip_vs_conn_init()
      ipvs: Update width of source for ip_vs_sync_conn_options
      netfilter: nf_tables: do not store rule in traceinfo structure
      netfilter: nf_tables: do not store verdict in traceinfo structure
      netfilter: nf_tables: do not store pktinfo in traceinfo structure
      netfilter: nf_tables: remove unneeded conditional
      netfilter: nf_tables: make validation state per table
      netfilter: nf_tables: don't write table validation state without mutex
      netfilter: nf_tables: don't store chain address on jump
      netfilter: nf_tables: don't store address of last rule on jump
      netfilter: nf_tables: merge nft_rules_old structure and end of ruleblob marker
    ====================
    
    Link: https://lore.kernel.org/r/20230421235021.216950-1-pablo@netfilter.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 61d325dcbc05d8fef88110d35ef7776f3ac3f68b
Merge: 97adb49f052e 745ed7d77834
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 14:25:39 2023 -0700

    Merge tag 'erofs-for-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/xiang/erofs
    
    Pull erofs updates from Gao Xiang:
     "In this cycle, sub-page block support for uncompressed files is
      available. It's mainly used to enable original signing ('golden')
      4k-block images on arm64 with 16/64k pages. In addition, end users
      could also use this feature to build a manifest to directly refer to
      golden tar data.
    
      Besides, long xattr name prefix support is also introduced in this
      cycle to avoid too many xattrs with the same prefix (e.g. overlayfs
      xattrs). It's useful for erofs + overlayfs combination (like Composefs
      model): the image size is reduced by ~14% and runtime performance is
      also slightly improved.
    
      Others are random fixes and cleanups as usual.
    
      Summary:
    
       - Add sub-page block size support for uncompressed files
    
       - Support flattened block device for multi-blob images to be attached
         into virtual machines (including cloud servers) and bare metals
    
       - Support long xattr name prefixes to optimize images with common
         xattr namespaces (e.g. files with overlayfs xattrs) use cases
    
       - Various minor cleanups & fixes"
    
    * tag 'erofs-for-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/xiang/erofs:
      erofs: cleanup i_format-related stuffs
      erofs: sunset erofs_dbg()
      erofs: fix potential overflow calculating xattr_isize
      erofs: get rid of z_erofs_fill_inode()
      erofs: enable long extended attribute name prefixes
      erofs: handle long xattr name prefixes properly
      erofs: add helpers to load long xattr name prefixes
      erofs: introduce on-disk format for long xattr name prefixes
      erofs: move packed inode out of the compression part
      erofs: keep meta inode into erofs_buf
      erofs: initialize packed inode after root inode is assigned
      erofs: stop parsing non-compact HEAD index if clusterofs is invalid
      erofs: don't warn ztailpacking feature anymore
      erofs: simplify erofs_xattr_generic_get()
      erofs: rename init_inode_xattrs with erofs_ prefix
      erofs: move several xattr helpers into xattr.c
      erofs: tidy up EROFS on-disk naming
      erofs: support flattened block device for multi-blob images
      erofs: set block size to the on-disk block size
      erofs: avoid hardcoded blocksize for subpage block support

commit a0c109dcafb15b8bee187c49fb746779374f60f0
Author: Yafang Shao <laoar.shao@gmail.com>
Date:   Mon Apr 24 16:11:03 2023 +0000

    bpf: Add __rcu_read_{lock,unlock} into btf id deny list
    
    The tracing recursion prevention mechanism must be protected by rcu, that
    leaves __rcu_read_{lock,unlock} unprotected by this mechanism. If we trace
    them, the recursion will happen. Let's add them into the btf id deny list.
    
    When CONFIG_PREEMPT_RCU is enabled, it can be reproduced with a simple bpf
    program as such:
      SEC("fentry/__rcu_read_lock")
      int fentry_run()
      {
          return 0;
      }
    
    Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
    Link: https://lore.kernel.org/r/20230424161104.3737-2-laoar.shao@gmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

M	kernel/bpf/verifier.c

commit 97adb49f052e70455c3529509885f8aa3b40c370
Merge: e2eff52ce512 43b450632676
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 14:06:41 2023 -0700

    Merge tag 'v6.4/vfs.open' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs
    
    Pull vfs open fixlet from Christian Brauner:
     "EINVAL ist keinmal: This contains the changes to make O_DIRECTORY when
      specified together with O_CREAT an invalid request.
    
      The wider background is that a regression report about the behavior of
      O_DIRECTORY | O_CREAT was sent to fsdevel about a behavior that was
      changed multiple years and LTS releases earlier during v5.7
      development.
    
      This has also been covered in
    
            https://lwn.net/Articles/926782/
    
      which provides an excellent summary of the discussion"
    
    * tag 'v6.4/vfs.open' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs:
      open: return EINVAL for O_DIRECTORY | O_CREAT

commit 7deca5eae83389ca40ac1b1bde96e4af17cca84f
Author: Dave Marchevsky <davemarchevsky@fb.com>
Date:   Mon Apr 24 13:43:21 2023 -0700

    bpf: Disable bpf_refcount_acquire kfunc calls until race conditions are fixed
    
    As reported by Kumar in [0], the shared ownership implementation for BPF
    programs has some race conditions which need to be addressed before it
    can safely be used. This patch does so in a minimal way instead of
    ripping out shared ownership entirely, as proper fixes for the issues
    raised will follow ASAP, at which point this patch's commit can be
    reverted to re-enable shared ownership.
    
    The patch removes the ability to call bpf_refcount_acquire_impl from BPF
    programs. Programs can only bump refcount and obtain a new owning
    reference using this kfunc, so removing the ability to call it
    effectively disables shared ownership.
    
    Instead of changing success / failure expectations for
    bpf_refcount-related selftests, this patch just disables them from
    running for now.
    
      [0]: https://lore.kernel.org/bpf/d7hyspcow5wtjcmw4fugdgyp3fwhljwuscp3xyut5qnwivyeru@ysdq543otzv2/
    
    Reported-by: Kumar Kartikeya Dwivedi <memxor@gmail.com>
    Signed-off-by: Dave Marchevsky <davemarchevsky@fb.com>
    Link: https://lore.kernel.org/r/20230424204321.2680232-1-davemarchevsky@fb.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

M	kernel/bpf/verifier.c
M	tools/testing/selftests/bpf/prog_tests/refcounted_kptr.c

commit e2eff52ce512ec725f9f1daf975c45a499be1e1e
Merge: 7bcff5a3969b 81b21c0f0138
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 13:39:58 2023 -0700

    Merge tag 'v6.4/vfs.misc' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs
    
    Pull misc vfs updates from Christian Brauner:
     "This contains a pile of various smaller fixes. Most of them aren't
      very interesting so this just highlights things worth mentioning:
    
       - Various filesystems contained the same little helper to convert
         from the mode of a dentry to the DT_* type of that dentry.
    
         They have now all been switched to rely on the generic
         fs_umode_to_dtype() helper. All custom helpers are removed (Jeff)
    
       - Fsnotify now reports ACCESS and MODIFY events for splice
         (Chung-Chiang Cheng)
    
       - After converting timerfd a long time ago to rely on
         wait_event_interruptible_*() apis, convert eventfd as well. This
         removes the complex open-coded wait code (Wen Yang)
    
       - Simplify sysctl registration for devpts, avoiding the declaration
         of two tables. Instead, just use a prefixed path with
         register_sysctl() (Luis)
    
       - The setattr_should_drop_sgid() helper is now exported so NFS can
         use it. By switching NFS to this helper an NFS setgid inheritance
         bug is fixed (me)"
    
    * tag 'v6.4/vfs.misc' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs:
      fs: hfsplus: remove WARN_ON() from hfsplus_cat_{read,write}_inode()
      pnode: pass mountpoint directly
      eventfd: use wait_event_interruptible_locked_irq() helper
      splice: report related fsnotify events
      fs: consolidate duplicate dt_type helpers
      nfs: use vfs setgid helper
      Update relatime comments to include equality
      fs/buffer: Remove redundant assignment to err
      fs_context: drop the unused lsm_flags member
      fs/namespace: fnic: Switch to use %ptTd
      Documentation: update idmappings.rst
      devpts: simplify two-level sysctl registration for pty_kern_table
      eventpoll: align comment with nested epoll limitation

commit 7bcff5a3969b0e396087516ba4131596296a4478
Merge: ec40758b31ef e499214ce3ef
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 13:35:23 2023 -0700

    Merge tag 'v6.4/vfs.acl' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs
    
    Pull acl updates from Christian Brauner:
     "After finishing the introduction of the new posix acl api last cycle
      the generic POSIX ACL xattr handlers are still around in the
      filesystems xattr handlers for two reasons:
    
       (1) Because a few filesystems rely on the ->list() method of the
           generic POSIX ACL xattr handlers in their ->listxattr() inode
           operation.
    
       (2) POSIX ACLs are only available if IOP_XATTR is raised. The
           IOP_XATTR flag is raised in inode_init_always() based on whether
           the sb->s_xattr pointer is non-NULL. IOW, the registered xattr
           handlers of the filesystem are used to raise IOP_XATTR. Removing
           the generic POSIX ACL xattr handlers from all filesystems would
           risk regressing filesystems that only implement POSIX ACL support
           and no other xattrs (nfs3 comes to mind).
    
      This contains the work to decouple POSIX ACLs from the IOP_XATTR flag
      as they don't depend on xattr handlers anymore. So it's now possible
      to remove the generic POSIX ACL xattr handlers from the sb->s_xattr
      list of all filesystems. This is a crucial step as the generic POSIX
      ACL xattr handlers aren't used for POSIX ACLs anymore and POSIX ACLs
      don't depend on the xattr infrastructure anymore.
    
      Adressing problem (1) will require more long-term work. It would be
      best to get rid of the ->list() method of xattr handlers completely at
      some point.
    
      For erofs, ext{2,4}, f2fs, jffs2, ocfs2, and reiserfs the nop POSIX
      ACL xattr handler is kept around so they can continue to use
      array-based xattr handler indexing.
    
      This update does simplify the ->listxattr() implementation of all
      these filesystems however"
    
    * tag 'v6.4/vfs.acl' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs:
      acl: don't depend on IOP_XATTR
      ovl: check for ->listxattr() support
      reiserfs: rework priv inode handling
      fs: rename generic posix acl handlers
      reiserfs: rework ->listxattr() implementation
      fs: simplify ->listxattr() implementation
      fs: drop unused posix acl handlers
      xattr: remove unused argument
      xattr: add listxattr helper
      xattr: simplify listxattr helpers

commit ec40758b31ef6f492a48267e9e02edff6b4d62c9
Merge: 3323ddce085c eee3a0e93924
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 13:03:42 2023 -0700

    Merge tag 'v6.4/pidfd.file' of git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux
    
    Pull pidfd updates from Christian Brauner:
     "This adds a new pidfd_prepare() helper which allows the caller to
      reserve a pidfd number and allocates a new pidfd file that stashes the
      provided struct pid.
    
      It should be avoided installing a file descriptor into a task's file
      descriptor table just to close it again via close_fd() in case an
      error occurs. The fd has been visible to userspace and might already
      be in use. Instead, a file descriptor should be reserved but not
      installed into the caller's file descriptor table.
    
      If another failure path is hit then the reserved file descriptor and
      file can just be put without any userspace visible side-effects. And
      if all failure paths are cleared the file descriptor and file can be
      installed into the task's file descriptor table.
    
      This helper is now used in all places that open coded this
      functionality before. For example, this is currently done during
      copy_process() and fanotify used pidfd_create(), which returns a pidfd
      that has already been made visibile in the caller's file descriptor
      table, but then closed it using close_fd().
    
      In one of the next merge windows there is also new functionality
      coming to unix domain sockets that will have to rely on
      pidfd_prepare()"
    
    * tag 'v6.4/pidfd.file' of git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux:
      fanotify: use pidfd_prepare()
      fork: use pidfd_prepare()
      pid: add pidfd_prepare()

commit 3323ddce085cdb33331c2c1bb7a88233023566a9
Merge: a632b76b427d 6e890c5d5021
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 12:52:35 2023 -0700

    Merge tag 'v6.4/kernel.user_worker' of git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux
    
    Pull user work thread updates from Christian Brauner:
     "This contains the work generalizing the ability to create a kernel
      worker from a userspace process.
    
      Such user workers will run with the same credentials as the userspace
      process they were created from providing stronger security and
      accounting guarantees than the traditional override_creds() approach
      ever could've hoped for.
    
      The original work was heavily based and optimzed for the needs of
      io_uring which was the first user. However, as it quickly turned out
      the ability to create user workers inherting properties from a
      userspace process is generally useful.
    
      The vhost subsystem currently creates workers using the kthread api.
      The consequences of using the kthread api are that RLIMITs don't work
      correctly as they are inherited from khtreadd. This leads to bugs
      where more workers are created than would be allowed by the RLIMITs of
      the userspace process in lieu of which workers are created.
    
      Problems like this disappear with user workers created from the
      userspace processes for which they perform the work. In addition,
      providing this api allows vhost to remove additional complexity. For
      example, cgroup and mm sharing will just work out of the box with user
      workers based on the relevant userspace process instead of manually
      ensuring the correct cgroup and mm contexts are used.
    
      So the vhost subsystem should simply be made to use the same mechanism
      as io_uring. To this end the original mechanism used for
      create_io_thread() is generalized into user workers:
    
       - Introduce PF_USER_WORKER as a generic indicator that a given task
         is a user worker, i.e., a kernel task that was created from a
         userspace process. Now a PF_IO_WORKER thread is just a specialized
         version of PF_USER_WORKER. So io_uring io workers raise both flags.
    
       - Make copy_process() available to core kernel code
    
       - Extend struct kernel_clone_args with the following bitfields
         allowing to indicate to copy_process():
           - to create a user worker (raise PF_USER_WORKER)
           - to not inherit any files from the userspace process
           - to ignore signals
    
      After all generic changes are in place the vhost subsystem implements
      a new dedicated vhost api based on user workers. Finally, vhost is
      switched to rely on the new api moving it off of kthreads.
    
      Thanks to Mike for sticking it out and making it through this rather
      arduous journey"
    
    * tag 'v6.4/kernel.user_worker' of git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux:
      vhost: use vhost_tasks for worker threads
      vhost: move worker thread fields to new struct
      vhost_task: Allow vhost layer to use copy_process
      fork: allow kernel code to call copy_process
      fork: Add kernel_clone_args flag to ignore signals
      fork: add kernel_clone_args flag to not dup/clone files
      fork/vm: Move common PF_IO_WORKER behavior to new flag
      kernel: Make io_thread and kthread bit fields
      kthread: Pass in the thread's name during creation
      kernel: Allow a kernel thread's name to be set in copy_process
      csky: Remove kernel_thread declaration

commit a632b76b427d886911221331f4bfcd44a3e58197
Merge: c23f28975abc d95debbdc528
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 12:48:33 2023 -0700

    Merge tag 'v6.4/kernel.clone3.tests' of git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux
    
    Pull clone3 selftest fix from Christian Brauner:
     "This is a single fix to the clone3() selftstests.
    
      It fell through the sefltest tree cracks a few times so I'll provide
      it here. It has low urgency but we should still correctly report the
      number of tests"
    
    * tag 'v6.4/kernel.clone3.tests' of git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux:
      selftests/clone3: fix number of tests in ksft_set_plan

commit c23f28975abc2eb02cecc8bc1f2c95473a59ed2e
Merge: 1be89faab3cf 7e8472c820f0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 12:35:49 2023 -0700

    Merge tag 'docs-6.4' of git://git.lwn.net/linux
    
    Pull documentation updates from Jonathan Corbet:
     "Commit volume in documentation is relatively low this time, but there
      is still a fair amount going on, including:
    
       - Reorganize the architecture-specific documentation under
         Documentation/arch
    
         This makes the structure match the source directory and helps to
         clean up the mess that is the top-level Documentation directory a
         bit. This work creates the new directory and moves x86 and most of
         the less-active architectures there.
    
         The current plan is to move the rest of the architectures in 6.5,
         with the patches going through the appropriate subsystem trees.
    
       - Some more Spanish translations and maintenance of the Italian
         translation
    
       - A new "Kernel contribution maturity model" document from Ted
    
       - A new tutorial on quickly building a trimmed kernel from Thorsten
    
      Plus the usual set of updates and fixes"
    
    * tag 'docs-6.4' of git://git.lwn.net/linux: (47 commits)
      media: Adjust column width for pdfdocs
      media: Fix building pdfdocs
      docs: clk: add documentation to log which clocks have been disabled
      docs: trace: Fix typo in ftrace.rst
      Documentation/process: always CC responsible lists
      docs: kmemleak: adjust to config renaming
      ELF: document some de-facto PT_* ABI quirks
      Documentation: arm: remove stih415/stih416 related entries
      docs: turn off "smart quotes" in the HTML build
      Documentation: firmware: Clarify firmware path usage
      docs/mm: Physical Memory: Fix grammar
      Documentation: Add document for false sharing
      dma-api-howto: typo fix
      docs: move m68k architecture documentation under Documentation/arch/
      docs: move parisc documentation under Documentation/arch/
      docs: move ia64 architecture docs under Documentation/arch/
      docs: Move arc architecture docs under Documentation/arch/
      docs: move nios2 documentation under Documentation/arch/
      docs: move openrisc documentation under Documentation/arch/
      docs: move superh documentation under Documentation/arch/
      ...

commit 1be89faab3cf1f3dd6eb4924b60d2b9094e7206b
Merge: 0f50767d7e38 a42077b78768
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 12:31:32 2023 -0700

    Merge tag 'linux-kselftest-kunit-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/shuah/linux-kselftest
    
    Pull KUnit updates from Shuah Khan:
    
     - several fixes to kunit tool
    
     - new klist structure test
    
     - support for m68k under QEMU
    
     - support for overriding the QEMU serial port
    
     - support for SH under QEMU
    
    * tag 'linux-kselftest-kunit-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/shuah/linux-kselftest:
      kunit: add tests for using current KUnit test field
      kunit: tool: Add support for SH under QEMU
      kunit: tool: Add support for overriding the QEMU serial port
      .gitignore: Unignore .kunitconfig
      list: test: Test the klist structure
      kunit: increase KUNIT_LOG_SIZE to 2048 bytes
      kunit: Use gfp in kunit_alloc_resource() kernel-doc
      kunit: tool: fix pre-existing `mypy --strict` errors and update run_checks.py
      kunit: tool: remove unused imports and variables
      kunit: tool: add subscripts for type annotations where appropriate
      kunit: fix bug of extra newline characters in debugfs logs
      kunit: fix bug in the order of lines in debugfs logs
      kunit: fix bug in debugfs logs of parameterized tests
      kunit: tool: Add support for m68k under QEMU

commit 0f50767d7e380618f81134a62e9a753dea2aecfb
Merge: 5dfb75e842e0 50ad2fb7ec2b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 12:28:34 2023 -0700

    Merge tag 'linux-kselftest-next-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/shuah/linux-kselftest
    
    Pull Kselftest updates from Shuah Khan:
    
     - several patches to enhance and fix resctrl test
    
     - nolibc support for kselftest with an addition to vprintf() to
       tools/nolibc/stdio and related test changes
    
     - Refactor 'peeksiginfo' ptrace test part
    
     - add 'malloc' failures checks in cgroup test_memcontrol
    
     - a new prctl test
    
     - enhancements sched test with additional ore schedule prctl calls
    
    * tag 'linux-kselftest-next-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/shuah/linux-kselftest: (25 commits)
      selftests/resctrl: Fix incorrect error return on test complete
      selftests/resctrl: Remove duplicate codes that clear each test result file
      selftests/resctrl: Commonize the signal handler register/unregister for all tests
      selftests/resctrl: Cleanup properly when an error occurs in CAT test
      selftests/resctrl: Flush stdout file buffer before executing fork()
      selftests/resctrl: Return MBA check result and make it to output message
      selftests/resctrl: Fix set up schemata with 100% allocation on first run in MBM test
      selftests/resctrl: Use correct exit code when tests fail
      kselftest/arm64: Convert za-fork to use kselftest.h
      kselftest: Support nolibc
      tools/nolibc/stdio: Implement vprintf()
      selftests/resctrl: Correct get_llc_perf() param in function comment
      selftests/resctrl: Use remount_resctrlfs() consistently with boolean
      selftests/resctrl: Change name from CBM_MASK_PATH to INFO_PATH
      selftests/resctrl: Change initialize_llc_perf() return type to void
      selftests/resctrl: Replace obsolete memalign() with posix_memalign()
      selftests/resctrl: Check for return value after write_schemata()
      selftests/resctrl: Allow ->setup() to return errors
      selftests/resctrl: Move ->setup() call outside of test specific branches
      selftests/resctrl: Return NULL if malloc_and_init_memory() did not alloc mem
      ...

commit 5dfb75e842e0ef59fc7bf307e5c52eab215bdb4c
Merge: 5d77652fbf23 8ae99857748b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 12:16:14 2023 -0700

    Merge tag 'rcu.6.4.april5.2023.3' of git://git.kernel.org/pub/scm/linux/kernel/git/jfern/linux
    
    Pull RCU updates from Joel Fernandes:
    
     - Updates and additions to MAINTAINERS files, with Boqun being added to
       the RCU entry and Zqiang being added as an RCU reviewer.
    
       I have also transitioned from reviewer to maintainer; however, Paul
       will be taking over sending RCU pull-requests for the next merge
       window.
    
     - Resolution of hotplug warning in nohz code, achieved by fixing
       cpu_is_hotpluggable() through interaction with the nohz subsystem.
    
       Tick dependency modifications by Zqiang, focusing on fixing usage of
       the TICK_DEP_BIT_RCU_EXP bitmask.
    
     - Avoid needless calls to the rcu-lazy shrinker for CONFIG_RCU_LAZY=n
       kernels, fixed by Zqiang.
    
     - Improvements to rcu-tasks stall reporting by Neeraj.
    
     - Initial renaming of k[v]free_rcu() to k[v]free_rcu_mightsleep() for
       increased robustness, affecting several components like mac802154,
       drbd, vmw_vmci, tracing, and more.
    
       A report by Eric Dumazet showed that the API could be unknowingly
       used in an atomic context, so we'd rather make sure they know what
       they're asking for by being explicit:
    
          https://lore.kernel.org/all/20221202052847.2623997-1-edumazet@google.com/
    
     - Documentation updates, including corrections to spelling,
       clarifications in comments, and improvements to the srcu_size_state
       comments.
    
     - Better srcu_struct cache locality for readers, by adjusting the size
       of srcu_struct in support of SRCU usage by Christoph Hellwig.
    
     - Teach lockdep to detect deadlocks between srcu_read_lock() vs
       synchronize_srcu() contributed by Boqun.
    
       Previously lockdep could not detect such deadlocks, now it can.
    
     - Integration of rcutorture and rcu-related tools, targeted for v6.4
       from Boqun's tree, featuring new SRCU deadlock scenarios, test_nmis
       module parameter, and more
    
     - Miscellaneous changes, various code cleanups and comment improvements
    
    * tag 'rcu.6.4.april5.2023.3' of git://git.kernel.org/pub/scm/linux/kernel/git/jfern/linux: (71 commits)
      checkpatch: Error out if deprecated RCU API used
      mac802154: Rename kfree_rcu() to kvfree_rcu_mightsleep()
      rcuscale: Rename kfree_rcu() to kfree_rcu_mightsleep()
      ext4/super: Rename kfree_rcu() to kfree_rcu_mightsleep()
      net/mlx5: Rename kfree_rcu() to kfree_rcu_mightsleep()
      net/sysctl: Rename kvfree_rcu() to kvfree_rcu_mightsleep()
      lib/test_vmalloc.c: Rename kvfree_rcu() to kvfree_rcu_mightsleep()
      tracing: Rename kvfree_rcu() to kvfree_rcu_mightsleep()
      misc: vmw_vmci: Rename kvfree_rcu() to kvfree_rcu_mightsleep()
      drbd: Rename kvfree_rcu() to kvfree_rcu_mightsleep()
      rcu: Protect rcu_print_task_exp_stall() ->exp_tasks access
      rcu: Avoid stack overflow due to __rcu_irq_enter_check_tick() being kprobe-ed
      rcu-tasks: Report stalls during synchronize_srcu() in rcu_tasks_postscan()
      rcu: Permit start_poll_synchronize_rcu_expedited() to be invoked early
      rcu: Remove never-set needwake assignment from rcu_report_qs_rdp()
      rcu: Register rcu-lazy shrinker only for CONFIG_RCU_LAZY=y kernels
      rcu: Fix missing TICK_DEP_MASK_RCU_EXP dependency check
      rcu: Fix set/clear TICK_DEP_BIT_RCU_EXP bitmask race
      rcu/trace: use strscpy() to instead of strncpy()
      tick/nohz: Fix cpu_is_hotpluggable() by checking with nohz subsystem
      ...

commit 5d77652fbf2318f61af2cf27779951393dd0f749
Merge: 4a4075ada6a5 0d8c461adbc4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 12:09:43 2023 -0700

    Merge tag 'nolibc.2023.04.04a' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu
    
    Pull nolibc updates from Paul McKenney:
    
     - Add support for loongarch
    
     - Fix stack-protector issues
    
     - Support additional integral types and signal-related macros
    
     - Add support for stdin, stdout, and stderr
    
     - Add getuid() and geteuid()
    
     - Allow S_I* macros to be overridden by program
    
     - Defer to linux/fcntl.h and linux/stat.h to avoid duplicate
       definitions
    
     - Many improvements to the selftests
    
    * tag 'nolibc.2023.04.04a' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu: (22 commits)
      tools/nolibc: x86_64: add stackprotector support
      tools/nolibc: i386: add stackprotector support
      tools/nolibc: tests: add test for -fstack-protector
      tools/nolibc: tests: fold in no-stack-protector cflags
      tools/nolibc: add support for stack protector
      tools/nolibc: tests: constify test_names
      tools/nolibc: add helpers for wait() signal exits
      tools/nolibc: add definitions for standard fds
      selftests/nolibc: Adjust indentation for Makefile
      selftests/nolibc: Add support for LoongArch
      tools/nolibc: Add support for LoongArch
      tools/nolibc: Add statx() and make stat() rely on statx() if necessary
      tools/nolibc: Include linux/fcntl.h and remove duplicate code
      tools/nolibc: check for S_I* macros before defining them
      selftests/nolibc: skip the chroot_root and link_dir tests when not privileged
      tools/nolibc: add getuid() and geteuid()
      tools/nolibc: add tests for the integer limits in stdint.h
      tools/nolibc: enlarge column width of tests
      tools/nolibc: add integer types and integer limit macros
      tools/nolibc: add stdint.h
      ...

commit 4a4075ada6a5f51087d6c046b024046bf3864beb
Merge: 60eb45074234 5d65cf6ae6ae
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 12:05:08 2023 -0700

    Merge tag 'locktorture.2023.04.04a' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu
    
    Pull locktorture updates from Paul McKenney:
     "This adds tests for nested locking and also adds support for testing
      raw spinlocks in PREEMPT_RT kernels"
    
    * tag 'locktorture.2023.04.04a' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu:
      locktorture: Add raw_spinlock* torture tests for PREEMPT_RT kernels
      locktorture: With nested locks, occasionally skip main lock
      locktorture: Add nested locking to rtmutex torture tests
      locktorture: Add nested locking to mutex torture tests
      locktorture: Add nested_[un]lock() hooks and nlocks parameter

commit 60eb45074234b90333b6241b4fd8d196aa2dfd98
Merge: 406037351e08 cc4a29819b0d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 12:02:25 2023 -0700

    Merge tag 'lkmm-scripting.2023.04.07a' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu
    
    Pull Linux Kernel Memory Model scripting updates from Paul McKenney:
     "This improves litmus-test documentation and improves the ability to do
      before/after tests on the https://github.com/paulmckrcu/litmus repo"
    
    * tag 'lkmm-scripting.2023.04.07a' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu: (32 commits)
      tools/memory-model: Remove out-of-date SRCU documentation
      tools/memory-model: Document LKMM test procedure
      tools/memory-model: Use "grep -E" instead of "egrep"
      tools/memory-model: Use "-unroll 0" to keep --hw runs finite
      tools/memory-model: Make judgelitmus.sh handle scripted Result: tag
      tools/memory-model: Add data-race capabilities to judgelitmus.sh
      tools/memory-model: Add checktheselitmus.sh to run specified litmus tests
      tools/memory-model: Repair parseargs.sh header comment
      tools/memory-model:  Add "--" to parseargs.sh for additional arguments
      tools/memory-model: Make history-check scripts use mselect7
      tools/memory-model: Make checkghlitmus.sh use mselect7
      tools/memory-model: Fix scripting --jobs argument
      tools/memory-model: Implement --hw support for checkghlitmus.sh
      tools/memory-model: Add -v flag to jingle7 runs
      tools/memory-model: Make runlitmus.sh check for jingle errors
      tools/memory-model: Allow herd to deduce CPU type
      tools/memory-model: Keep assembly-language litmus tests
      tools/memory-model: Move from .AArch64.litmus.out to .litmus.AArch.out
      tools/memory-model: Make runlitmus.sh generate .litmus.out for --hw
      tools/memory-model: Split runlitmus.sh out of checklitmus.sh
      ...

commit 406037351e08dea03735178bf11046da85f00125
Merge: 022e32094ed2 57373671d5f5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 12:00:51 2023 -0700

    Merge tag 'lkmm.2023.04.07a' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu
    
    Pull Linux Kernel Memory Model updates from Paul McKenney
     "This improves LKMM diagnostic messages, unifies handling of the
      ordering produced by unlock/lock pairs, adds support for the
      smp_mb__after_srcu_read_unlock() macro, removes redundant members from
      the to-r relation, brings SRCU read-side semantics into alignment with
      Linux-kernel SRCU, makes ppo a subrelation of po, and improves
      documentation"
    
    * tag 'lkmm.2023.04.07a' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu:
      Documentation: litmus-tests: Correct spelling
      tools/memory-model: Add documentation about SRCU read-side critical sections
      tools/memory-model: Make ppo a subrelation of po
      tools/memory-model: Provide exact SRCU semantics
      tools/memory-model: Restrict to-r to read-read address dependency
      tools/memory-model: Add smp_mb__after_srcu_read_unlock()
      tools/memory-model: Unify UNLOCK+LOCK pairings to po-unlock-lock-po
      tools/memory-model: Update some warning labels

commit 022e32094ed2a688dcb2721534abd0a291905f29
Merge: 1a0beef98b58 8dec88070d96
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 11:46:53 2023 -0700

    Merge tag 'kcsan.2023.04.04a' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu
    
    Pull KCSAN updates from Paul McKenney:
     "Kernel concurrency sanitizer (KCSAN) updates for v6.4
    
      This fixes kernel-doc warnings and also updates instrumentation from
      READ_ONCE() to volatile in order to avoid unaligned load-acquire
      instructions on arm64 in kernels built with LTO"
    
    * tag 'kcsan.2023.04.04a' of git://git.kernel.org/pub/scm/linux/kernel/git/paulmck/linux-rcu:
      kcsan: Avoid READ_ONCE() in read_instrumented_memory()
      instrumented.h: Fix all kernel-doc format warnings

commit 1a0beef98b582b69a2ba44e468f7dfecbcfab48e
Merge: dc7e22a368c2 bd8621ca1510
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 11:40:26 2023 -0700

    Merge tag 'tpmdd-v6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/jarkko/linux-tpmdd
    
    Pull tpm updates from Jarkko Sakkinen:
    
     - The .machine keyring, used for Machine Owner Keys (MOK), acquired the
       ability to store only CA enforced keys, and put rest to the .platform
       keyring, thus separating the code signing keys from the keys that are
       used to sign certificates.
    
       This essentially unlocks the use of the .machine keyring as a trust
       anchor for IMA. It is an opt-in feature, meaning that the additional
       contraints won't brick anyone who does not care about them.
    
     - Enable interrupt based transactions with discrete TPM chips (tpm_tis).
    
       There was code for this existing but it never really worked so I
       consider this a new feature rather than a bug fix. Before the driver
       just fell back to the polling mode.
    
    Link: https://lore.kernel.org/linux-integrity/a93b6222-edda-d43c-f010-a59701f2aeef@gmx.de/
    Link: https://lore.kernel.org/linux-integrity/20230302164652.83571-1-eric.snowberg@oracle.com/
    
    * tag 'tpmdd-v6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/jarkko/linux-tpmdd: (29 commits)
      tpm: Add !tpm_amd_is_rng_defective() to the hwrng_unregister() call site
      tpm_tis: fix stall after iowrite*()s
      tpm/tpm_tis_synquacer: Convert to platform remove callback returning void
      tpm/tpm_tis: Convert to platform remove callback returning void
      tpm/tpm_ftpm_tee: Convert to platform remove callback returning void
      tpm: tpm_tis_spi: Mark ACPI and OF related data as maybe unused
      tpm: st33zp24: Mark ACPI and OF related data as maybe unused
      tpm, tpm_tis: Enable interrupt test
      tpm, tpm_tis: startup chip before testing for interrupts
      tpm, tpm_tis: Claim locality when interrupts are reenabled on resume
      tpm, tpm_tis: Claim locality in interrupt handler
      tpm, tpm_tis: Request threaded interrupt handler
      tpm, tpm: Implement usage counter for locality
      tpm, tpm_tis: do not check for the active locality in interrupt handler
      tpm, tpm_tis: Move interrupt mask checks into own function
      tpm, tpm_tis: Only handle supported interrupts
      tpm, tpm_tis: Claim locality before writing interrupt registers
      tpm, tpm_tis: Do not skip reset of original interrupt vector
      tpm, tpm_tis: Disable interrupts if tpm_tis_probe_irq() failed
      tpm, tpm_tis: Claim locality before writing TPM_INT_ENABLE register
      ...

commit dc7e22a368c2a217d2d3338b3bd984fdd0301173
Merge: 62443646a5fd de93e515db30
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 11:37:24 2023 -0700

    Merge tag 'Smack-for-6.4' of https://github.com/cschaufler/smack-next
    
    Pull smack updates from Casey Schaufler:
     "There are two changes, one small and one more substantial:
    
       - Remove of an unnecessary cast
    
       - The mount option processing introduced with the mount rework makes
         copies of mount option values. There is no good reason to make
         copies of Smack labels, as they are maintained on a list and never
         removed.
    
         The code now uses pointers to entries on the list, reducing
         processing time and memory use"
    
    * tag 'Smack-for-6.4' of https://github.com/cschaufler/smack-next:
      Smack: Improve mount process memory use
      smack_lsm: remove unnecessary type casting

commit 62443646a5fddd2c15dacd670fda84044ee7f748
Merge: 5af4b523ba9b ed35e2f2f0de
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 11:35:15 2023 -0700

    Merge tag 'landlock-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/mic/linux
    
    Pull landlock update from Mickaël Salaün:
     "Improve user space documentation"
    
    * tag 'landlock-6.4-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/mic/linux:
      landlock: Clarify documentation for the LANDLOCK_ACCESS_FS_REFER right

commit 5af4b523ba9be70372eafab02ebfb9babf77ec7d
Merge: 08e30833f86b c120c98486c2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 11:33:07 2023 -0700

    Merge tag 'tomoyo-pr-20230424' of git://git.osdn.net/gitroot/tomoyo/tomoyo-test1
    
    Pull tomoyo update from Tetsuo Handa:
     "One cleanup patch from Vlastimil Babka"
    
    * tag 'tomoyo-pr-20230424' of git://git.osdn.net/gitroot/tomoyo/tomoyo-test1:
      tomoyo: replace tomoyo_round2() with kmalloc_size_roundup()

commit 08e30833f86ba25945e416b9f372791aacfef153
Merge: 72eaa0967b59 d82dcd9e21b7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 11:21:50 2023 -0700

    Merge tag 'lsm-pr-20230420' of git://git.kernel.org/pub/scm/linux/kernel/git/pcmoore/lsm
    
    Pull lsm updates from Paul Moore:
    
     - Move the LSM hook comment blocks into security/security.c
    
       For many years the LSM hook comment blocks were located in a very odd
       place, include/linux/lsm_hooks.h, where they lived on their own,
       disconnected from both the function prototypes and definitions.
    
       In keeping with current kernel conventions, this moves all of these
       comment blocks to the top of the function definitions, transforming
       them into the kdoc format in the process. This should make it much
       easier to maintain these comments, which are the main source of LSM
       hook documentation.
    
       For the most part the comment contents were left as-is, although some
       glaring errors were corrected. Expect additional edits in the future
       as we slowly update and correct the comment blocks.
    
       This is the bulk of the diffstat.
    
     - Introduce LSM_ORDER_LAST
    
       Similar to how LSM_ORDER_FIRST is used to specify LSMs which should
       be ordered before "normal" LSMs, the LSM_ORDER_LAST is used to
       specify LSMs which should be ordered after "normal" LSMs.
    
       This is one of the prerequisites for transitioning IMA/EVM to a
       proper LSM.
    
     - Remove the security_old_inode_init_security() hook
    
       The security_old_inode_init_security() LSM hook only allows for a
       single xattr which is problematic both for LSM stacking and the
       IMA/EVM-as-a-LSM effort. This finishes the conversion over to the
       security_inode_init_security() hook and removes the single-xattr LSM
       hook.
    
     - Fix a reiserfs problem with security xattrs
    
       During the security_old_inode_init_security() removal work it became
       clear that reiserfs wasn't handling security xattrs properly so we
       fixed it.
    
    * tag 'lsm-pr-20230420' of git://git.kernel.org/pub/scm/linux/kernel/git/pcmoore/lsm: (32 commits)
      reiserfs: Add security prefix to xattr name in reiserfs_security_write()
      security: Remove security_old_inode_init_security()
      ocfs2: Switch to security_inode_init_security()
      reiserfs: Switch to security_inode_init_security()
      security: Remove integrity from the LSM list in Kconfig
      Revert "integrity: double check iint_cache was initialized"
      security: Introduce LSM_ORDER_LAST and set it for the integrity LSM
      device_cgroup: Fix typo in devcgroup_css_alloc description
      lsm: fix a badly named parameter in security_get_getsecurity()
      lsm: fix doc warnings in the LSM hook comments
      lsm: styling fixes to security/security.c
      lsm: move the remaining LSM hook comments to security/security.c
      lsm: move the io_uring hook comments to security/security.c
      lsm: move the perf hook comments to security/security.c
      lsm: move the bpf hook comments to security/security.c
      lsm: move the audit hook comments to security/security.c
      lsm: move the binder hook comments to security/security.c
      lsm: move the sysv hook comments to security/security.c
      lsm: move the key hook comments to security/security.c
      lsm: move the xfrm hook comments to security/security.c
      ...

commit 72eaa0967b594cb9886c2f277a69ac1ea935b1a8
Merge: a5624566431d 4ce1f694eb5d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 11:11:59 2023 -0700

    Merge tag 'selinux-pr-20230420' of git://git.kernel.org/pub/scm/linux/kernel/git/pcmoore/selinux
    
    Pull selinux updates from Paul Moore:
    
     - Stop passing the 'selinux_state' pointers as function arguments
    
       As discussed during the end of the last development cycle, passing a
       selinux_state pointer through the SELinux code has a noticeable
       impact on performance, and with the current code it is not strictly
       necessary.
    
       This simplifies things by referring directly to the single
       selinux_state global variable which should help improve SELinux
       performance.
    
     - Uninline the unlikely portions of avc_has_perm_noaudit()
    
       This change was also based on a discussion from the last development
       cycle, and is heavily based on an initial proof of concept patch from
       you. The core issue was that avc_has_perm_noaudit() was not able to
       be inlined, as intended, due to its size. We solved this issue by
       extracting the less frequently hit portions of avc_has_perm_noaudit()
       into a separate function, reducing the size of avc_has_perm_noaudit()
       to the point where the compiler began inlining the function. We also
       took the opportunity to clean up some ugly RCU locking in the code
       that became uglier with the change.
    
     - Remove the runtime disable functionality
    
       After several years of work by the userspace and distro folks, we are
       finally in a place where we feel comfortable removing the runtime
       disable functionality which we initially deprecated at the start of
       2020.
    
       There is plenty of information in the kernel's deprecation (now
       removal) notice, but the main motivation was to be able to safely
       mark the LSM hook structures as '__ro_after_init'.
    
       LWN also wrote a good summary of the deprecation this morning which
       offers a more detailed history:
    
            https://lwn.net/SubscriberLink/927463/dcfa0d4ed2872f03
    
     - Remove the checkreqprot functionality
    
       The original checkreqprot deprecation notice stated that the removal
       would happen no sooner than June 2021, which means this falls hard
       into the "better late than never" bucket.
    
       The Kconfig and deprecation notice has more detail on this setting,
       but the basic idea is that we want to ensure that the SELinux policy
       allows for the memory protections actually applied by the kernel, and
       not those requested by the process.
    
       While we haven't found anyone running a supported distro that is
       affected by this deprecation/removal, anyone who is affected would
       only need to update their policy to reflect the reality of their
       applications' mapping protections.
    
     - Minor Makefile improvements
    
       Some minor Makefile improvements to correct some dependency issues
       likely only ever seen by SELinux developers. I expect we will have at
       least one more tweak to the Makefile during the next merge window,
       but it didn't quite make the cutoff this time around.
    
    * tag 'selinux-pr-20230420' of git://git.kernel.org/pub/scm/linux/kernel/git/pcmoore/selinux:
      selinux: ensure av_permissions.h is built when needed
      selinux: fix Makefile dependencies of flask.h
      selinux: stop returning node from avc_insert()
      selinux: clean up dead code after removing runtime disable
      selinux: update the file list in MAINTAINERS
      selinux: remove the runtime disable functionality
      selinux: remove the 'checkreqprot' functionality
      selinux: stop passing selinux_state pointers and their offspring
      selinux: uninline unlikely parts of avc_has_perm_noaudit()

commit 8375be2b6414577487486a92995bdc97a7934033
Author: Qi Han <hanqi@vivo.com>
Date:   Tue Apr 18 14:09:54 2023 +0800

    f2fs: remove unnessary comment in __may_age_extent_tree
    
    This comment make no sense and is in the wrong place, so let's
    remove it.
    
    Signed-off-by: Qi Han <hanqi@vivo.com>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

M	fs/f2fs/extent_cache.c

commit 994b442b66a4624a2f471aba5cbae37a79213313
Author: Daeho Jeong <daehojeong@google.com>
Date:   Tue Apr 18 10:42:01 2023 -0700

    f2fs: allocate node blocks for atomic write block replacement
    
    When a node block is missing for atomic write block replacement, we need
    to allocate it in advance of the replacement.
    
    Signed-off-by: Daeho Jeong <daehojeong@google.com>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

M	fs/f2fs/segment.c

commit 591fc34e1f98b0d7eef4aa3440bfdff3c5a1cadd
Author: Daeho Jeong <daehojeong@google.com>
Date:   Tue Apr 18 10:52:06 2023 -0700

    f2fs: use cow inode data when updating atomic write
    
    Need to use cow inode data content instead of the one in the original
    inode, when we try to write the already updated atomic write files.
    
    Signed-off-by: Daeho Jeong <daehojeong@google.com>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

M	fs/f2fs/data.c

commit 2e2c6e9b72ce3d137984c867eb5625b8498cfe2b
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Mon Apr 17 17:12:52 2023 -0700

    f2fs: remove power-of-two limitation of zoned device
    
    In f2fs, there's no reason to force po2.
    
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

M	fs/f2fs/f2fs.h
M	fs/f2fs/gc.c
M	fs/f2fs/segment.c
M	fs/f2fs/super.c

commit a5624566431de76b17862383d9ae254d9606cba9
Merge: 487c20b016dc 034ff37d3407
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 10:39:27 2023 -0700

    Merge branch 'x86-rep-insns': x86 user copy clarifications
    
    Merge my x86 user copy updates branch.
    
    This cleans up a lot of our x86 memory copy code, particularly for user
    accesses.  I've been pushing for microarchitectural support for good
    memory copying and clearing for a long while, and it's been visible in
    how the kernel has aggressively used 'rep movs' and 'rep stos' whenever
    possible.
    
    And that micro-architectural support has been improving over the years,
    to the point where on modern CPU's the best option for a memory copy
    that would become a function call (as opposed to being something that
    can just be turned into individual 'mov' instructions) is now to inline
    the string instruction sequence instead.
    
    However, that only makes sense when we have the modern markers for this:
    the x86 FSRM and FSRS capabilities ("Fast Short REP MOVS/STOS").
    
    So this cleans up a lot of our historical code, gets rid of the legacy
    marker use ("REP_GOOD" and "ERMS") from the memcpy/memset cases, and
    replaces it with that modern reality.  Note that REP_GOOD and ERMS end
    up still being used by the known large cases (ie page copyin gand
    clearing).
    
    The reason much of this ends up being about user memory accesses is that
    the normal in-kernel cases are done by the compiler (__builtin_memcpy()
    and __builtin_memset()) and getting to the point where we can use our
    instruction rewriting to inline those to be string instructions will
    need some compiler support.
    
    In contrast, the user accessor functions are all entirely controlled by
    the kernel code, so we can change those arbitrarily.
    
    Thanks to Borislav Petkov for feedback on the series, and Jens testing
    some of this on micro-architectures I didn't personally have access to.
    
    * x86-rep-insns:
      x86: rewrite '__copy_user_nocache' function
      x86: remove 'zerorest' argument from __copy_user_nocache()
      x86: set FSRS automatically on AMD CPUs that have FSRM
      x86: improve on the non-rep 'copy_user' function
      x86: improve on the non-rep 'clear_user' function
      x86: inline the 'rep movs' in user copies for the FSRM case
      x86: move stac/clac from user copy routines into callers
      x86: don't use REP_GOOD or ERMS for user memory clearing
      x86: don't use REP_GOOD or ERMS for user memory copies
      x86: don't use REP_GOOD or ERMS for small memory clearing
      x86: don't use REP_GOOD or ERMS for small memory copies

commit 487c20b016dc48230367a7be017f40313e53e3bd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 30 14:53:51 2023 -0700

    iov: improve copy_iovec_from_user() code generation
    
    Use the same pattern as the compat version of this code does: instead of
    copying the whole array to a kernel buffer and then having a separate
    phase of verifying it, just do it one entry at a time, verifying as you
    go.
    
    On Jens' /dev/zero readv() test this improves performance by ~6%.
    
    [ This was obviously triggered by Jens' ITER_UBUF updates series ]
    
    Reported-and-tested-by: Jens Axboe <axboe@kernel.dk>
    Link: https://lore.kernel.org/all/de35d11d-bce7-e976-7372-1f2caf417103@kernel.dk/
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

M	lib/iov_iter.c

commit b9dff2195f8a5847fad801046b26955e05670d31
Merge: d88867a24fa7 50f9a76ef127
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 10:29:28 2023 -0700

    Merge tag 'iter-ubuf.2-2023-04-21' of git://git.kernel.dk/linux
    
    Pull ITER_UBUF updates from Jens Axboe:
     "This turns singe vector imports into ITER_UBUF, rather than
      ITER_IOVEC.
    
      The former is more trivial to iterate and advance, and hence a bit
      more efficient. From some very unscientific testing, ~60% of all iovec
      imports are single vector"
    
    * tag 'iter-ubuf.2-2023-04-21' of git://git.kernel.dk/linux:
      iov_iter: Mark copy_compat_iovec_from_user() noinline
      iov_iter: import single vector iovecs as ITER_UBUF
      iov_iter: convert import_single_range() to ITER_UBUF
      iov_iter: overlay struct iovec and ubuf/len
      iov_iter: set nr_segs = 1 for ITER_UBUF
      iov_iter: remove iov_iter_iovec()
      iov_iter: add iter_iov_addr() and iter_iov_len() helpers
      ALSA: pcm: check for user backed iterator, not specific iterator type
      IB/qib: check for user backed iterator, not specific iterator type
      IB/hfi1: check for user backed iterator, not specific iterator type
      iov_iter: add iter_iovec() helper
      block: ensure bio_alloc_map_data() deals with ITER_UBUF correctly

commit d88867a24fa7e9c75b8f86df20d4f40e2fe61e9b
Merge: 1a261a6e10e8 60261442c1b9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 24 10:26:22 2023 -0700

    Merge tag 'for-linus' of git://git.armlinux.org.uk/~rmk/linux-arm
    
    Pull ARM development updates from Russell King:
     "Four changes for v6.4:
    
       - simplify the path to the top vmlinux
    
       - three patches to fix vfp with instrumentation enabled (eg lockdep)"
    
    * tag 'for-linus' of git://git.armlinux.org.uk/~rmk/linux-arm:
      ARM: 9294/2: vfp: Fix broken softirq handling with instrumentation enabled
      ARM: 9293/1: vfp: Pass successful return address via register R3
      ARM: 9292/1: vfp: Pass thread_info pointer to vfp_support_entry
      ARM: 9291/1: decompressor: simplify the path to the top vmlinux

commit 1a261a6e10e80cd7c69c3f5bdf47cd41f928fd08
Author: Ruihan Li <lrh2000@pku.edu.cn>
Date:   Tue Apr 25 00:21:10 2023 +0800

    scripts: Remove ICC-related dead code
    
    Intel compiler support has already been completely removed in commit
    95207db8166a ("Remove Intel compiler support").  However, it appears
    that there is still some ICC-related code in scripts/cc-version.sh.
    There is no harm in leaving the code as it is, but removing the dead
    code makes the codebase a bit cleaner.
    
    Hopefully all ICC-related stuff in the build scripts will be removed
    after this commit, given the grep output as below:
    
            (linux/scripts) $ grep -i -w -R 'icc'
            cc-version.sh:ICC)
            cc-version.sh:  min_version=$($min_tool_version icc)
            dtc/include-prefixes/arm64/qcom/sm6350.dtsi:#include <dt-bindings/interconnect/qcom,icc.h>
    
    Fixes: 95207db8166a ("Remove Intel compiler support")
    Signed-off-by: Ruihan Li <lrh2000@pku.edu.cn>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

M	scripts/cc-version.sh

commit d3f2c402e44887e507b65d65f0d0515d46575bf5
Merge: 21def611d829 73d73f5ee7fb ddd66d634735 0ba4962d01b6 34ea427e01ea
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Apr 24 18:37:20 2023 +0200

    Merge branches 'pm-core', 'pm-sleep', 'pm-opp' and 'pm-tools'
    
    Merge PM core changes, updates related to system sleep support,
    operating performance points (OPP) changes and power management
    utilities changes for 6.4-rc1:
    
     - Drop unnecessary (void *) conversions from the PM core (Li zeming).
    
     - Add sysfs files to represent time spent in a platform sleep state
       during suspend-to-idle and make AMD and Intel PMC drivers use them
       (Mario Limonciello).
    
     - Use of_property_present() for testing DT property presence (Rob
       Herring).
    
     - Add set_required_opps() callback to the 'struct opp_table', to make
       the code paths cleaner (Viresh Kumar).
    
     - Update the pm-graph siute of utilities to v5.11 with the following
       changes:
       * New script which allows users to install the latest pm-graph
         from the upstream github repo.
       * Update all the dmesg suspend/resume PM print formats to be able to
         process recent timelines using dmesg only.
       * Add ethtool output to the log for the system's ethernet device if
         ethtool exists.
       * Make the tool more robustly handle events where mangled dmesg or
         ftrace outputs do not include all the requisite data.
    
     - Make the sleepgraph utility recognize "CPU killed" messages (Xueqin
       Luo).
    
    * pm-core:
      PM: core: Remove unnecessary (void *) conversions
    
    * pm-sleep:
      platform/x86/intel/pmc: core: Report duration of time in HW sleep state
      platform/x86/intel/pmc: core: Always capture counters on suspend
      platform/x86/amd: pmc: Report duration of time in hw sleep state
      PM: Add sysfs files to represent time spent in hardware sleep state
    
    * pm-opp:
      OPP: Move required opps configuration to specialized callback
      OPP: Handle all genpd cases together in _set_required_opps()
      opp: Use of_property_present() for testing DT property presence
    
    * pm-tools:
      PM: tools: sleepgraph: Recognize "CPU killed" messages
      pm-graph: Update to v5.11

commit 21def611d82976a1dca8c29b800194f29e013151
Merge: 640324e3e62b f914bfdd7f84
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Apr 24 18:36:07 2023 +0200

    Merge branch 'pm-cpuidle'
    
    Merge a cpuidle change for 6.4-rc1:
    
     - Use of_property_present() for testing DT property presence in the
       cpuidle code (Rob Herring).
    
    * pm-cpuidle:
      cpuidle: Use of_property_present() for testing DT property presence

commit 640324e3e62b5d0fada90a6d120d540956b4774b
Merge: 8271f3846fa8 0bdd95cede51
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Apr 24 18:24:47 2023 +0200

    Merge branch 'pm-cpufreq'
    
    Merge cpufreq updates for 6.4-rc1:
    
     - Fix the frequency unit in cpufreq_verify_current_freq checks()
       (Sanjay Chandrashekara).
    
     - Make mode_state_machine in amd-pstate static (Tom Rix).
    
     - Make the cpufreq core require drivers with target_index() to set
       freq_table (Viresh Kumar).
    
     - Fix typo in the ARM_BRCMSTB_AVS_CPUFREQ Kconfig entry (Jingyu Wang).
    
     - Use of_property_read_bool() for boolean properties in the pmac32
       cpufreq driver (Rob Herring).
    
     - Make the cpufreq sysfs interface return proper error codes on
       obviously invalid input (qinyu).
    
     - Add guided autonomous mode support to the AMD P-state driver (Wyes
       Karny).
    
     - Make the Intel P-state driver enable HWP IO boost on all server
       platforms (Srinivas Pandruvada).
    
     - Add opp and bandwidth support to tegra194 cpufreq driver (Sumit
       Gupta).
    
     - Use of_property_present() for testing DT property presence (Rob
       Herring).
    
     - Remove MODULE_LICENSE in non-modules (Nick Alcock).
    
     - Add SM7225 to cpufreq-dt-platdev blocklist (Luca Weiss).
    
     - Optimizations and fixes for qcom-cpufreq-hw driver (Krzysztof
       Kozlowski, Konrad Dybcio, and Bjorn Andersson).
    
     - DT binding updates for qcom-cpufreq-hw driver (Konrad Dybcio and
       Bartosz Golaszewski).
    
     - Updates and fixes for mediatek driver (Jia-Wei Chang and
       AngeloGioacchino Del Regno).
    
    * pm-cpufreq: (29 commits)
      cpufreq: use correct unit when verify cur freq
      cpufreq: tegra194: add OPP support and set bandwidth
      cpufreq: amd-pstate: Make varaiable mode_state_machine static
      cpufreq: drivers with target_index() must set freq_table
      cpufreq: qcom-cpufreq-hw: Revert adding cpufreq qos
      dt-bindings: cpufreq: cpufreq-qcom-hw: Add QCM2290
      dt-bindings: cpufreq: cpufreq-qcom-hw: Sanitize data per compatible
      dt-bindings: cpufreq: cpufreq-qcom-hw: Allow just 1 frequency domain
      cpufreq: Add SM7225 to cpufreq-dt-platdev blocklist
      cpufreq: qcom-cpufreq-hw: fix double IO unmap and resource release on exit
      cpufreq: mediatek: Raise proc and sram max voltage for MT7622/7623
      cpufreq: mediatek: raise proc/sram max voltage for MT8516
      cpufreq: mediatek: fix KP caused by handler usage after regulator_put/clk_put
      cpufreq: mediatek: fix passing zero to 'PTR_ERR'
      cpufreq: pmac32: Use of_property_read_bool() for boolean properties
      cpufreq: Fix typo in the ARM_BRCMSTB_AVS_CPUFREQ Kconfig entry
      cpufreq: warn about invalid vals to scaling_max/min_freq interfaces
      Documentation: cpufreq: amd-pstate: Update amd_pstate status sysfs for guided
      cpufreq: amd-pstate: Add guided mode control support via sysfs
      cpufreq: amd-pstate: Add guided autonomous mode
      ...

commit 4f810294e00bd99da9ec3c8fe3185a73e39bcd6c
Merge: 21fc506cf5ef 2c5a06e5505a 55f4f6ead46c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Apr 24 18:07:56 2023 +0200

    Merge branches 'acpi-utils' and 'acpi-docs'
    
    Merge ACPI utilities and documentation updates for 6.4-rc1:
    
     - Fix acpi_evaluate_dsm_typed() redefinition error (Kiran K).
    
     - Update the pm_profile sysfs attribute documentation (Rafael Wysocki).
    
    * acpi-utils:
      ACPI: utils: Fix acpi_evaluate_dsm_typed() redefinition error
    
    * acpi-docs:
      ACPI: docs: Update the pm_profile sysfs attribute documentation

commit 21fc506cf5ef5de9c2cdc04036e35169d2b3e7d6
Merge: 0f318baaf23d faae443738c6 abe4f5ae5efa 45166620b725
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Apr 24 18:01:57 2023 +0200

    Merge branches 'acpi-bus', 'acpi-video' and 'acpi-misc'
    
    Merge ACPI bus type driver changes, ACPI backlight driver updates and a
    series of cleanups related to of.h for 6.4-rc1:
    
     - Ensure that ACPI notify handlers are not running after removal and
       clean up code in acpi_sb_notify() (Rafael Wysocki).
    
     - Remove register_backlight_delay module option and code and remove
       quirks for false-positive backlight control support advertised on
       desktop boards (Hans de Goede).
    
     - Replace irqdomain.h include with struct declarations in ACPI headers
       and update several pieces of code previously including of.h
       implicitly through those headers (Rob Herring).
    
    * acpi-bus:
      ACPI: bus: Ensure that notify handlers are not running after removal
      ACPI: bus: Add missing braces to acpi_sb_notify()
    
    * acpi-video:
      ACPI: video: Remove desktops without backlight DMI quirks
      ACPI: video: Remove register_backlight_delay module option and code
    
    * acpi-misc:
      ACPI: Replace irqdomain.h include with struct declarations
      fpga: lattice-sysconfig-spi: Add explicit include for of.h
      tpm: atmel: Add explicit include for of.h
      virtio-mmio: Add explicit include for of.h
      pata: ixp4xx: Add explicit include for of.h
      ata: pata_macio: Add explicit include of irqdomain.h
      serial: 8250_tegra: Add explicit include for of.h
      net: rfkill-gpio: Add explicit include for of.h
      staging: iio: resolver: ad2s1210: Add explicit include for of.h
      iio: adc: ad7292: Add explicit include for of.h

commit 0f318baaf23d0feb939cf9d3251712198c429879
Merge: 0e838286080d f1e65718ec18 1fbd9029c8d5 3bd554e03ef4 0dc9a715578b
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Apr 24 17:54:02 2023 +0200

    Merge branches 'acpi-apei', 'acpi-properties', 'acpi-sbs' and 'acpi-thermal'
    
    Merge ACPI APEI changes, ACPI device properties handling update, ACPI
    SBS driver fixes and ACPI thermal driver cleanup for 6.4-rc1:
    
     - Make the APEI error injection code warn on invalid arguments when
       explicitly indicated by platform (Shuai Xue).
    
     - Add CXL error types to the error injection code in APEI (Tony Luck).
    
     - Refactor acpi_data_prop_read_single() (Andy Shevchenko).
    
     - Fix two issues in the ACPI SBS driver (Armin Wolf).
    
     - Replace ternary operator with min_t() in the generic ACPI thermal
       zone driver (Jiangshan Yi).
    
    * acpi-apei:
      ACPI: APEI: EINJ: warn on invalid argument when explicitly indicated by platform
      ACPI: APEI: EINJ: Add CXL error types
    
    * acpi-properties:
      ACPI: property: Refactor acpi_data_prop_read_single()
    
    * acpi-sbs:
      ACPI: SBS: Fix handling of Smart Battery Selectors
      ACPI: EC: Fix oops when removing custom query handlers
      ACPI: EC: Limit explicit removal of query handlers to custom query handlers
    
    * acpi-thermal:
      ACPI: thermal: Replace ternary operator with min_t()

commit 0e838286080d0f458aa20751b15f35f3a7924830
Merge: c90b29cede95 073828e95445 f2cba54a7fbf 47d26684185d 4f855dcead6c
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Apr 24 17:45:49 2023 +0200

    Merge branches 'acpi-processor', 'acpi-pm', 'acpi-tables' and 'acpi-sysfs'
    
    Merge ACPI processor driver changes, ACPI power management updates,
    changes related to parsing ACPI tables and an ACPI sysfs interface
    update for 6.4-rc1:
    
     - Fix evaluating the _PDC ACPI control method when running as Xen
       dom0 (Roger Pau Monne).
    
     - Use platform devices to load ACPI PPC and PCC drivers (Petr Pavlu).
    
     - Check for null return of devm_kzalloc() in fch_misc_setup() (Kang
       Chen).
    
     - Log a message if enable_irq_wake() fails for the ACPI SCI (Simon
       Gaiser).
    
     - Initialize the correct IOMMU fwspec while parsing ACPI VIOT
       (Jean-Philippe Brucker).
    
     - Amend indentation and prefix error messages with FW_BUG in the ACPI
       SPCR parsing code (Andy Shevchenko).
    
     - Enable ACPI sysfs support for CCEL records (Kuppuswamy
       Sathyanarayanan).
    
    * acpi-processor:
      ACPI: processor: Fix evaluating _PDC method when running as Xen dom0
      ACPI: cpufreq: Use platform devices to load ACPI PPC and PCC drivers
      ACPI: processor: Check for null return of devm_kzalloc() in fch_misc_setup()
    
    * acpi-pm:
      ACPI: s2idle: Log when enabling wakeup IRQ fails
    
    * acpi-tables:
      ACPI: VIOT: Initialize the correct IOMMU fwspec
      ACPI: SPCR: Amend indentation
      ACPI: SPCR: Prefix error messages with FW_BUG
    
    * acpi-sysfs:
      ACPI: sysfs: Enable ACPI sysfs support for CCEL records

commit c90b29cede952452f76477296cef3ef411727dd3
Merge: 03c57b0160f6 df2286655ce1
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Apr 24 17:31:41 2023 +0200

    Merge branch 'acpica'
    
    Merge ACPICA material for 6.4-rc1:
    
     - Delete bogus node_array array of pointers from AEST table (Jessica
       Clarke).
    
     - Add support for trace buffer extension in GICC to the ACPI MADT
       parser (Xiongfeng Wang).
    
     - Add missing macro ACPI_FUNCTION_TRACE() for acpi_ns_repair_HID()
       (Xiongfeng Wang).
    
     - Add missing tables to astable (Pedro Falcato).
    
     - Add support for 64 bit loong_arch compilation to ACPICA (Huacai
       Chen).
    
     - Add support for ASPT table in disassembler to ACPICA (Jeremi
       Piotrowski).
    
     - Add support for Arm's MPAM ACPI table version 2 (Hesham Almatary).
    
     - Update all copyrights/signons in ACPICA to 2023 (Bob Moore).
    
     - Add support for ClockInput resource (v6.5) (Niyas Sait).
    
     - Add RISC-V INTC interrupt controller definition to the list of
       supported interrupt controllers for MADT (Sunil V L).
    
     - Add structure definitions for the RISC-V RHCT ACPI table (Sunil V L).
    
     - Address several cases in which the ACPICA code might lead to
       undefined behavior (Tamir Duberstein).
    
     - Make ACPICA code support flexible arrays properly (Kees Cook).
    
     - Check null return of ACPI_ALLOCATE_ZEROED in
       acpi_db_display_objects() (void0red).
    
     - Add os specific support for Zephyr RTOS to ACPICA (Najumon).
    
     - Update version to 20230331 (Bob Moore).
    
    * acpica: (32 commits)
      ACPICA: Update version to 20230331
      ACPICA: add os specific support for Zephyr RTOS
      ACPICA: ACPICA: check null return of ACPI_ALLOCATE_ZEROED in acpi_db_display_objects
      ACPICA: acpi_resource_irq: Replace 1-element arrays with flexible array
      ACPICA: acpi_madt_oem_data: Fix flexible array member definition
      ACPICA: acpi_dmar_andd: Replace 1-element array with flexible array
      ACPICA: acpi_pci_routing_table: Replace fixed-size array with flex array member
      ACPICA: struct acpi_resource_dma: Replace 1-element array with flexible array
      ACPICA: Introduce ACPI_FLEX_ARRAY
      ACPICA: struct acpi_nfit_interleave: Replace 1-element array with flexible array
      ACPICA: actbl2: Replace 1-element arrays with flexible arrays
      ACPICA: actbl1: Replace 1-element arrays with flexible arrays
      ACPICA: struct acpi_resource_vendor: Replace 1-element array with flexible array
      ACPICA: Avoid undefined behavior: load of misaligned address
      ACPICA: Avoid undefined behavior: member access within misaligned address
      ACPICA: Avoid undefined behavior: member access within misaligned address
      ACPICA: Avoid undefined behavior: member access within misaligned address
      ACPICA: Avoid undefined behavior: member access within misaligned address
      ACPICA: Avoid undefined behavior: member access within null pointer
      ACPICA: Avoid undefined behavior: applying zero offset to null pointer
      ...

commit c9c8133080c75ce2440001d765dbe8c24f932ea2
Merge: 1b47b80e2fa7 6486a57f05d3
Author: Petr Mladek <pmladek@suse.com>
Date:   Mon Apr 24 16:49:08 2023 +0200

    Merge branch 'for-6.4/doc' into for-linus

commit bd8621ca1510e6e802df9855bdc35a04a3cfa932
Author: Jarkko Sakkinen <jarkko@kernel.org>
Date:   Sun Apr 23 18:49:58 2023 +0300

    tpm: Add !tpm_amd_is_rng_defective() to the hwrng_unregister() call site
    
    The following crash was reported:
    
    [ 1950.279393] list_del corruption, ffff99560d485790->next is NULL
    [ 1950.279400] ------------[ cut here ]------------
    [ 1950.279401] kernel BUG at lib/list_debug.c:49!
    [ 1950.279405] invalid opcode: 0000 [#1] PREEMPT SMP NOPTI
    [ 1950.279407] CPU: 11 PID: 5886 Comm: modprobe Tainted: G O 6.2.8_1 #1
    [ 1950.279409] Hardware name: Gigabyte Technology Co., Ltd. B550M AORUS PRO-P/B550M AORUS PRO-P,
    BIOS F15c 05/11/2022
    [ 1950.279410] RIP: 0010:__list_del_entry_valid+0x59/0xc0
    [ 1950.279415] Code: 48 8b 01 48 39 f8 75 5a 48 8b 72 08 48 39 c6 75 65 b8 01 00 00 00 c3 cc cc cc
    cc 48 89 fe 48 c7 c7 08 a8 13 9e e8 b7 0a bc ff <0f> 0b 48 89 fe 48 c7 c7 38 a8 13 9e e8 a6 0a bc
    ff 0f 0b 48 89 fe
    [ 1950.279416] RSP: 0018:ffffa96d05647e08 EFLAGS: 00010246
    [ 1950.279418] RAX: 0000000000000033 RBX: ffff99560d485750 RCX: 0000000000000000
    [ 1950.279419] RDX: 0000000000000000 RSI: ffffffff9e107c59 RDI: 00000000ffffffff
    [ 1950.279420] RBP: ffffffffc19c5168 R08: 0000000000000000 R09: ffffa96d05647cc8
    [ 1950.279421] R10: 0000000000000003 R11: ffffffff9ea2a568 R12: 0000000000000000
    [ 1950.279422] R13: ffff99560140a2e0 R14: ffff99560127d2e0 R15: 0000000000000000
    [ 1950.279422] FS: 00007f67da795380(0000) GS:ffff995d1f0c0000(0000) knlGS:0000000000000000
    [ 1950.279424] CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1950.279424] CR2: 00007f67da7e65c0 CR3: 00000001feed2000 CR4: 0000000000750ee0
    [ 1950.279426] PKRU: 55555554
    [ 1950.279426] Call Trace:
    [ 1950.279428] <TASK>
    [ 1950.279430] hwrng_unregister+0x28/0xe0 [rng_core]
    [ 1950.279436] tpm_chip_unregister+0xd5/0xf0 [tpm]
    
    Add the forgotten !tpm_amd_is_rng_defective() invariant to the
    hwrng_unregister() call site inside tpm_chip_unregister().
    
    Cc: stable@vger.kernel.org
    Reported-by: Martin Dimov <martin@dmarto.com>
    Link: https://lore.kernel.org/linux-integrity/3d1d7e9dbfb8c96125bc93b6b58b90a7@dmarto.com/
    Fixes: f1324bbc4011 ("tpm: disable hwrng for fTPM on some AMD designs")
    Fixes: b006c439d58d ("hwrng: core - start hwrng kthread also for untrusted sources")
    Tested-by: Martin Dimov <martin@dmarto.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm-chip.c

commit 77218e83c83c1cd4b994edfb5b162ece42e73ffe
Author: Haris Okanovic <haris.okanovic@ni.com>
Date:   Wed Apr 19 17:41:30 2023 +0200

    tpm_tis: fix stall after iowrite*()s
    
    ioread8() operations to TPM MMIO addresses can stall the CPU when
    immediately following a sequence of iowrite*()'s to the same region.
    
    For example, cyclitest measures ~400us latency spikes when a non-RT
    usermode application communicates with an SPI-based TPM chip (Intel Atom
    E3940 system, PREEMPT_RT kernel). The spikes are caused by a
    stalling ioread8() operation following a sequence of 30+ iowrite8()s to
    the same address. I believe this happens because the write sequence is
    buffered (in CPU or somewhere along the bus), and gets flushed on the
    first LOAD instruction (ioread*()) that follows.
    
    The enclosed change appears to fix this issue: read the TPM chip's
    access register (status code) after every iowrite*() operation to
    amortize the cost of flushing data to chip across multiple instructions.
    
    Signed-off-by: Haris Okanovic <haris.okanovic@ni.com>
    Link: https://lore.kernel.org/r/20230323153436.B2SATnZV@linutronix.de
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis.c

commit 7b69ef62034492b816c65b1d15b45834df2b194e
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Mar 20 09:06:07 2023 +0100

    tpm/tpm_tis_synquacer: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_synquacer.c

commit c3da2c6eeb10e71cc7be33c4b17ced60024fd9b0
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Mar 20 09:06:06 2023 +0100

    tpm/tpm_tis: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis.c

commit bd88328607c4650ee8e7746a287375c5a618d09e
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Mar 20 09:06:05 2023 +0100

    tpm/tpm_ftpm_tee: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    ftpm_tee_remove() returns zero unconditionally (and cannot easily
    converted to return void). So ignore the return value to be able to make
    ftpm_plat_tee_remove() return void.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_ftpm_tee.c

commit 3fb29a23fcdadc9d7b60d323bbc1d9896249f6ac
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Sat Mar 11 18:35:41 2023 +0100

    tpm: tpm_tis_spi: Mark ACPI and OF related data as maybe unused
    
    The driver can be compile tested with !CONFIG_OF or !CONFIG_ACPI making
    unused:
    
      drivers/char/tpm/tpm_tis_spi_main.c:234:34: error: ‘of_tis_spi_match’ defined but not used [-Werror=unused-const-variable=]
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_spi_main.c

commit c3985d8b9c224b359851f0a521ad25a83db6bdca
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Sat Mar 11 18:35:40 2023 +0100

    tpm: st33zp24: Mark ACPI and OF related data as maybe unused
    
    The driver can be compile tested with !CONFIG_OF or !CONFIG_ACPI making
    
      drivers/char/tpm/st33zp24/i2c.c:141:34: error: ‘of_st33zp24_i2c_match’ defined but not used [-Werror=unused-const-variable=]
      drivers/char/tpm/st33zp24/spi.c:258:34: error: ‘of_st33zp24_spi_match’ defined but not used [-Werror=unused-const-variable=]
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/st33zp24/i2c.c
M	drivers/char/tpm/st33zp24/spi.c

commit e644b2f498d297a928efcb7ff6f900c27f8b788e
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:38 2022 +0100

    tpm, tpm_tis: Enable interrupt test
    
    The test for interrupts in tpm_tis_send() is skipped if the flag
    TPM_CHIP_FLAG_IRQ is not set. Since the current code never sets the flag
    initially the test is never executed.
    
    Fix this by setting the flag in tpm_tis_gen_interrupt() right after
    interrupts have been enabled and before the test is executed.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Michael Niewöhner <linux@mniewoehner.de>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c

commit 548eb516ec0f7a484a23a902835899341164b8ea
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:37 2022 +0100

    tpm, tpm_tis: startup chip before testing for interrupts
    
    In tpm_tis_gen_interrupt() a request for a property value is sent to the
    TPM to test if interrupts are generated. However after a power cycle the
    TPM responds with TPM_RC_INITIALIZE which indicates that the TPM is not
    yet properly initialized.
    Fix this by first starting the TPM up before the request is sent. For this
    the startup implementation is removed from tpm_chip_register() and put
    into the new function tpm_chip_startup() which is called before the
    interrupts are tested.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm-chip.c
M	drivers/char/tpm/tpm.h
M	drivers/char/tpm/tpm_tis_core.c

commit 955df4f87760b3bb2af253d3fbb12fb712b3ffa6
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:36 2022 +0100

    tpm, tpm_tis: Claim locality when interrupts are reenabled on resume
    
    In tpm_tis_resume() make sure that the locality has been claimed when
    tpm_tis_reenable_interrupts() is called. Otherwise the writings to the
    register might not have any effect.
    
    Fixes: 45baa1d1fa39 ("tpm_tis: Re-enable interrupts upon (S3) resume")
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c

commit 0e069265bce5a40c4eee52e2364bbbd4dabee94a
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:35 2022 +0100

    tpm, tpm_tis: Claim locality in interrupt handler
    
    Writing the TPM_INT_STATUS register in the interrupt handler to clear the
    interrupts only has effect if a locality is held. Since this is not
    guaranteed at the time the interrupt is fired, claim the locality
    explicitly in the handler.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Michael Niewöhner <linux@mniewoehner.de>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c

commit 0c7e66e5fd69bf21034c9a9b081d7de7c3eb2cea
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:34 2022 +0100

    tpm, tpm_tis: Request threaded interrupt handler
    
    The TIS interrupt handler at least has to read and write the interrupt
    status register. In case of SPI both operations result in a call to
    tpm_tis_spi_transfer() which uses the bus_lock_mutex of the spi device
    and thus must only be called from a sleepable context.
    
    To ensure this request a threaded interrupt handler.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Michael Niewöhner <linux@mniewoehner.de>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c

commit 7a2f55d0be296c4e81fd782f3d6c43ed4ec7e265
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:33 2022 +0100

    tpm, tpm: Implement usage counter for locality
    
    Implement a usage counter for the (default) locality used by the TPM TIS
    driver:
    Request the locality from the TPM if it has not been claimed yet, otherwise
    only increment the counter. Also release the locality if the counter is 0
    otherwise only decrement the counter. Since in case of SPI the register
    accesses are locked by means of the SPI bus mutex use a sleepable lock
    (i.e. also a mutex) to ensure thread-safety of the counter which may be
    accessed by both a userspace thread and the interrupt handler.
    
    By doing this refactor the names of the amended functions to use a more
    appropriate prefix.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Michael Niewöhner <linux@mniewoehner.de>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c
M	drivers/char/tpm/tpm_tis_core.h

commit 35f621287ead686b66aa17aa605ed5d7c95883dc
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:32 2022 +0100

    tpm, tpm_tis: do not check for the active locality in interrupt handler
    
    After driver initialization tpm_tis_data->locality may only be modified in
    case of a LOCALITY CHANGE interrupt. In this case the interrupt handler
    iterates over all localities only to assign the active one to
    tpm_tis_data->locality.
    
    However this information is never used any more, so the assignment is not
    needed.
    Furthermore without the assignment tpm_tis_data->locality cannot change any
    more at driver runtime, and thus no protection against concurrent
    modification is required when the variable is read at other places.
    
    So remove this iteration entirely.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c

commit 4303553bced7a1d84583dada552393f5ebd31e54
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:31 2022 +0100

    tpm, tpm_tis: Move interrupt mask checks into own function
    
    Clean up wait_for_tpm_stat() by moving multiple similar interrupt mask
    checks into an own function.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Suggested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c

commit e87fcf0dc2b47fac5b4824f00f74dfbcd4acd363
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:30 2022 +0100

    tpm, tpm_tis: Only handle supported interrupts
    
    According to the TPM Interface Specification (TIS) support for "stsValid"
    and "commandReady" interrupts is only optional.
    This has to be taken into account when handling the interrupts in functions
    like wait_for_tpm_stat(). To determine the supported interrupts use the
    capability query.
    
    Also adjust wait_for_tpm_stat() to only wait for interrupt reported status
    changes. After that process all the remaining status changes by polling
    the status register.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Michael Niewöhner <linux@mniewoehner.de>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c
M	drivers/char/tpm/tpm_tis_core.h

commit 15d7aa4e46eba87242a320f39773aa16faddadee
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:29 2022 +0100

    tpm, tpm_tis: Claim locality before writing interrupt registers
    
    In tpm_tis_probe_single_irq() interrupt registers TPM_INT_VECTOR,
    TPM_INT_STATUS and TPM_INT_ENABLE are modified to setup the interrupts.
    Currently these modifications are done without holding a locality thus they
    have no effect. Fix this by claiming the (default) locality before the
    registers are written.
    
    Since now tpm_tis_gen_interrupt() is called with the locality already
    claimed remove locality request and release from this function.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c

commit ed9be0e6c892a783800d77a41ca4c7255c6af8c5
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:28 2022 +0100

    tpm, tpm_tis: Do not skip reset of original interrupt vector
    
    If in tpm_tis_probe_irq_single() an error occurs after the original
    interrupt vector has been read, restore the interrupts before the error is
    returned.
    
    Since the caller does not check the error value, return -1 in any case that
    the TPM_CHIP_FLAG_IRQ flag is not set. Since the return value of function
    tpm_tis_gen_interrupt() is not longer used, make it a void function.
    
    Fixes: 1107d065fdf1 ("tpm_tis: Introduce intermediate layer for TPM access")
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c

commit 6d789ad726950e612a7f31044260337237c5b490
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:27 2022 +0100

    tpm, tpm_tis: Disable interrupts if tpm_tis_probe_irq() failed
    
    Both functions tpm_tis_probe_irq_single() and tpm_tis_probe_irq() may setup
    the interrupts and then return with an error. This case is indicated by a
    missing TPM_CHIP_FLAG_IRQ flag in chip->flags.
    Currently the interrupt setup is only undone if tpm_tis_probe_irq_single()
    fails. Undo the setup also if tpm_tis_probe_irq() fails.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Michael Niewöhner <linux@mniewoehner.de>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c

commit 282657a8bd7fddcf511b834f43705001668b33a7
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:26 2022 +0100

    tpm, tpm_tis: Claim locality before writing TPM_INT_ENABLE register
    
    In disable_interrupts() the TPM_GLOBAL_INT_ENABLE bit is unset in the
    TPM_INT_ENABLE register to shut the interrupts off. However modifying the
    register is only possible with a held locality. So claim the locality
    before disable_interrupts() is called.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Michael Niewöhner <linux@mniewoehner.de>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_core.c

commit 858e8b792d06f45c427897bd90205a1d90bf430f
Author: Lino Sanfilippo <l.sanfilippo@kunbus.com>
Date:   Thu Nov 24 14:55:25 2022 +0100

    tpm, tpm_tis: Avoid cache incoherency in test for interrupts
    
    The interrupt handler that sets the boolean variable irq_tested may run on
    another CPU as the thread that checks irq_tested as part of the irq test in
    tpm_tis_send().
    
    Since nothing guarantees cache coherency between CPUs for unsynchronized
    accesses to boolean variables the testing thread might not perceive the
    value change done in the interrupt handler.
    
    Avoid this issue by setting the bit TPM_TIS_IRQ_TESTED in the flags field
    of the tpm_tis_data struct and by accessing this field with the bit
    manipulating functions that provide cache coherency.
    
    Also convert all other existing sites to use the proper macros when
    accessing this bitfield.
    
    Signed-off-by: Lino Sanfilippo <l.sanfilippo@kunbus.com>
    Tested-by: Michael Niewöhner <linux@mniewoehner.de>
    Tested-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis.c
M	drivers/char/tpm/tpm_tis_core.c
M	drivers/char/tpm/tpm_tis_core.h

commit 099f26f22f5834ad744aee093ed4d11de13cac15
Author: Eric Snowberg <eric.snowberg@oracle.com>
Date:   Thu Mar 2 11:46:52 2023 -0500

    integrity: machine keyring CA configuration
    
    Add machine keyring CA restriction options to control the type of
    keys that may be added to it. The motivation is separation of
    certificate signing from code signing keys. Subsquent work will
    limit certificates being loaded into the IMA keyring to code
    signing keys used for signature verification.
    
    When no restrictions are selected, all Machine Owner Keys (MOK) are added
    to the machine keyring.  When CONFIG_INTEGRITY_CA_MACHINE_KEYRING is
    selected, the CA bit must be true.  Also the key usage must contain
    keyCertSign, any other usage field may be set as well.
    
    When CONFIG_INTEGRITY_CA_MACHINE_KEYRING_MAX is selected, the CA bit must
    be true. Also the key usage must contain keyCertSign and the
    digitialSignature usage may not be set.
    
    Signed-off-by: Eric Snowberg <eric.snowberg@oracle.com>
    Acked-by: Mimi Zohar <zohar@linux.ibm.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Tested-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	crypto/asymmetric_keys/restrict.c
M	security/integrity/Kconfig
M	security/integrity/digsig.c

commit 76adb2fbc69a13c80b39042aab4d34e99309c8d4
Author: Eric Snowberg <eric.snowberg@oracle.com>
Date:   Thu Mar 2 11:46:51 2023 -0500

    KEYS: CA link restriction
    
    Add a new link restriction.  Restrict the addition of keys in a keyring
    based on the key to be added being a CA.
    
    Signed-off-by: Eric Snowberg <eric.snowberg@oracle.com>
    Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Tested-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	crypto/asymmetric_keys/restrict.c
M	include/crypto/public_key.h

commit 567671281a751b80918a4531c4ba84b90a2a42c0
Author: Eric Snowberg <eric.snowberg@oracle.com>
Date:   Thu Mar 2 11:46:50 2023 -0500

    KEYS: X.509: Parse Key Usage
    
    Parse the X.509 Key Usage.  The key usage extension defines the purpose of
    the key contained in the certificate.
    
       id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
    
          KeyUsage ::= BIT STRING {
               digitalSignature        (0),
               contentCommitment       (1),
               keyEncipherment         (2),
               dataEncipherment        (3),
               keyAgreement            (4),
               keyCertSign             (5),
               cRLSign                 (6),
               encipherOnly            (7),
               decipherOnly            (8) }
    
    If the keyCertSign or digitalSignature is set, store it in the
    public_key structure. Having the purpose of the key being stored
    during parsing, allows enforcement on the usage field in the future.
    This will be used in a follow on patch that requires knowing the
    certificate key usage type.
    
    Link: https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.3
    Signed-off-by: Eric Snowberg <eric.snowberg@oracle.com>
    Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Tested-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	crypto/asymmetric_keys/x509_cert_parser.c
M	include/crypto/public_key.h

commit 30eae2b037af54b24109dcaea21db46f6285c69b
Author: Eric Snowberg <eric.snowberg@oracle.com>
Date:   Thu Mar 2 11:46:49 2023 -0500

    KEYS: X.509: Parse Basic Constraints for CA
    
    Parse the X.509 Basic Constraints.  The basic constraints extension
    identifies whether the subject of the certificate is a CA.
    
    BasicConstraints ::= SEQUENCE {
            cA                      BOOLEAN DEFAULT FALSE,
            pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
    
    If the CA is true, store it in the public_key.  This will be used
    in a follow on patch that requires knowing if the public key is a CA.
    
    Link: https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.9
    Signed-off-by: Eric Snowberg <eric.snowberg@oracle.com>
    Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Tested-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	crypto/asymmetric_keys/x509_cert_parser.c
M	include/crypto/public_key.h

commit ef97e774713fcd34c45f7a7426c7d8845394f7be
Author: Eric Snowberg <eric.snowberg@oracle.com>
Date:   Thu Mar 2 11:46:48 2023 -0500

    KEYS: Add missing function documentation
    
    Compiling with 'W=1' results in warnings that 'Function parameter or member
    not described'
    
    Add the missing parameters for
    restrict_link_by_builtin_and_secondary_trusted and
    restrict_link_to_builtin_trusted.
    
    Use /* instead of /** for get_builtin_and_secondary_restriction, since
    it is a static function.
    
    Fix wrong function name restrict_link_to_builtin_trusted.
    
    Fixes: d3bfe84129f6 ("certs: Add a secondary system keyring that can be added to dynamically")
    Signed-off-by: Eric Snowberg <eric.snowberg@oracle.com>
    Reviewed-by: Petr Vorel <pvorel@suse.cz>
    Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Tested-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	certs/system_keyring.c

commit 7f8da9915fcc6386edf86471bf31e162845930a4
Author: Eric Snowberg <eric.snowberg@oracle.com>
Date:   Thu Mar 2 11:46:47 2023 -0500

    KEYS: Create static version of public_key_verify_signature
    
    The kernel test robot reports undefined reference to
    public_key_verify_signature when CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE is
    not defined. Create a static version in this case and return -EINVAL.
    
    Fixes: db6c43bd2132 ("crypto: KEYS: convert public key and digsig asym to the akcipher api")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Eric Snowberg <eric.snowberg@oracle.com>
    Reviewed-by: Mimi Zohar <zohar@linux.ibm.com>
    Reviewed-by: Petr Vorel <pvorel@suse.cz>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Tested-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	include/crypto/public_key.h

commit eff33245595d7ade7b821c9ed0f688272b16b07b
Author: Yu Zhe <yuzhe@nfschina.com>
Date:   Thu Mar 16 16:50:37 2023 +0800

    tpm: remove unnecessary (void*) conversions
    
    Pointer variables of void * type do not require type cast.
    
    Signed-off-by: Yu Zhe <yuzhe@nfschina.com>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/eventlog/common.c

commit 96785d635bc2b9e6f819cc606424d342a37872b4
Author: Mark Hasemeyer <markhas@chromium.org>
Date:   Tue Mar 14 13:54:04 2023 -0600

    tpm: cr50: i2c: use jiffies to wait for tpm ready irq
    
    When waiting for a tpm ready completion, the cr50 i2c driver incorrectly
    assumes that the value of timeout_a is represented in milliseconds
    instead of jiffies.
    
    Remove the msecs_to_jiffies conversion.
    
    Signed-off-by: Mark Hasemeyer <markhas@chromium.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

M	drivers/char/tpm/tpm_tis_i2c_cr50.c

commit baa6584a24494fbbd2862270d39e61b86987cc91
Merge: 7002cbd62546 dc801ea8ae37
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Apr 24 15:15:31 2023 +0200

    Merge tag 'asoc-v6.4' of https://git.kernel.org/pub/scm/linux/kernel/git/broonie/sound into for-next
    
    ASoC: Updates for v6.4
    
    The bulk of the commits here are for the conversion of drivers to use
    void remove callbacks but there's a reasonable amount of other stuff
    going on, the pace of development with the SOF code continues to be high
    and there's a bunch of new drivers too:
    
     - More core cleanups from Morimto-san.
     - Update drivers to have remove() callbacks returning void, mostly
       mechanical with some substantial changes.
     - Continued feature and simplification work on SOF, including addition
       of a no-DSP mode for bringup, HDA MLink and extensions to the IPC4
       protocol.
     - Hibernation support for CS35L45.
     - More DT binding conversions.
     - Support for Cirrus Logic CS35L56, Freescale QMC, Maxim MAX98363,
       nVidia systems with MAX9809x and RT5631, Realtek RT712, Renesas R-Car
       Gen4, Rockchip RK3588 and TI TAS5733.

commit d9f3a60ebbbd7244fe532dc8dcd278ac1651247f
Merge: 25f061710949 967ca91a996f
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Apr 24 12:59:47 2023 +0100

    Tegra TPM driver with HW flow control
    
    Merge series from Krishna Yarlagadda <kyarlagadda@nvidia.com>:
    
    TPM devices may insert wait state on last clock cycle of ADDR phase.
    For SPI controllers that support full-duplex transfers, this can be
    detected using software by reading the MISO line. For SPI controllers
    that only support half-duplex transfers, such as the Tegra QSPI, it is
    not possible to detect the wait signal from software. The QSPI
    controller in Tegra234 and Tegra241 implement hardware detection of the
    wait signal which can be enabled in the controller for TPM devices.
    
    Add a flag for this in the SPI core and implement support in the Tegra
    QuadSPI driver.

commit 46e614cc91f7bd6f7872e434e6bcfda44454aac3
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Sun Apr 23 09:38:03 2023 +0800

    MIPS: uprobes: Restore thread.trap_nr
    
    thread.trap_nr is saved in arch_uprobe_pre_xol(), it should be restored
    in arch_uprobe_{post,abort}_xol() accordingly, actually it was only done
    in the post function, just do it in the abort function too, this change
    is similar with x86 and powerpc.
    
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

M	arch/mips/kernel/uprobes.c

commit 38c87827ffd3c7e1dd61eee9a7dea13d487dc2ed
Merge: 9496fffcb28f d663d93bb47e
Author: Wolfram Sang <wsa@kernel.org>
Date:   Mon Apr 24 12:50:20 2023 +0200

    Merge branch 'i2c/for-current' into i2c/for-mergewindow
    
    This should have been in 6.3, but sadly I missed it.

commit 2efb07b5ced64d053e6fe6e829e45549aa622168
Merge: fd84c569f7b8 d883a4669a1d
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Apr 24 11:07:20 2023 +0100

    Merge tag 'for-net-next-2023-04-23' of git://git.kernel.org/pub/scm/linux/kernel/git/bluetooth/bluetooth-next
    
    bluetooth-next pull request for net-next:
    
     - Introduce devcoredump support
     - Add support for Realtek RTL8821CS, RTL8851B, RTL8852BS
     - Add support for Mediatek MT7663, MT7922
     - Add support for NXP w8997
     - Add support for Actions Semi ATS2851
     - Add support for QTI WCN6855
     - Add support for Marvell 88W8997

commit 60fd497c99b336e466db0aaeff44c7d12a1fc10a
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Mon Apr 24 09:02:32 2023 +1000

    MAINTAINERS: Remove PPP maintainer
    
    I am not currently maintaining the kernel PPP code, so remove my
    address from the MAINTAINERS entry for it.
    
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

M	MAINTAINERS

commit 60ed3cd85b95184936bce70ed7f9e76a6a54a5e1
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Mon Apr 24 08:59:16 2023 +1000

    MAINTAINERS: Remove rage128 framebuffer driver maintainer
    
    I have not worked on this code for years, so remove my name as
    maintainer.
    
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	MAINTAINERS

commit b04ab8c13a73c10a97126fbe7076b2fbf632ba03
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Mon Apr 24 10:58:25 2023 +0200

    fbdev: vfb: Init owner field of struct fb_ops
    
    Initialize the owner field of struct fb_ops. Required to prevent
    module unloading while the driver is in use.
    
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/vfb.c

commit 25ec15abb06194963157fe42d41368b19a0d0d74
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Mon Apr 24 10:58:24 2023 +0200

    fbdev: ps3fb: Init owner field of struct fb_ops
    
    Initialize the owner field of struct fb_ops. Required to prevent
    module unloading while the driver is in use.
    
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/ps3fb.c

commit 55caa9a7aca0e7685ebb9f5082156e89cae36c4a
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Mon Apr 24 10:58:23 2023 +0200

    fbdev: 68328fb: Init owner field of struct fb_ops
    
    Initialize the owner field of struct fb_ops. Required to prevent
    module unloading while the driver is in use.
    
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/68328fb.c

commit b3a7a9ab65ae2f2626c7222fb79cdd433f8c5252
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Thu Apr 13 21:33:17 2023 +0200

    fbdev: mmp: Fix deferred clk handling in mmphw_probe()
    
    When dev_err_probe() is called, 'ret' holds the value of the previous
    successful devm_request_irq() call.
    'ret' should be assigned with a meaningful value before being used in
    dev_err_probe().
    
    While at it, use and return "PTR_ERR(ctrl->clk)" instead of a hard-coded
    "-ENOENT" so that -EPROBE_DEFER is handled and propagated correctly.
    
    Fixes: 81b63420564d ("fbdev: mmp: Make use of the helper function dev_err_probe()")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/mmp/hw/mmp_ctrl.c

commit bfff83c4824308f7acce47baf88858b52bc1314f
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Tue Mar 28 19:15:29 2023 -0700

    linux/vt_buffer.h: allow either builtin or modular for macros
    
    Fix build errors on ARCH=alpha when CONFIG_MDA_CONSOLE=m.
    This allows the ARCH macros to be the only ones defined.
    
    In file included from ../drivers/video/console/mdacon.c:37:
    ../arch/alpha/include/asm/vga.h:17:40: error: expected identifier or '(' before 'volatile'
       17 | static inline void scr_writew(u16 val, volatile u16 *addr)
          |                                        ^~~~~~~~
    ../include/linux/vt_buffer.h:24:34: note: in definition of macro 'scr_writew'
       24 | #define scr_writew(val, addr) (*(addr) = (val))
          |                                  ^~~~
    ../include/linux/vt_buffer.h:24:40: error: expected ')' before '=' token
       24 | #define scr_writew(val, addr) (*(addr) = (val))
          |                                        ^
    ../arch/alpha/include/asm/vga.h:17:20: note: in expansion of macro 'scr_writew'
       17 | static inline void scr_writew(u16 val, volatile u16 *addr)
          |                    ^~~~~~~~~~
    ../arch/alpha/include/asm/vga.h:25:29: error: expected identifier or '(' before 'volatile'
       25 | static inline u16 scr_readw(volatile const u16 *addr)
          |                             ^~~~~~~~
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Cc: dri-devel@lists.freedesktop.org
    Cc: linux-fbdev@vger.kernel.org
    Signed-off-by: Helge Deller <deller@gmx.de>

M	include/linux/vt_buffer.h

commit 0ddc95b59f05c280520fc3f23366293bc653d92d
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:28 2023 +0100

    fbdev: xilinxfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/xilinxfb.c

commit 89c4bbd457af5e18026e45bedd87f6f097edc83a
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:27 2023 +0100

    fbdev: wmt_ge_rops: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/wmt_ge_rops.c

commit 024a3cafa5c965fd121948db5023e867cdaf73c9
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:26 2023 +0100

    fbdev: wm8505fb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/wm8505fb.c

commit 3ab20cdc752d82939859a2aabe76ffd3fa5ece6f
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:25 2023 +0100

    fbdev: vt8500lcdfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/vt8500lcdfb.c

commit 87b1e9a57445e4ee38cf1c03c203c82d5dda6aa3
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:24 2023 +0100

    fbdev: via: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/via/via-gpio.c
M	drivers/video/fbdev/via/via_i2c.c

commit 4a5ef62ce73b3c73ad3f844052b37cbabd9e2357
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:23 2023 +0100

    fbdev: vga16fb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/vga16fb.c

commit 24f677094e325dd669b8f60b75779e7ef8263503
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:22 2023 +0100

    fbdev: vfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/vfb.c

commit f3db09aae19846f92dcf4c7c238a0ea6f9560617
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:21 2023 +0100

    fbdev: vesafb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/vesafb.c

commit 94bada58284c93a38105637bbab0513f9caa005d
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:20 2023 +0100

    fbdev: uvesafb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/uvesafb.c

commit 1fd99273942058f529b7b2821ada51e0d94aac23
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:19 2023 +0100

    fbdev: tcx: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/tcx.c

commit 7b49f61a7235813045c6adb34fdc5b5a0b7c2862
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:18 2023 +0100

    fbdev: sm501fb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/sm501fb.c

commit 4ba34066a29bd9db89525ed5c18d1838658402eb
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:17 2023 +0100

    fbdev: simplefb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/simplefb.c

commit 068240885346a4f484237e24dc1f75530a58c370
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:16 2023 +0100

    fbdev: sh_mobile_lcdcfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/sh_mobile_lcdcfb.c

commit 03dfa8d2be6f16c087fe871f043a99857cb38d80
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:15 2023 +0100

    fbdev: sh7760fb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/sh7760fb.c

commit f2f34fb9f94f79f7d7bb12410d2e0b7f3b867a54
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:14 2023 +0100

    fbdev: s3c-fb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/s3c-fb.c

commit 77da73b32ceae6bb240fb57be6858042c76f9362
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:13 2023 +0100

    fbdev: s1d13xxxfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/s1d13xxxfb.c

commit eb703b6089bdeee974a02894a001de3df804f772
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:12 2023 +0100

    fbdev: pxafb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/pxafb.c

commit 2872c2913abf2d51c2d333477933801e14cc284b
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:11 2023 +0100

    fbdev: pxa3xx-gcu: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/pxa3xx-gcu.c

commit bcfb6d43bb08babd207a93bce99d86c25febd51d
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:10 2023 +0100

    fbdev: pxa168fb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/pxa168fb.c

commit cc6a0d407c4a8c8ce9aa971124592b3c805cf6f6
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:09 2023 +0100

    fbdev: platinumfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/platinumfb.c

commit 4d7960389f9e91dc7d09734f79346850f4fd11d9
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:08 2023 +0100

    fbdev: p9100: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/p9100.c

commit dc6b77badc752e4965919f7b81ad9e3725ae0a64
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:07 2023 +0100

    fbdev: omapfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/omap/omapfb_main.c
M	drivers/video/fbdev/omap2/omapfb/dss/core.c
M	drivers/video/fbdev/omap2/omapfb/dss/dispc.c
M	drivers/video/fbdev/omap2/omapfb/dss/dpi.c
M	drivers/video/fbdev/omap2/omapfb/dss/dsi.c
M	drivers/video/fbdev/omap2/omapfb/dss/dss.c
M	drivers/video/fbdev/omap2/omapfb/dss/hdmi4.c
M	drivers/video/fbdev/omap2/omapfb/dss/hdmi5.c
M	drivers/video/fbdev/omap2/omapfb/dss/sdi.c
M	drivers/video/fbdev/omap2/omapfb/dss/venc.c
M	drivers/video/fbdev/omap2/omapfb/omapfb-main.c

commit db031426eb4680137f023d75fdb3646664227335
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:06 2023 +0100

    fbdev: offb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/offb.c

commit d14e9328fef310b42c58688cb5c3caaace5c967e
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:05 2023 +0100

    fbdev: ocfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/ocfb.c

commit 419368fba704bf34c6d04a891b3989f47678911e
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:04 2023 +0100

    fbdev: mx3fb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/mx3fb.c

commit d0513776c132e040b2a438864dd1a2a362326858
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:03 2023 +0100

    fbdev: metronomefb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/metronomefb.c

commit 3a2ab02ddfacb04f92d47f2fe6e4aef4c95366e4
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:02 2023 +0100

    fbdev: mb862xx: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/mb862xx/mb862xxfbdrv.c

commit 3eafb6a37617eff4678723acb3400fe37e77f631
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:01 2023 +0100

    fbdev: leo: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/leo.c

commit 909b7a3ea3989715ff20c191682c6a90eac3b4a4
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:54:00 2023 +0100

    fbdev: imxfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/imxfb.c

commit a1bb53688630aff762e79c6e4d781f33283f82a7
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:59 2023 +0100

    fbdev: hitfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/hitfb.c

commit f693b4de3546fa484b86437fb06ac307603aed3e
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:58 2023 +0100

    fbdev: hgafb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/hgafb.c

commit 5be0ce71097d087060cc9e9a416f62fa74e5a9dd
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:57 2023 +0100

    fbdev: hecubafb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/hecubafb.c

commit 41aede214f2f68f69d42a802ca8aab5b1aa9ea66
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:56 2023 +0100

    fbdev: grvga: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/grvga.c

commit ecab1e9a54db8a2535d3ee7b25f78c3d02dfad19
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:55 2023 +0100

    fbdev: goldfishfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/goldfishfb.c

commit e16e7ea4a8e5023ce9a68d7762102b5a9ccb17dd
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:54 2023 +0100

    fbdev: gbefb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/gbefb.c

commit 0dc08e875aca46813efad5a18c98749d2fb41935
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:53 2023 +0100

    fbdev: fsl-diu-fb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/fsl-diu-fb.c

commit b917b0a9c6b92e0abb4e07a9568cd93df831b7ff
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:52 2023 +0100

    fbdev: ffb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/ffb.c

commit 81431a9eaca14166f4dec21059f67cea81fac688
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:51 2023 +0100

    fbdev: ep93xx-fb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/ep93xx-fb.c

commit 156ebfe4c87d1379fd599677d90056c911dc03f8
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:50 2023 +0100

    fbdev: efifb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/efifb.c

commit 33c890d022f91d7807cc9673f7017b480f64b2cf
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:49 2023 +0100

    fbdev: da8xx-fb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/da8xx-fb.c

commit ac40ac6ca0fae749417819d9081d79886b1154a4
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:48 2023 +0100

    fbdev: cobalt_lcdfb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/cobalt_lcdfb.c

commit fdc757fe7cb0f14dff4dc43c843a453d6bc41a48
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:47 2023 +0100

    fbdev: clps711x-fb: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/clps711x-fb.c

commit 2a50e4a1e685f9703763ee4a13f7bc622eecf79e
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:46 2023 +0100

    fbdev: cg6: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/cg6.c

commit dd65e6f3fad96150cf54f8757f71884127ec4376
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:45 2023 +0100

    fbdev: cg3: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/cg3.c

commit 2d419df353d2558544c894509304acf7753bb4f7
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Sun Mar 19 00:53:44 2023 +0100

    fbdev: cg14: Convert to platform remove callback returning void
    
    The .remove() callback for a platform driver returns an int which makes
    many driver authors wrongly assume it's possible to do error handling by
    returning an error code. However the value returned is (mostly) ignored
    and this typically results in resource leaks. To improve here there is a
    quest to make the remove callback return void. In the first step of this
    quest all drivers are converted to .remove_new() which already returns
    void.
    
    Trivially convert this driver from always returning zero in the remove
    callback to the void returning variant.
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Helge Deller <deller@gmx.de>

M	drivers/video/fbdev/cg14.c

commit 1492c6b1874ac5ed57d8ffef89e2b5c59f804aa8
Author: Henry Willard <henry.willard@oracle.com>
Date:   Wed Apr 12 15:29:53 2023 -0600

    MIPS: Don't clear _PAGE_SPECIAL in _PAGE_CHG_MASK
    
    In the special case where
    
            p = mmap(NULL, ALLOC_SIZE, PROT_READ,
                    MAP_PRIVATE | MAP_ANONYMOUS | MAP_POPULATE, -1, 0);
    
    is followed by
    
            rc = mprotect(p, ALLOC_SIZE, PROT_NONE);
    
    the _PAGE_SPECIAL bit in the page tables will be cleared by
    mistake and the later unmapped operations will incorrectly
    modify the struct page for the the zero page. This sequence
    occurs in the madvise05 test of the Linux Test Project
    suite of tests.
    
    This was discovered while testing an older version of the kernel
    (5.4.17) on a MIPS device. Unfortunately, support for this device
    is not available in newer kernels, so I can't test this with the
    latest Linux kernel code. It looks like the problem exists in
    newer kernels, but I can't verify it. Except for the LTP test,
    this sequence of calls is probably not common.
    
    Passing it along in the hope it will be useful to someone.
    
    Signed-off-by: Henry Willard <henry.willard@oracle.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

M	arch/mips/include/asm/pgtable-bits.h

commit ce8ac91130b96f651cf6b5245668dfa4969c9c42
Merge: 96ae3995c693 49aba1c5896b e088d80e2a1e
Author: Borislav Petkov (AMD) <bp@alien8.de>
Date:   Mon Apr 24 09:14:30 2023 +0200

    Merge branches 'edac-drivers', 'edac-amd64' and 'edac-misc' into edac-updates
    
    Combine all queued EDAC changes for submission into v6.4:
    
    * ras/edac-drivers:
      EDAC/i10nm: Add Intel Sierra Forest server support
      EDAC/skx: Fix overflows on the DRAM row address mapping arrays
    
    * ras/edac-amd64: (27 commits)
      EDAC/amd64: Fix indentation in umc_determine_edac_cap()
      EDAC/amd64: Add get_err_info() to pvt->ops
      EDAC/amd64: Split dump_misc_regs() into dct/umc functions
      EDAC/amd64: Split init_csrows() into dct/umc functions
      EDAC/amd64: Split determine_edac_cap() into dct/umc functions
      EDAC/amd64: Rename f17h_determine_edac_ctl_cap()
      EDAC/amd64: Split setup_mci_misc_attrs() into dct/umc functions
      EDAC/amd64: Split ecc_enabled() into dct/umc functions
      EDAC/amd64: Split read_mc_regs() into dct/umc functions
      EDAC/amd64: Split determine_memory_type() into dct/umc functions
      EDAC/amd64: Split read_base_mask() into dct/umc functions
      EDAC/amd64: Split prep_chip_selects() into dct/umc functions
      EDAC/amd64: Rework hw_info_{get,put}
      EDAC/amd64: Merge struct amd64_family_type into struct amd64_pvt
      EDAC/amd64: Do not discover ECC symbol size for Family 17h and later
      EDAC/amd64: Drop dbam_to_cs() for Family 17h and later
      EDAC/amd64: Split get_csrow_nr_pages() into dct/umc functions
      EDAC/amd64: Rename debug_display_dimm_sizes()
    
    * ras/edac-misc:
      EDAC/altera: Remove MODULE_LICENSE in non-module
      EDAC: Sanitize MODULE_AUTHOR strings
      EDAC/amd81[13]1: Remove trailing newline from MODULE_AUTHOR
      EDAC/i5100: Fix typo in comment
      EDAC/altera: Remove redundant error logging
    
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>

commit 7002cbd625467084f1ef01b6e365e10b51fc4b9f
Author: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
Date:   Sun Apr 23 20:10:02 2023 +0200

    ALSA: emu10k1: use high-level I/O in set_filterQ()
    
    This makes the code shorter and more legible.
    
    Signed-off-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
    Link: https://lore.kernel.org/r/20230423181002.1246793-2-oswald.buddenhagen@gmx.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

M	include/sound/emu10k1.h
M	sound/pci/emu10k1/emu10k1_callback.c

commit d184d60aa301e424cd0cf7de90b40744710a2417
Author: Zhengkang Huang <zkhuang@hust.edu.cn>
Date:   Wed Apr 19 18:03:03 2023 +0800

    platform/chrome: wilco_ec: remove return value check of debugfs_create_dir()
    
    Smatch complains that:
    wilco_ec_debugfs_probe() warn: 'debug_info->dir' is an error
    pointer or valid
    
    Debugfs checks are generally not supposed to be checked
    for errors and it is not necessary here.
    
    Just delete the dead code.
    
    Signed-off-by: Zhengkang Huang <zkhuang@hust.edu.cn>
    Reviewed-by: Dongliang Mu <dzm91@hust.edu.cn>
    Signed-off-by: Tzung-Bi Shih <tzungbi@kernel.org>
    Link: https://lore.kernel.org/r/20230419100303.343379-1-zkhuang@hust.edu.cn

M	drivers/platform/chrome/wilco_ec/debugfs.c

commit 1f3744b89164a430865d18b757b86c4007627855
Author: Tzung-Bi Shih <tzungbi@kernel.org>
Date:   Tue Apr 11 13:33:08 2023 +0800

    platform/chrome: cros_ec_debugfs: fix kernel-doc warning
    
    Fix the following kernel-doc warning:
    
    $ ./scripts/kernel-doc -none drivers/platform/chrome/*
    [...]
    warning: This comment starts with '/**', but isn't a kernel-doc comment.
    
    Fixes: 14bb09b32f43 ("platform/chrome: cros_ec: Separate logic for getting panic info")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Tzung-Bi Shih <tzungbi@kernel.org>
    Reviewed-by: Benson Leung <bleung@chromium.org>
    Link: https://lore.kernel.org/r/20230411053308.1572493-1-tzungbi@kernel.org

M	drivers/platform/chrome/cros_ec_debugfs.c

commit 26e1dc1bef42a699734056271e790982e2ba8092
Author: Rob Barnes <robbarnes@google.com>
Date:   Mon Apr 10 16:58:17 2023 +0000

    platform/chrome: cros_ec: Separate logic for getting panic info
    
    Create a separate function called cros_ec_get_panicinfo for getting
    panic info from EC.
    
    Currently cros_ec_create_panicinfo is the only caller.
    
    Signed-off-by: Rob Barnes <robbarnes@google.com>
    Signed-off-by: Tzung-Bi Shih <tzungbi@kernel.org>
    Link: https://lore.kernel.org/r/20230410165817.932449-1-robbarnes@google.com

M	drivers/platform/chrome/cros_ec_debugfs.c

commit dc70234c408c644505a24362b0f095f713e4697e
Author: Liang He <windhl@126.com>
Date:   Wed Mar 22 12:16:57 2023 +0800

    platform/chrome: cros_typec_switch: Add missing fwnode_handle_put()
    
    In cros_typec_register_switches(), we should add fwnode_handle_put()
    when break out of the iteration device_for_each_child_node()
    as it will automatically increase and decrease the refcounter.
    
    Fixes: affc804c44c8 ("platform/chrome: cros_typec_switch: Add switch driver")
    Signed-off-by: Liang He <windhl@126.com>
    Link: https://lore.kernel.org/r/20230322041657.1857001-1-windhl@126.com
    Signed-off-by: Prashant Malani <pmalani@chromium.org>

M	drivers/platform/chrome/cros_typec_switch.c

commit 554ec02c97254962bbb0a8776c3160d294fc7e51
Author: Tzung-Bi Shih <tzungbi@kernel.org>
Date:   Wed Mar 8 11:12:47 2023 +0800

    platform/chrome: cros_ec: remove unneeded label and if-condition
    
    Both `ec_dev->ec` and `ec_dev->pd` are initialized to NULL at the
    beginning of cros_ec_register().  Also, platform_device_unregister()
    takes care if the given platform_device is NULL.
    
    Remove the unneeded goto-label and if-condition.
    
    Signed-off-by: Tzung-Bi Shih <tzungbi@kernel.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Link: https://lore.kernel.org/r/20230308031247.2866401-1-tzungbi@kernel.org

M	drivers/platform/chrome/cros_ec.c
